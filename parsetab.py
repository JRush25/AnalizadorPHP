
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ARRAY_MAP ASIGNACION BOOLEANF BOOLEANT CADENA CATCH COMA DECREMENTO DIVIDE DO DOUBLE_ARROW ECHO ELSE ELSEIF EXCEPTION FIN FLOAT FOR FUNCTION ID IF IGUAL INCREMENTO INICIO INSERT IS_NOT_EQUAL LCORCH LLLAVE LPAREN MAYOR MAYORIGUAL MENOR MENORIGUAL MINUS MOD NFUNCION NUMBER OR PCOMA PLUS PRINT RCORCH REF RETURN RLLAVE RPAREN SINGLEARROW SORT TIMES TRY WHILEprograma : INICIO sentencias FINsentencias : asignacion\n                    | comparacion\n                    | funcion\n                    | impresion\n                    | repeticion\n                    | expresion\n                    | excepcion\n                    | estdatos\n    asignacion : ID ASIGNACION valor PCOMA\n                | ID REF ID PCOMA\n                | ID ASIGNACION estdatos PCOMA\n                | ID ASIGNACION expresion PCOMAvalor : ID\n            | NUMBER\n            | FLOAT\n            | boolean\n            | CADENAboolean : BOOLEANT\n                | BOOLEANFopcomparacion : IGUAL\n                    | MAYOR\n                    | MENOR\n                    | MAYORIGUAL\n                    | MENORIGUAL\n                    | IS_NOT_EQUALexpcmp : valor opcomparacion valor\n            | LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN\n             expcmplog : expcmp oplog expcmp\n                | expcmp oplog expcmplogoplog : AND\n            | ORcomparacion : IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE\n                    | IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVEcomparacion : IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVEcomparacion : IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE array : ARRAY LPAREN contenido RPAREN\n            contenido : valor DOUBLE_ARROW valor\n                | valor DOUBLE_ARROW valor COMA contenido\n                | valor\n                | valor COMA contenidosort : SORT LPAREN ID RPAREN PCOMAestdatos : array\n                | array_map\n                | heapnumero : NUMBER\n            | FLOATexpresionmat : numero operadormat numerooperadormat : PLUS\n                    | MINUS\n                    | TIMES\n                    | DIVIDE\n                    | MODexpresion : expresionmat\n                | expcmplogfuncion : sortfuncion : FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE\n            | FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVEargs : ID\n            | ID COMA argsexcepcion : TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVEimpresion : ECHO valor PCOMA\n             | PRINT valor PCOMA\n             | PRINT expresionmat PCOMArepeticionrep : MAYOR\n                  | MENOR\n                  | MAYORIGUAL\n                  | MENORIGUAL actualizar : INCREMENTO\n                | DECREMENTO\n  repeticion : FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVErepeticion : WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE\n                  | DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA\n  array_map : ARRAY_MAP LPAREN CADENA COMA valor RPAREN PCOMAheap : ID SINGLEARROW INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA\n                | ID SINGLEARROW INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA'
    
_lr_action_items = {'INICIO':([0,],[2,]),'$end':([1,40,],[0,-1,]),'ID':([2,4,5,6,7,8,9,10,11,15,17,18,20,21,22,28,29,30,31,37,38,39,41,42,44,45,46,47,48,49,50,51,53,54,55,56,57,58,65,66,67,68,69,76,84,87,88,89,90,91,92,93,96,99,100,101,105,106,107,108,116,120,121,122,123,126,127,130,137,142,146,148,152,156,157,158,161,163,165,171,172,178,183,184,185,189,197,201,203,205,206,209,211,212,214,220,222,223,227,228,229,231,],[12,-2,-3,-4,-5,-6,-7,-8,-9,53,-55,-56,53,53,-54,-18,-43,-44,-45,-17,-19,-20,78,82,53,-21,-22,-23,-24,-25,-26,53,-14,-15,-16,53,-31,-32,94,95,12,12,98,53,-27,53,-29,-30,114,-62,-63,-64,117,-48,-46,-47,-10,-12,-13,-11,53,-37,53,53,53,12,12,114,-42,53,12,160,53,-33,-34,53,12,180,-74,-57,53,188,12,53,53,199,207,-75,-35,-28,-58,53,-76,12,-72,224,12,-73,-61,12,-71,-36,]),'IF':([2,67,68,126,127,146,161,183,212,222,228,],[14,14,14,14,14,14,14,14,14,14,14,]),'FUNCTION':([2,67,68,126,127,146,161,183,212,222,228,],[19,19,19,19,19,19,19,19,19,19,19,]),'ECHO':([2,67,68,126,127,146,161,183,200,212,222,228,],[20,20,20,20,20,20,20,20,210,20,20,20,]),'PRINT':([2,67,68,126,127,146,161,183,212,222,228,],[21,21,21,21,21,21,21,21,21,21,21,]),'FOR':([2,67,68,126,127,146,161,183,212,222,228,],[23,23,23,23,23,23,23,23,23,23,23,]),'WHILE':([2,67,68,126,127,146,161,162,183,212,222,228,],[25,25,25,25,25,25,25,179,25,25,25,25,]),'DO':([2,67,68,126,127,146,161,183,212,222,228,],[26,26,26,26,26,26,26,26,26,26,26,]),'TRY':([2,67,68,126,127,146,161,183,212,222,228,],[27,27,27,27,27,27,27,27,27,27,27,]),'SORT':([2,67,68,126,127,146,161,183,212,222,228,],[32,32,32,32,32,32,32,32,32,32,32,]),'ARRAY':([2,41,67,68,109,126,127,146,161,183,212,222,228,],[34,34,34,34,125,34,34,34,34,34,34,34,34,]),'ARRAY_MAP':([2,41,67,68,126,127,146,161,183,212,222,228,],[35,35,35,35,35,35,35,35,35,35,35,35,]),'NUMBER':([2,15,20,21,41,44,45,46,47,48,49,50,51,56,57,58,67,68,70,71,72,73,74,75,76,87,115,116,121,122,123,124,126,127,142,146,152,154,158,161,167,172,173,174,175,176,177,183,184,185,209,212,222,228,],[24,54,54,63,63,54,-21,-22,-23,-24,-25,-26,54,54,-31,-32,24,24,100,-49,-50,-51,-52,-53,54,54,131,54,54,54,54,141,24,24,54,24,54,166,54,24,182,54,187,-65,-66,-67,-68,24,54,54,54,24,24,24,]),'FLOAT':([2,15,20,21,41,44,45,46,47,48,49,50,51,56,57,58,67,68,70,71,72,73,74,75,76,87,116,121,122,123,126,127,142,146,152,158,161,172,183,184,185,209,212,222,228,],[36,55,55,64,64,55,-21,-22,-23,-24,-25,-26,55,55,-31,-32,36,36,101,-49,-50,-51,-52,-53,55,55,55,55,55,55,36,36,55,36,55,55,36,55,36,55,55,55,36,36,36,]),'LPAREN':([2,14,23,25,32,34,35,41,51,56,57,58,59,67,68,83,125,126,127,136,145,146,161,169,179,183,184,212,222,228,],[15,51,65,66,69,76,77,15,15,15,-31,-32,90,15,15,109,142,15,15,151,158,15,15,184,189,15,15,15,15,15,]),'CADENA':([2,15,20,21,41,44,45,46,47,48,49,50,51,56,57,58,67,68,76,77,87,116,121,122,123,126,127,142,146,152,158,161,172,183,184,185,209,210,212,222,228,],[28,28,28,28,28,28,-21,-22,-23,-24,-25,-26,28,28,-31,-32,28,28,28,104,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,216,28,28,28,]),'BOOLEANT':([2,15,20,21,41,44,45,46,47,48,49,50,51,56,57,58,67,68,76,87,116,121,122,123,126,127,142,146,152,158,161,172,183,184,185,209,212,222,228,],[38,38,38,38,38,38,-21,-22,-23,-24,-25,-26,38,38,-31,-32,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'BOOLEANF':([2,15,20,21,41,44,45,46,47,48,49,50,51,56,57,58,67,68,76,87,116,121,122,123,126,127,142,146,152,158,161,172,183,184,185,209,212,222,228,],[39,39,39,39,39,39,-21,-22,-23,-24,-25,-26,39,39,-31,-32,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'FIN':([3,4,5,6,7,8,9,10,11,17,18,22,28,29,30,31,37,38,39,53,54,55,84,88,89,91,92,93,99,100,101,105,106,107,108,120,137,156,157,165,171,201,203,205,206,211,214,223,227,229,231,],[40,-2,-3,-4,-5,-6,-7,-8,-9,-55,-56,-54,-18,-43,-44,-45,-17,-19,-20,-14,-15,-16,-27,-29,-30,-62,-63,-64,-48,-46,-47,-10,-12,-13,-11,-37,-42,-33,-34,-74,-57,-75,-35,-28,-58,-76,-72,-73,-61,-71,-36,]),'RLLAVE':([4,5,6,7,8,9,10,11,17,18,22,28,29,30,31,37,38,39,53,54,55,84,88,89,91,92,93,97,99,100,101,105,106,107,108,120,137,143,144,150,156,157,159,165,171,193,196,201,203,205,206,208,211,214,217,223,224,226,227,229,230,231,],[-2,-3,-4,-5,-6,-7,-8,-9,-55,-56,-54,-18,-43,-44,-45,-17,-19,-20,-14,-15,-16,-27,-29,-30,-62,-63,-64,118,-48,-46,-47,-10,-12,-13,-11,-37,-42,156,157,162,-33,-34,171,-74,-57,203,206,-75,-35,-28,-58,214,-76,-72,221,-73,227,229,-61,-71,231,-36,]),'RETURN':([4,5,6,7,8,9,10,11,17,18,22,28,29,30,31,37,38,39,53,54,55,84,88,89,91,92,93,99,100,101,105,106,107,108,120,137,156,157,159,165,171,201,203,205,206,211,214,223,227,229,231,],[-2,-3,-4,-5,-6,-7,-8,-9,-55,-56,-54,-18,-43,-44,-45,-17,-19,-20,-14,-15,-16,-27,-29,-30,-62,-63,-64,-48,-46,-47,-10,-12,-13,-11,-37,-42,-33,-34,172,-74,-57,-75,-35,-28,-58,-76,-72,-73,-61,-71,-36,]),'ASIGNACION':([12,94,],[41,115,]),'REF':([12,],[42,]),'SINGLEARROW':([12,78,],[43,43,]),'IGUAL':([12,13,24,28,36,37,38,39,52,53,54,55,63,64,78,79,95,170,199,],[-14,45,-15,-18,-16,-17,-19,-20,45,-14,-15,-16,-15,-16,-14,45,45,45,45,]),'MAYOR':([12,13,24,28,36,37,38,39,52,53,54,55,63,64,78,79,95,160,170,199,],[-14,46,-15,-18,-16,-17,-19,-20,46,-14,-15,-16,-15,-16,-14,46,46,174,46,46,]),'MENOR':([12,13,24,28,36,37,38,39,52,53,54,55,63,64,78,79,95,160,170,199,],[-14,47,-15,-18,-16,-17,-19,-20,47,-14,-15,-16,-15,-16,-14,47,47,175,47,47,]),'MAYORIGUAL':([12,13,24,28,36,37,38,39,52,53,54,55,63,64,78,79,95,160,170,199,],[-14,48,-15,-18,-16,-17,-19,-20,48,-14,-15,-16,-15,-16,-14,48,48,176,48,48,]),'MENORIGUAL':([12,13,24,28,36,37,38,39,52,53,54,55,63,64,78,79,95,160,170,199,],[-14,49,-15,-18,-16,-17,-19,-20,49,-14,-15,-16,-15,-16,-14,49,49,177,49,49,]),'IS_NOT_EQUAL':([12,13,24,28,36,37,38,39,52,53,54,55,63,64,78,79,95,170,199,],[-14,50,-15,-18,-16,-17,-19,-20,50,-14,-15,-16,-15,-16,-14,50,50,50,50,]),'AND':([16,28,37,38,39,53,54,55,84,85,88,128,205,],[57,-18,-17,-19,-20,-14,-15,-16,-27,57,57,57,-28,]),'OR':([16,28,37,38,39,53,54,55,84,85,88,128,205,],[58,-18,-17,-19,-20,-14,-15,-16,-27,58,58,58,-28,]),'PCOMA':([17,22,28,29,30,31,37,38,39,53,54,55,60,61,62,63,64,78,79,80,81,82,84,88,89,99,100,101,119,120,131,133,134,135,153,165,186,187,191,198,201,202,205,211,219,],[-55,-54,-18,-43,-44,-45,-17,-19,-20,-14,-15,-16,91,92,93,-15,-16,-14,105,106,107,108,-27,-29,-30,-48,-46,-47,137,-37,148,150,-69,-70,165,-74,196,197,201,208,-75,211,-28,-76,223,]),'NFUNCION':([19,],[59,]),'PLUS':([24,33,36,63,64,],[-46,71,-47,-46,-47,]),'MINUS':([24,33,36,63,64,],[-46,72,-47,-46,-47,]),'TIMES':([24,33,36,63,64,],[-46,73,-47,-46,-47,]),'DIVIDE':([24,33,36,63,64,],[-46,74,-47,-46,-47,]),'MOD':([24,33,36,63,64,],[-46,75,-47,-46,-47,]),'LLLAVE':([26,27,110,111,129,149,168,190,204,218,225,],[67,68,126,127,146,161,183,200,212,222,228,]),'RPAREN':([28,37,38,39,53,54,55,84,85,86,88,89,98,102,103,112,113,114,132,134,135,138,139,140,147,164,180,181,182,192,194,195,205,213,215,],[-18,-17,-19,-20,-14,-15,-16,-27,110,111,-29,-30,119,120,-40,128,129,-59,149,-69,-70,-38,-41,153,-60,-39,190,191,192,202,204,205,-28,218,219,]),'DOUBLE_ARROW':([28,37,38,39,53,54,55,103,155,],[-18,-17,-19,-20,-14,-15,-16,121,167,]),'COMA':([28,37,38,39,53,54,55,103,104,114,138,141,216,],[-18,-17,-19,-20,-14,-15,-16,122,123,130,152,154,220,]),'INSERT':([43,],[83,]),'LCORCH':([109,],[124,]),'INCREMENTO':([117,188,207,],[134,134,134,]),'DECREMENTO':([117,188,207,],[135,135,135,]),'CATCH':([118,],[136,]),'EXCEPTION':([151,],[163,]),'ELSE':([156,221,],[168,225,]),'ELSEIF':([156,],[169,]),'RCORCH':([166,],[181,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'sentencias':([2,67,68,126,127,146,161,183,212,222,228,],[3,96,97,143,144,159,178,193,217,226,230,]),'asignacion':([2,67,68,126,127,146,161,183,212,222,228,],[4,4,4,4,4,4,4,4,4,4,4,]),'comparacion':([2,67,68,126,127,146,161,183,212,222,228,],[5,5,5,5,5,5,5,5,5,5,5,]),'funcion':([2,67,68,126,127,146,161,183,212,222,228,],[6,6,6,6,6,6,6,6,6,6,6,]),'impresion':([2,67,68,126,127,146,161,183,212,222,228,],[7,7,7,7,7,7,7,7,7,7,7,]),'repeticion':([2,67,68,126,127,146,161,183,212,222,228,],[8,8,8,8,8,8,8,8,8,8,8,]),'expresion':([2,41,67,68,126,127,146,161,183,212,222,228,],[9,81,9,9,9,9,9,9,9,9,9,9,]),'excepcion':([2,67,68,126,127,146,161,183,212,222,228,],[10,10,10,10,10,10,10,10,10,10,10,]),'estdatos':([2,41,67,68,126,127,146,161,183,212,222,228,],[11,80,11,11,11,11,11,11,11,11,11,11,]),'valor':([2,15,20,21,41,44,51,56,67,68,76,87,116,121,122,123,126,127,142,146,152,158,161,172,183,184,185,209,212,222,228,],[13,52,60,61,79,84,13,13,13,13,103,112,132,138,103,140,13,13,155,13,103,170,13,186,13,13,195,215,13,13,13,]),'expcmp':([2,41,51,56,67,68,126,127,146,161,183,184,212,222,228,],[16,16,85,88,16,16,16,16,16,16,16,194,16,16,16,]),'expcmplog':([2,41,51,56,67,68,126,127,146,161,183,212,222,228,],[17,17,86,89,17,17,17,17,17,17,17,17,17,17,]),'sort':([2,67,68,126,127,146,161,183,212,222,228,],[18,18,18,18,18,18,18,18,18,18,18,]),'expresionmat':([2,21,41,67,68,126,127,146,161,183,212,222,228,],[22,62,22,22,22,22,22,22,22,22,22,22,22,]),'array':([2,41,67,68,126,127,146,161,183,212,222,228,],[29,29,29,29,29,29,29,29,29,29,29,29,]),'array_map':([2,41,67,68,126,127,146,161,183,212,222,228,],[30,30,30,30,30,30,30,30,30,30,30,30,]),'heap':([2,41,67,68,126,127,146,161,183,212,222,228,],[31,31,31,31,31,31,31,31,31,31,31,31,]),'numero':([2,21,41,67,68,70,126,127,146,161,183,212,222,228,],[33,33,33,33,33,99,33,33,33,33,33,33,33,33,]),'boolean':([2,15,20,21,41,44,51,56,67,68,76,87,116,121,122,123,126,127,142,146,152,158,161,172,183,184,185,209,212,222,228,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'opcomparacion':([13,52,79,95,170,199,],[44,87,44,116,185,209,]),'oplog':([16,85,88,128,],[56,56,56,145,]),'operadormat':([33,],[70,]),'contenido':([76,122,152,],[102,139,164,]),'args':([90,130,],[113,147,]),'actualizar':([117,188,207,],[133,198,213,]),'repeticionrep':([160,],[173,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> INICIO sentencias FIN','programa',3,'p_programa','sintactico.py',9),
  ('sentencias -> asignacion','sentencias',1,'p_sentencias','sintactico.py',14),
  ('sentencias -> comparacion','sentencias',1,'p_sentencias','sintactico.py',15),
  ('sentencias -> funcion','sentencias',1,'p_sentencias','sintactico.py',16),
  ('sentencias -> impresion','sentencias',1,'p_sentencias','sintactico.py',17),
  ('sentencias -> repeticion','sentencias',1,'p_sentencias','sintactico.py',18),
  ('sentencias -> expresion','sentencias',1,'p_sentencias','sintactico.py',19),
  ('sentencias -> excepcion','sentencias',1,'p_sentencias','sintactico.py',20),
  ('sentencias -> estdatos','sentencias',1,'p_sentencias','sintactico.py',21),
  ('asignacion -> ID ASIGNACION valor PCOMA','asignacion',4,'p_asignacion','sintactico.py',26),
  ('asignacion -> ID REF ID PCOMA','asignacion',4,'p_asignacion','sintactico.py',27),
  ('asignacion -> ID ASIGNACION estdatos PCOMA','asignacion',4,'p_asignacion','sintactico.py',28),
  ('asignacion -> ID ASIGNACION expresion PCOMA','asignacion',4,'p_asignacion','sintactico.py',29),
  ('valor -> ID','valor',1,'p_valor','sintactico.py',35),
  ('valor -> NUMBER','valor',1,'p_valor','sintactico.py',36),
  ('valor -> FLOAT','valor',1,'p_valor','sintactico.py',37),
  ('valor -> boolean','valor',1,'p_valor','sintactico.py',38),
  ('valor -> CADENA','valor',1,'p_valor','sintactico.py',39),
  ('boolean -> BOOLEANT','boolean',1,'p_boolean','sintactico.py',42),
  ('boolean -> BOOLEANF','boolean',1,'p_boolean','sintactico.py',43),
  ('opcomparacion -> IGUAL','opcomparacion',1,'p_opcomparacion','sintactico.py',45),
  ('opcomparacion -> MAYOR','opcomparacion',1,'p_opcomparacion','sintactico.py',46),
  ('opcomparacion -> MENOR','opcomparacion',1,'p_opcomparacion','sintactico.py',47),
  ('opcomparacion -> MAYORIGUAL','opcomparacion',1,'p_opcomparacion','sintactico.py',48),
  ('opcomparacion -> MENORIGUAL','opcomparacion',1,'p_opcomparacion','sintactico.py',49),
  ('opcomparacion -> IS_NOT_EQUAL','opcomparacion',1,'p_opcomparacion','sintactico.py',50),
  ('expcmp -> valor opcomparacion valor','expcmp',3,'p_expresioncmp','sintactico.py',54),
  ('expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN','expcmp',11,'p_expresioncmp','sintactico.py',55),
  ('expcmplog -> expcmp oplog expcmp','expcmplog',3,'p_expresioncmplog','sintactico.py',60),
  ('expcmplog -> expcmp oplog expcmplog','expcmplog',3,'p_expresioncmplog','sintactico.py',61),
  ('oplog -> AND','oplog',1,'p_oplog','sintactico.py',65),
  ('oplog -> OR','oplog',1,'p_oplog','sintactico.py',66),
  ('comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE','comparacion',7,'p_comparacionif','sintactico.py',71),
  ('comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE','comparacion',7,'p_comparacionif','sintactico.py',72),
  ('comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE','comparacion',11,'p_comparacionif_else','sintactico.py',76),
  ('comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE','comparacion',18,'p_comparacionif_elseif_else','sintactico.py',79),
  ('array -> ARRAY LPAREN contenido RPAREN','array',4,'p_array','sintactico.py',82),
  ('contenido -> valor DOUBLE_ARROW valor','contenido',3,'p_contenido','sintactico.py',86),
  ('contenido -> valor DOUBLE_ARROW valor COMA contenido','contenido',5,'p_contenido','sintactico.py',87),
  ('contenido -> valor','contenido',1,'p_contenido','sintactico.py',88),
  ('contenido -> valor COMA contenido','contenido',3,'p_contenido','sintactico.py',89),
  ('sort -> SORT LPAREN ID RPAREN PCOMA','sort',5,'p_sort','sintactico.py',93),
  ('estdatos -> array','estdatos',1,'p_estdatos','sintactico.py',96),
  ('estdatos -> array_map','estdatos',1,'p_estdatos','sintactico.py',97),
  ('estdatos -> heap','estdatos',1,'p_estdatos','sintactico.py',98),
  ('numero -> NUMBER','numero',1,'p_numero','sintactico.py',100),
  ('numero -> FLOAT','numero',1,'p_numero','sintactico.py',101),
  ('expresionmat -> numero operadormat numero','expresionmat',3,'p_expresionmat','sintactico.py',105),
  ('operadormat -> PLUS','operadormat',1,'p_operadormat_plus','sintactico.py',121),
  ('operadormat -> MINUS','operadormat',1,'p_operadormat_plus','sintactico.py',122),
  ('operadormat -> TIMES','operadormat',1,'p_operadormat_plus','sintactico.py',123),
  ('operadormat -> DIVIDE','operadormat',1,'p_operadormat_plus','sintactico.py',124),
  ('operadormat -> MOD','operadormat',1,'p_operadormat_plus','sintactico.py',125),
  ('expresion -> expresionmat','expresion',1,'p_expresion','sintactico.py',129),
  ('expresion -> expcmplog','expresion',1,'p_expresion','sintactico.py',130),
  ('funcion -> sort','funcion',1,'p_funcion','sintactico.py',132),
  ('funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE','funcion',8,'p_funciondef','sintactico.py',135),
  ('funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE','funcion',11,'p_funciondef','sintactico.py',136),
  ('args -> ID','args',1,'p_args','sintactico.py',140),
  ('args -> ID COMA args','args',3,'p_args','sintactico.py',141),
  ('excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE','excepcion',15,'p_excepcion','sintactico.py',144),
  ('impresion -> ECHO valor PCOMA','impresion',3,'p_impresion','sintactico.py',149),
  ('impresion -> PRINT valor PCOMA','impresion',3,'p_impresion','sintactico.py',150),
  ('impresion -> PRINT expresionmat PCOMA','impresion',3,'p_impresion','sintactico.py',151),
  ('repeticionrep -> MAYOR','repeticionrep',1,'p_repeticioncompfor','sintactico.py',155),
  ('repeticionrep -> MENOR','repeticionrep',1,'p_repeticioncompfor','sintactico.py',156),
  ('repeticionrep -> MAYORIGUAL','repeticionrep',1,'p_repeticioncompfor','sintactico.py',157),
  ('repeticionrep -> MENORIGUAL','repeticionrep',1,'p_repeticioncompfor','sintactico.py',158),
  ('actualizar -> INCREMENTO','actualizar',1,'p_actualizar','sintactico.py',161),
  ('actualizar -> DECREMENTO','actualizar',1,'p_actualizar','sintactico.py',162),
  ('repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE','repeticion',16,'p_repeticionfor','sintactico.py',166),
  ('repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE','repeticion',12,'p_repeticionwhile','sintactico.py',171),
  ('repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA','repeticion',14,'p_repeticionwhile','sintactico.py',172),
  ('array_map -> ARRAY_MAP LPAREN CADENA COMA valor RPAREN PCOMA','array_map',7,'p_array_map','sintactico.py',176),
  ('heap -> ID SINGLEARROW INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA','heap',11,'p_heap','sintactico.py',179),
  ('heap -> ID SINGLEARROW INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA','heap',12,'p_heap','sintactico.py',180),
]
