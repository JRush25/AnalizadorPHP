
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND ARRAY ARRAY_MAP ASIGNACION BOOLEAN BOOLEAN_AND BOOLEAN_OR BREAK CADENA CASE CATCH CLASS COMA COMMENT CONCAT_EQUAL CONST CONTINUE DECLARE DECREMENTO DEFAULT DIVIDE DIV_EQUAL DO DOUBLE_ARROW ECHO ELSE ELSEIF EXCEPTION EXTENDS FIN FINAL FLECHA FOR FUNCTION GETMESSAGE GLOBAL HEAP ID IF IGUAL INCLUDE INCREMENTO INICIO INSERT INSTANCEOF IS_NOT_EQUAL LCORCH LLLAVE LPAREN MAYOR MAYORIGUAL MENOR MENORIGUAL MINUS MOD NFUNCION NUMBER OR PCOMA PLUS PRINT PRIVATE PROTECTED PUBLIC RCORCH REF RETURN RLLAVE RPAREN SORT TIMES TRY WHILEprograma : INICIO sentencias FINsentencias : asignacion\n                    | comparacion\n                    | funcion\n                    | impresion\n                    | repeticion\n                    | expresion\n                    | excepcion\n    asignacion : ID ASIGNACION valor PCOMA\n                | ID REF ID PCOMA\n                | ID ASIGNACION estdatos PCOMA\n                | ID ASIGNACION expresion PCOMAvalor : ID\n             | NUMBER\n             | CADENA\n             | BOOLEAN\n    opcomparacion : IGUAL\n                    | MAYOR\n                    | MENOR\n                    | MAYORIGUAL\n                    | MENORIGUAL\n    expcmp : valor opcomparacion valor\n            | LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN\n            | LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp expcmplog : expcmp oplog expcmp\n                | expcmp oplog expcmplogoplog : BOOLEAN_OR\n            | BOOLEAN_AND\n            | AND\n            | ORcomparacion : IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE\n                    | IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVEcomparacion : IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVEcomparacion : IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE array : ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN\n            | ARRAY LPAREN valor RPARENsort : SORT LPAREN ID RPAREN PCOMAestdatos : array\n                | array_map\n                | heapexpresionmat : NUMBER operadormat NUMBERoperadormat : PLUS\n                    | DIVIDE\n                    | MINUS\n                    | TIMESexpresion : expresionmat\n                | expcmplogfuncion : sortfuncion : FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE\n            | FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVEargs : ID\n            | ID argsexcepcion : TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVEimpresion : ECHO ID PCOMA\n             | ECHO CADENA PCOMArepeticionrep : MAYOR\n                  | MENOR\n                  | MAYORIGUAL\n                  | MENORIGUAL\n  actualizar : INCREMENTO\n                | DECREMENTO\n  repeticion : FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVErepeticion : WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE\n                  | DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA\n  array_map : ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMAheap : HEAP DOUBLE_ARROW INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA\n                | LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA'
    
_lr_action_items = {'INICIO':([0,],[2,]),'$end':([1,29,],[0,-1,]),'ID':([2,4,5,6,7,8,9,10,14,16,17,19,20,25,28,30,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46,47,50,56,57,58,59,68,72,75,76,77,79,80,82,84,87,88,89,90,94,98,100,105,108,109,111,119,120,130,138,139,140,141,143,145,159,165,166,167,168,169,172,180,186,188,192,195,196,197,199,204,207,209,210,215,216,219,220,],[11,-2,-3,-4,-5,-6,-7,-8,40,-47,-48,48,-15,-46,-16,40,71,40,-17,-18,-19,-20,-21,40,-13,-14,40,-27,-28,-29,-30,78,81,83,11,11,86,40,-22,40,-25,-26,-54,-55,-41,101,-9,-11,-12,40,-10,111,40,40,11,11,111,-37,40,142,-31,-32,40,11,11,161,171,11,40,40,-49,40,182,190,-33,-23,40,11,40,-50,-63,-24,211,11,-64,11,-62,-53,-34,]),'IF':([2,57,58,108,109,141,143,165,195,209,215,],[13,13,13,13,13,13,13,13,13,13,13,]),'FUNCTION':([2,57,58,92,108,109,141,143,165,195,209,215,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'ECHO':([2,57,58,108,109,141,143,165,183,195,209,215,],[19,19,19,19,19,19,19,19,193,19,19,19,]),'FOR':([2,57,58,108,109,141,143,165,195,209,215,],[21,21,21,21,21,21,21,21,21,21,21,]),'WHILE':([2,57,58,108,109,141,143,144,165,195,209,215,],[23,23,23,23,23,23,23,160,23,23,23,23,]),'DO':([2,57,58,108,109,141,143,165,195,209,215,],[24,24,24,24,24,24,24,24,24,24,24,]),'TRY':([2,57,58,108,109,141,143,165,195,209,215,],[26,26,26,26,26,26,26,26,26,26,26,]),'SORT':([2,57,58,92,108,109,141,143,165,195,209,215,],[27,27,27,27,27,27,27,27,27,27,27,27,]),'NUMBER':([2,14,30,32,33,34,35,36,37,38,42,43,44,45,46,51,52,53,54,55,57,58,68,75,90,99,100,105,108,109,120,135,137,140,141,143,154,155,156,157,158,164,165,166,167,169,192,195,196,209,215,],[22,41,63,41,-17,-18,-19,-20,-21,41,41,-27,-28,-29,-30,82,-42,-43,-44,-45,22,22,41,41,41,113,41,41,22,22,41,147,149,41,22,22,170,-56,-57,-58,-59,175,22,41,41,41,41,22,41,22,22,]),'LPAREN':([2,13,21,23,27,30,38,42,43,44,45,46,57,58,67,69,78,91,107,108,109,118,127,141,143,151,160,165,166,195,196,209,215,],[14,38,50,56,59,68,14,14,-27,-28,-29,-30,14,14,90,92,98,105,124,14,14,133,140,14,14,166,172,14,14,14,14,14,14,]),'CADENA':([2,14,19,30,32,33,34,35,36,37,38,42,43,44,45,46,57,58,68,75,90,100,105,108,109,120,140,141,143,165,166,167,169,192,193,195,196,209,215,],[20,20,49,20,20,-17,-18,-19,-20,-21,20,20,-27,-28,-29,-30,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,201,20,20,20,20,]),'BOOLEAN':([2,14,30,32,33,34,35,36,37,38,42,43,44,45,46,57,58,68,75,90,100,105,108,109,120,140,141,143,165,166,167,169,192,195,196,209,215,],[28,28,28,28,-17,-18,-19,-20,-21,28,28,-27,-28,-29,-30,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'FIN':([3,4,5,6,7,8,9,10,16,17,20,25,28,40,41,72,76,77,79,80,82,87,88,89,94,119,138,139,168,186,188,197,199,204,210,216,219,220,],[29,-2,-3,-4,-5,-6,-7,-8,-47,-48,-15,-46,-16,-13,-14,-22,-25,-26,-54,-55,-41,-9,-11,-12,-10,-37,-31,-32,-49,-33,-23,-50,-63,-24,-64,-62,-53,-34,]),'RLLAVE':([4,5,6,7,8,9,10,16,17,20,25,28,40,41,72,76,77,79,80,82,85,87,88,89,94,119,125,126,132,138,139,153,168,176,186,188,189,191,197,199,203,204,210,213,216,217,218,219,220,],[-2,-3,-4,-5,-6,-7,-8,-47,-48,-15,-46,-16,-13,-14,-22,-25,-26,-54,-55,-41,102,-9,-11,-12,-10,-37,138,139,144,-31,-32,168,-49,186,-33,-23,197,199,-50,-63,208,-24,-64,216,-62,219,220,-53,-34,]),'RETURN':([4,5,6,7,8,9,10,16,17,20,25,28,40,41,72,76,77,79,80,82,87,88,89,94,119,138,139,153,168,186,188,197,199,204,210,216,219,220,],[-2,-3,-4,-5,-6,-7,-8,-47,-48,-15,-46,-16,-13,-14,-22,-25,-26,-54,-55,-41,-9,-11,-12,-10,-37,-31,-32,169,-49,-33,-23,-50,-63,-24,-64,-62,-53,-34,]),'ASIGNACION':([11,81,],[30,99,]),'REF':([11,],[31,]),'IGUAL':([11,12,20,22,28,39,40,41,60,63,83,152,182,],[-13,33,-15,-14,-16,33,-13,-14,33,-14,33,33,33,]),'MAYOR':([11,12,20,22,28,39,40,41,60,63,83,142,152,182,],[-13,34,-15,-14,-16,34,-13,-14,34,-14,34,155,34,34,]),'MENOR':([11,12,20,22,28,39,40,41,60,63,83,142,152,182,],[-13,35,-15,-14,-16,35,-13,-14,35,-14,35,156,35,35,]),'MAYORIGUAL':([11,12,20,22,28,39,40,41,60,63,83,142,152,182,],[-13,36,-15,-14,-16,36,-13,-14,36,-14,36,157,36,36,]),'MENORIGUAL':([11,12,20,22,28,39,40,41,60,63,83,142,152,182,],[-13,37,-15,-14,-16,37,-13,-14,37,-14,37,158,37,37,]),'BOOLEAN_OR':([15,20,28,40,41,72,73,76,110,188,204,],[43,-15,-16,-13,-14,-22,43,43,43,43,-24,]),'BOOLEAN_AND':([15,20,28,40,41,72,73,76,110,188,204,],[44,-15,-16,-13,-14,-22,44,44,44,44,-24,]),'AND':([15,20,28,40,41,72,73,76,110,188,204,],[45,-15,-16,-13,-14,-22,45,45,45,45,-24,]),'OR':([15,20,28,40,41,72,73,76,110,188,204,],[46,-15,-16,-13,-14,-22,46,46,46,46,-24,]),'PCOMA':([16,20,25,28,40,41,48,49,60,61,62,63,64,65,66,71,72,76,77,82,103,113,115,116,117,121,146,148,163,170,174,179,181,184,188,194,202,204,206,],[-47,-15,-46,-16,-13,-14,79,80,87,88,89,-14,-38,-39,-40,94,-22,-25,-26,-41,119,130,132,-60,-61,-36,-35,163,-65,180,184,189,191,-67,-23,202,-66,-24,210,]),'COMA':([17,106,119,149,168,197,201,],[-48,123,-37,164,-49,-50,207,]),'NFUNCION':([18,],[47,]),'RPAREN':([20,28,40,41,72,73,74,76,77,86,97,104,111,112,114,116,117,121,128,134,136,146,147,161,162,177,178,185,188,198,200,204,],[-15,-16,-13,-14,-22,95,96,-25,-26,103,110,121,-51,129,131,-60,-61,-36,-52,146,148,-35,162,173,174,187,188,194,-23,205,206,-24,]),'DOUBLE_ARROW':([20,28,40,41,70,104,122,],[-15,-16,-13,-14,93,120,135,]),'PLUS':([22,63,],[52,52,]),'DIVIDE':([22,63,],[53,53,]),'MINUS':([22,63,],[54,54,]),'TIMES':([22,63,],[55,55,]),'LLLAVE':([24,26,95,96,129,131,150,173,187,205,212,],[57,58,108,109,141,143,165,183,195,209,215,]),'ARRAY':([30,68,123,],[67,91,67,]),'ARRAY_MAP':([30,],[69,]),'HEAP':([30,],[70,]),'INSERT':([93,],[107,]),'INCREMENTO':([101,171,190,],[116,116,116,]),'DECREMENTO':([101,171,190,],[117,117,117,]),'CATCH':([102,],[118,]),'LCORCH':([124,],[137,]),'EXCEPTION':([133,],[145,]),'ELSE':([138,208,],[150,212,]),'ELSEIF':([138,],[151,]),'RCORCH':([175,],[185,]),'FLECHA':([211,],[214,]),'GETMESSAGE':([214,],[217,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'sentencias':([2,57,58,108,109,141,143,165,195,209,215,],[3,84,85,125,126,153,159,176,203,213,218,]),'asignacion':([2,57,58,108,109,141,143,165,195,209,215,],[4,4,4,4,4,4,4,4,4,4,4,]),'comparacion':([2,57,58,108,109,141,143,165,195,209,215,],[5,5,5,5,5,5,5,5,5,5,5,]),'funcion':([2,57,58,92,108,109,141,143,165,195,209,215,],[6,6,6,106,6,6,6,6,6,6,6,6,]),'impresion':([2,57,58,108,109,141,143,165,195,209,215,],[7,7,7,7,7,7,7,7,7,7,7,]),'repeticion':([2,57,58,108,109,141,143,165,195,209,215,],[8,8,8,8,8,8,8,8,8,8,8,]),'expresion':([2,30,57,58,108,109,141,143,165,195,209,215,],[9,62,9,9,9,9,9,9,9,9,9,9,]),'excepcion':([2,57,58,108,109,141,143,165,195,209,215,],[10,10,10,10,10,10,10,10,10,10,10,]),'valor':([2,14,30,32,38,42,57,58,68,75,90,100,105,108,109,120,140,141,143,165,166,167,169,192,195,196,209,215,],[12,39,60,72,12,12,12,12,39,97,104,114,122,12,12,134,152,12,12,12,12,178,179,200,12,12,12,12,]),'expcmp':([2,30,38,42,57,58,108,109,141,143,165,166,195,196,209,215,],[15,15,73,76,15,15,15,15,15,15,15,177,15,204,15,15,]),'expcmplog':([2,30,38,42,57,58,108,109,141,143,165,195,209,215,],[16,16,74,77,16,16,16,16,16,16,16,16,16,16,]),'sort':([2,57,58,92,108,109,141,143,165,195,209,215,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'expresionmat':([2,30,57,58,108,109,141,143,165,195,209,215,],[25,25,25,25,25,25,25,25,25,25,25,25,]),'opcomparacion':([12,39,60,83,152,182,],[32,75,32,100,167,192,]),'oplog':([15,73,76,110,188,],[42,42,42,127,196,]),'operadormat':([22,63,],[51,51,]),'estdatos':([30,],[61,]),'array':([30,123,],[64,136,]),'array_map':([30,],[65,]),'heap':([30,],[66,]),'args':([98,111,],[112,128,]),'actualizar':([101,171,190,],[115,181,198,]),'repeticionrep':([142,],[154,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> INICIO sentencias FIN','programa',3,'p_programa','sintactico.py',6),
  ('sentencias -> asignacion','sentencias',1,'p_sentencias','sintactico.py',11),
  ('sentencias -> comparacion','sentencias',1,'p_sentencias','sintactico.py',12),
  ('sentencias -> funcion','sentencias',1,'p_sentencias','sintactico.py',13),
  ('sentencias -> impresion','sentencias',1,'p_sentencias','sintactico.py',14),
  ('sentencias -> repeticion','sentencias',1,'p_sentencias','sintactico.py',15),
  ('sentencias -> expresion','sentencias',1,'p_sentencias','sintactico.py',16),
  ('sentencias -> excepcion','sentencias',1,'p_sentencias','sintactico.py',17),
  ('asignacion -> ID ASIGNACION valor PCOMA','asignacion',4,'p_asignacion','sintactico.py',22),
  ('asignacion -> ID REF ID PCOMA','asignacion',4,'p_asignacion','sintactico.py',23),
  ('asignacion -> ID ASIGNACION estdatos PCOMA','asignacion',4,'p_asignacion','sintactico.py',24),
  ('asignacion -> ID ASIGNACION expresion PCOMA','asignacion',4,'p_asignacion','sintactico.py',25),
  ('valor -> ID','valor',1,'p_valor','sintactico.py',29),
  ('valor -> NUMBER','valor',1,'p_valor','sintactico.py',30),
  ('valor -> CADENA','valor',1,'p_valor','sintactico.py',31),
  ('valor -> BOOLEAN','valor',1,'p_valor','sintactico.py',32),
  ('opcomparacion -> IGUAL','opcomparacion',1,'p_opcomparacion','sintactico.py',37),
  ('opcomparacion -> MAYOR','opcomparacion',1,'p_opcomparacion','sintactico.py',38),
  ('opcomparacion -> MENOR','opcomparacion',1,'p_opcomparacion','sintactico.py',39),
  ('opcomparacion -> MAYORIGUAL','opcomparacion',1,'p_opcomparacion','sintactico.py',40),
  ('opcomparacion -> MENORIGUAL','opcomparacion',1,'p_opcomparacion','sintactico.py',41),
  ('expcmp -> valor opcomparacion valor','expcmp',3,'p_expresioncmp','sintactico.py',46),
  ('expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN','expcmp',11,'p_expresioncmp','sintactico.py',47),
  ('expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp','expcmp',13,'p_expresioncmp','sintactico.py',48),
  ('expcmplog -> expcmp oplog expcmp','expcmplog',3,'p_expresioncmplog','sintactico.py',52),
  ('expcmplog -> expcmp oplog expcmplog','expcmplog',3,'p_expresioncmplog','sintactico.py',53),
  ('oplog -> BOOLEAN_OR','oplog',1,'p_oplog','sintactico.py',57),
  ('oplog -> BOOLEAN_AND','oplog',1,'p_oplog','sintactico.py',58),
  ('oplog -> AND','oplog',1,'p_oplog','sintactico.py',59),
  ('oplog -> OR','oplog',1,'p_oplog','sintactico.py',60),
  ('comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE','comparacion',7,'p_comparacionif','sintactico.py',64),
  ('comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE','comparacion',7,'p_comparacionif','sintactico.py',65),
  ('comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE','comparacion',11,'p_comparacionif_else','sintactico.py',69),
  ('comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE','comparacion',18,'p_comparacionif_elseif_else','sintactico.py',72),
  ('array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN','array',6,'p_array','sintactico.py',75),
  ('array -> ARRAY LPAREN valor RPAREN','array',4,'p_array','sintactico.py',76),
  ('sort -> SORT LPAREN ID RPAREN PCOMA','sort',5,'p_sort','sintactico.py',80),
  ('estdatos -> array','estdatos',1,'p_estdatos','sintactico.py',83),
  ('estdatos -> array_map','estdatos',1,'p_estdatos','sintactico.py',84),
  ('estdatos -> heap','estdatos',1,'p_estdatos','sintactico.py',85),
  ('expresionmat -> NUMBER operadormat NUMBER','expresionmat',3,'p_expresionmat','sintactico.py',88),
  ('operadormat -> PLUS','operadormat',1,'p_operadormat','sintactico.py',91),
  ('operadormat -> DIVIDE','operadormat',1,'p_operadormat','sintactico.py',92),
  ('operadormat -> MINUS','operadormat',1,'p_operadormat','sintactico.py',93),
  ('operadormat -> TIMES','operadormat',1,'p_operadormat','sintactico.py',94),
  ('expresion -> expresionmat','expresion',1,'p_expresion','sintactico.py',98),
  ('expresion -> expcmplog','expresion',1,'p_expresion','sintactico.py',99),
  ('funcion -> sort','funcion',1,'p_funcion','sintactico.py',101),
  ('funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE','funcion',9,'p_funciondef','sintactico.py',104),
  ('funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE','funcion',12,'p_funciondef','sintactico.py',105),
  ('args -> ID','args',1,'p_args','sintactico.py',109),
  ('args -> ID args','args',2,'p_args','sintactico.py',110),
  ('excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE','excepcion',17,'p_excepcion','sintactico.py',113),
  ('impresion -> ECHO ID PCOMA','impresion',3,'p_impresion','sintactico.py',118),
  ('impresion -> ECHO CADENA PCOMA','impresion',3,'p_impresion','sintactico.py',119),
  ('repeticionrep -> MAYOR','repeticionrep',1,'p_repeticioncompfor','sintactico.py',122),
  ('repeticionrep -> MENOR','repeticionrep',1,'p_repeticioncompfor','sintactico.py',123),
  ('repeticionrep -> MAYORIGUAL','repeticionrep',1,'p_repeticioncompfor','sintactico.py',124),
  ('repeticionrep -> MENORIGUAL','repeticionrep',1,'p_repeticioncompfor','sintactico.py',125),
  ('actualizar -> INCREMENTO','actualizar',1,'p_actualizar','sintactico.py',129),
  ('actualizar -> DECREMENTO','actualizar',1,'p_actualizar','sintactico.py',130),
  ('repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE','repeticion',16,'p_repeticionfor','sintactico.py',134),
  ('repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE','repeticion',12,'p_repeticionwhile','sintactico.py',139),
  ('repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA','repeticion',14,'p_repeticionwhile','sintactico.py',140),
  ('array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA','array_map',7,'p_array_map','sintactico.py',144),
  ('heap -> HEAP DOUBLE_ARROW INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA','heap',11,'p_heap','sintactico.py',147),
  ('heap -> LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA','heap',9,'p_heap','sintactico.py',148),
]
