
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND ARRAY ARRAY_MAP ASIGNACION BOOLEAN BOOLEAN_AND BOOLEAN_OR BREAK CADENA CASE CATCH CLASS COMA COMMENT CONCAT_EQUAL CONST CONTINUE DECLARE DECREMENTO DEFAULT DIVIDE DIV_EQUAL DO DOUBLE_ARROW ECHO ELSE ELSEIF EXCEPTION EXTENDS FIN FINAL FLECHA FOR FUNCTION GETMESSAGE GLOBAL HEAP ID IF IGUAL INCLUDE INCREMENTO INICIO INSERT INSTANCEOF IS_NOT_EQUAL LCORCH LLLAVE LPAREN MAYOR MAYORIGUAL MENOR MENORIGUAL MINUS MOD NFUNCION NUMBER OR PCOMA PLUS PRINT PRIVATE PROTECTED PUBLIC RCORCH REF RETURN RLLAVE RPAREN SORT TIMES TRY WHILEprograma : INICIO sentencias FINsentencias : asignacion\n                    | comparacion\n                    | funcion\n                    | impresion\n                    | repeticion\n                    | expresion\n                    | excepcion\n                    | estdatos\n    asignacion : ID ASIGNACION valor PCOMA\n                | ID REF ID PCOMA\n                | ID ASIGNACION estdatos PCOMA\n                | ID ASIGNACION expresion PCOMAvalor : ID\n            | NUMBER\n            | BOOLEAN\n            | CADENAopcomparacion : IGUAL\n                    | MAYOR\n                    | MENOR\n                    | MAYORIGUAL\n                    | MENORIGUAL expcmp : valor opcomparacion valor\n            | LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN\n            | LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp expcmplog : expcmp oplog expcmp\n                | expcmp oplog expcmplogoplog : BOOLEAN_OR\n            | BOOLEAN_AND\n            | AND\n            | ORcomparacion : IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE\n                    | IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVEcomparacion : IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVEcomparacion : IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE array : ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN\n            | ARRAY LPAREN valor RPARENsort : SORT LPAREN ID RPAREN PCOMAestdatos : array\n                | array_map\n                | heapexpresionmat : NUMBER operadormat NUMBERoperadormat : PLUS\n                    | MINUS\n                    | TIMES\n                    | DIVIDEexpresion : expresionmat\n                | expcmplogfuncion : sortfuncion : FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE\n            | FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVEargs : ID\n            | ID argsexcepcion : TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVEimpresion : ECHO valor PCOMA\n             | PRINT valor PCOMA\n             | PRINT expresionmat PCOMArepeticionrep : MAYOR\n                  | MENOR\n                  | MAYORIGUAL\n                  | MENORIGUAL actualizar : INCREMENTO\n                | DECREMENTO\n  repeticion : FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVErepeticion : WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE\n                  | DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA\n  array_map : ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMAheap : INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA\n                | INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMAexpression : ID'
    
_lr_action_items = {'INICIO':([0,],[2,]),'$end':([1,37,],[0,-1,]),'ID':([2,4,5,6,7,8,9,10,11,15,17,18,20,21,22,28,29,30,31,36,38,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,60,66,67,68,69,70,77,80,81,82,84,85,86,88,90,97,98,99,100,104,106,110,111,114,115,116,118,126,136,140,144,145,146,147,149,151,152,164,169,170,171,172,173,176,178,184,188,189,191,195,197,198,199,201,205,208,210,211,216,217,220,221,],[12,-2,-3,-4,-5,-6,-7,-8,-9,48,-48,-49,48,48,-47,-17,-39,-40,-41,-16,48,76,48,-18,-19,-20,-21,-22,48,-14,-15,48,-28,-29,-30,-31,83,87,89,12,12,92,48,-23,48,-26,-27,-55,-56,-57,-42,107,-10,-12,-13,-11,118,48,48,-37,48,12,12,118,-38,148,-36,-32,-33,48,12,12,166,-67,175,12,48,48,-50,48,186,-68,193,-69,-34,-24,48,12,48,-51,-65,-25,212,12,-66,12,-64,-54,-35,]),'IF':([2,67,68,115,116,147,149,169,197,210,216,],[14,14,14,14,14,14,14,14,14,14,14,]),'FUNCTION':([2,67,68,71,115,116,147,149,169,197,210,216,],[19,19,19,19,19,19,19,19,19,19,19,19,]),'ECHO':([2,67,68,115,116,147,149,169,187,197,210,216,],[20,20,20,20,20,20,20,20,196,20,20,20,]),'PRINT':([2,67,68,115,116,147,149,169,197,210,216,],[21,21,21,21,21,21,21,21,21,21,21,]),'FOR':([2,67,68,115,116,147,149,169,197,210,216,],[23,23,23,23,23,23,23,23,23,23,23,]),'WHILE':([2,67,68,115,116,147,149,150,169,197,210,216,],[25,25,25,25,25,25,25,165,25,25,25,25,]),'DO':([2,67,68,115,116,147,149,169,197,210,216,],[26,26,26,26,26,26,26,26,26,26,26,]),'TRY':([2,67,68,115,116,147,149,169,197,210,216,],[27,27,27,27,27,27,27,27,27,27,27,]),'SORT':([2,67,68,71,115,116,147,149,169,197,210,216,],[32,32,32,32,32,32,32,32,32,32,32,32,]),'NUMBER':([2,15,20,21,38,40,41,42,43,44,45,46,50,51,52,53,54,61,62,63,64,65,67,68,70,80,95,105,106,110,114,115,116,129,143,146,147,149,159,160,161,162,163,169,170,171,173,195,197,198,210,216,],[24,49,49,59,59,49,-18,-19,-20,-21,-22,49,49,-28,-29,-30,-31,88,-43,-44,-45,-46,24,24,49,49,113,120,49,49,49,24,24,142,154,49,24,24,174,-58,-59,-60,-61,24,49,49,49,49,24,49,24,24,]),'ARRAY':([2,38,67,68,72,112,115,116,147,149,169,197,210,216,],[33,33,33,33,96,33,33,33,33,33,33,33,33,33,]),'ARRAY_MAP':([2,38,67,68,115,116,147,149,169,197,210,216,],[34,34,34,34,34,34,34,34,34,34,34,34,]),'INSERT':([2,38,67,68,115,116,147,149,169,197,210,216,],[35,35,35,35,35,35,35,35,35,35,35,35,]),'LPAREN':([2,14,23,25,32,33,34,35,38,46,50,51,52,53,54,67,68,83,96,115,116,125,133,147,149,156,165,169,170,197,198,210,216,],[15,46,60,66,69,70,71,72,15,15,15,-28,-29,-30,-31,15,15,104,114,15,15,139,146,15,15,170,176,15,15,15,15,15,15,]),'BOOLEAN':([2,15,20,21,38,40,41,42,43,44,45,46,50,51,52,53,54,67,68,70,80,106,110,114,115,116,146,147,149,169,170,171,173,195,197,198,210,216,],[36,36,36,36,36,36,-18,-19,-20,-21,-22,36,36,-28,-29,-30,-31,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'CADENA':([2,15,20,21,38,40,41,42,43,44,45,46,50,51,52,53,54,67,68,70,80,106,110,114,115,116,146,147,149,169,170,171,173,195,196,197,198,210,216,],[28,28,28,28,28,28,-18,-19,-20,-21,-22,28,28,-28,-29,-30,-31,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,203,28,28,28,28,]),'FIN':([3,4,5,6,7,8,9,10,11,17,18,22,28,29,30,31,36,48,49,77,81,82,84,85,86,88,97,98,99,100,111,126,140,144,145,152,172,178,188,189,191,199,201,205,211,217,220,221,],[37,-2,-3,-4,-5,-6,-7,-8,-9,-48,-49,-47,-17,-39,-40,-41,-16,-14,-15,-23,-26,-27,-55,-56,-57,-42,-10,-12,-13,-11,-37,-38,-36,-32,-33,-67,-50,-68,-69,-34,-24,-51,-65,-25,-66,-64,-54,-35,]),'RLLAVE':([4,5,6,7,8,9,10,11,17,18,22,28,29,30,31,36,48,49,77,81,82,84,85,86,88,91,97,98,99,100,111,126,131,132,138,140,144,145,152,158,172,178,180,188,189,191,192,194,199,201,204,205,211,214,217,218,219,220,221,],[-2,-3,-4,-5,-6,-7,-8,-9,-48,-49,-47,-17,-39,-40,-41,-16,-14,-15,-23,-26,-27,-55,-56,-57,-42,108,-10,-12,-13,-11,-37,-38,144,145,150,-36,-32,-33,-67,172,-50,-68,189,-69,-34,-24,199,201,-51,-65,209,-25,-66,217,-64,220,221,-54,-35,]),'RETURN':([4,5,6,7,8,9,10,11,17,18,22,28,29,30,31,36,48,49,77,81,82,84,85,86,88,97,98,99,100,111,126,140,144,145,152,158,172,178,188,189,191,199,201,205,211,217,220,221,],[-2,-3,-4,-5,-6,-7,-8,-9,-48,-49,-47,-17,-39,-40,-41,-16,-14,-15,-23,-26,-27,-55,-56,-57,-42,-10,-12,-13,-11,-37,-38,-36,-32,-33,-67,173,-50,-68,-69,-34,-24,-51,-65,-25,-66,-64,-54,-35,]),'ASIGNACION':([12,87,],[38,105,]),'REF':([12,],[39,]),'IGUAL':([12,13,24,28,36,47,48,49,59,73,89,157,186,],[-14,41,-15,-17,-16,41,-14,-15,-15,41,41,41,41,]),'MAYOR':([12,13,24,28,36,47,48,49,59,73,89,148,157,186,],[-14,42,-15,-17,-16,42,-14,-15,-15,42,42,160,42,42,]),'MENOR':([12,13,24,28,36,47,48,49,59,73,89,148,157,186,],[-14,43,-15,-17,-16,43,-14,-15,-15,43,43,161,43,43,]),'MAYORIGUAL':([12,13,24,28,36,47,48,49,59,73,89,148,157,186,],[-14,44,-15,-17,-16,44,-14,-15,-15,44,44,162,44,44,]),'MENORIGUAL':([12,13,24,28,36,47,48,49,59,73,89,148,157,186,],[-14,45,-15,-17,-16,45,-14,-15,-15,45,45,163,45,45,]),'BOOLEAN_OR':([16,28,36,48,49,77,78,81,117,191,205,],[51,-17,-16,-14,-15,-23,51,51,51,51,-25,]),'BOOLEAN_AND':([16,28,36,48,49,77,78,81,117,191,205,],[52,-17,-16,-14,-15,-23,52,52,52,52,-25,]),'AND':([16,28,36,48,49,77,78,81,117,191,205,],[53,-17,-16,-14,-15,-23,53,53,53,53,-25,]),'OR':([16,28,36,48,49,77,78,81,117,191,205,],[54,-17,-16,-14,-15,-23,54,54,54,54,-25,]),'PCOMA':([17,22,28,29,30,31,36,48,49,56,57,58,59,73,74,75,76,77,81,82,88,109,111,120,122,123,124,140,141,152,167,174,178,179,183,185,188,191,205,207,],[-48,-47,-17,-39,-40,-41,-16,-14,-15,84,85,86,-15,97,98,99,100,-23,-26,-27,-42,126,-37,136,138,-62,-63,-36,152,-67,178,184,-68,188,192,194,-69,-24,-25,211,]),'COMA':([18,94,113,126,172,199,203,],[-49,112,129,-38,-50,-51,208,]),'NFUNCION':([19,],[55,]),'PLUS':([24,59,],[62,62,]),'MINUS':([24,59,],[63,63,]),'TIMES':([24,59,],[64,64,]),'DIVIDE':([24,59,],[65,65,]),'LLLAVE':([26,27,101,102,135,137,155,177,190,206,213,],[67,68,115,116,147,149,169,187,197,210,216,]),'RPAREN':([28,36,48,49,77,78,79,81,82,92,93,103,111,118,119,121,123,124,127,128,134,140,153,154,166,168,181,182,191,200,202,205,],[-17,-16,-14,-15,-23,101,102,-26,-27,109,111,117,-37,-52,135,137,-62,-63,140,141,-53,-36,167,168,177,179,190,191,-24,206,207,-25,]),'DOUBLE_ARROW':([28,36,48,49,93,130,],[-17,-16,-14,-15,110,143,]),'LCORCH':([72,],[95,]),'INCREMENTO':([107,175,193,],[123,123,123,]),'DECREMENTO':([107,175,193,],[124,124,124,]),'CATCH':([108,],[125,]),'EXCEPTION':([139,],[151,]),'RCORCH':([142,],[153,]),'ELSE':([144,209,],[155,213,]),'ELSEIF':([144,],[156,]),'FLECHA':([212,],[215,]),'GETMESSAGE':([215,],[218,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'sentencias':([2,67,68,115,116,147,149,169,197,210,216,],[3,90,91,131,132,158,164,180,204,214,219,]),'asignacion':([2,67,68,115,116,147,149,169,197,210,216,],[4,4,4,4,4,4,4,4,4,4,4,]),'comparacion':([2,67,68,115,116,147,149,169,197,210,216,],[5,5,5,5,5,5,5,5,5,5,5,]),'funcion':([2,67,68,71,115,116,147,149,169,197,210,216,],[6,6,6,94,6,6,6,6,6,6,6,6,]),'impresion':([2,67,68,115,116,147,149,169,197,210,216,],[7,7,7,7,7,7,7,7,7,7,7,]),'repeticion':([2,67,68,115,116,147,149,169,197,210,216,],[8,8,8,8,8,8,8,8,8,8,8,]),'expresion':([2,38,67,68,115,116,147,149,169,197,210,216,],[9,75,9,9,9,9,9,9,9,9,9,9,]),'excepcion':([2,67,68,115,116,147,149,169,197,210,216,],[10,10,10,10,10,10,10,10,10,10,10,]),'estdatos':([2,38,67,68,115,116,147,149,169,197,210,216,],[11,74,11,11,11,11,11,11,11,11,11,11,]),'valor':([2,15,20,21,38,40,46,50,67,68,70,80,106,110,114,115,116,146,147,149,169,170,171,173,195,197,198,210,216,],[13,47,56,57,73,77,13,13,13,13,93,103,121,127,130,13,13,157,13,13,13,13,182,183,202,13,13,13,13,]),'expcmp':([2,38,46,50,67,68,115,116,147,149,169,170,197,198,210,216,],[16,16,78,81,16,16,16,16,16,16,16,181,16,205,16,16,]),'expcmplog':([2,38,46,50,67,68,115,116,147,149,169,197,210,216,],[17,17,79,82,17,17,17,17,17,17,17,17,17,17,]),'sort':([2,67,68,71,115,116,147,149,169,197,210,216,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'expresionmat':([2,21,38,67,68,115,116,147,149,169,197,210,216,],[22,58,22,22,22,22,22,22,22,22,22,22,22,]),'array':([2,38,67,68,112,115,116,147,149,169,197,210,216,],[29,29,29,29,128,29,29,29,29,29,29,29,29,]),'array_map':([2,38,67,68,115,116,147,149,169,197,210,216,],[30,30,30,30,30,30,30,30,30,30,30,30,]),'heap':([2,38,67,68,115,116,147,149,169,197,210,216,],[31,31,31,31,31,31,31,31,31,31,31,31,]),'opcomparacion':([13,47,73,89,157,186,],[40,80,40,106,171,195,]),'oplog':([16,78,81,117,191,],[50,50,50,133,198,]),'operadormat':([24,59,],[61,61,]),'args':([104,118,],[119,134,]),'actualizar':([107,175,193,],[122,185,200,]),'repeticionrep':([148,],[159,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> INICIO sentencias FIN','programa',3,'p_programa','sintactico.py',9),
  ('sentencias -> asignacion','sentencias',1,'p_sentencias','sintactico.py',14),
  ('sentencias -> comparacion','sentencias',1,'p_sentencias','sintactico.py',15),
  ('sentencias -> funcion','sentencias',1,'p_sentencias','sintactico.py',16),
  ('sentencias -> impresion','sentencias',1,'p_sentencias','sintactico.py',17),
  ('sentencias -> repeticion','sentencias',1,'p_sentencias','sintactico.py',18),
  ('sentencias -> expresion','sentencias',1,'p_sentencias','sintactico.py',19),
  ('sentencias -> excepcion','sentencias',1,'p_sentencias','sintactico.py',20),
  ('sentencias -> estdatos','sentencias',1,'p_sentencias','sintactico.py',21),
  ('asignacion -> ID ASIGNACION valor PCOMA','asignacion',4,'p_asignacion','sintactico.py',26),
  ('asignacion -> ID REF ID PCOMA','asignacion',4,'p_asignacion','sintactico.py',27),
  ('asignacion -> ID ASIGNACION estdatos PCOMA','asignacion',4,'p_asignacion','sintactico.py',28),
  ('asignacion -> ID ASIGNACION expresion PCOMA','asignacion',4,'p_asignacion','sintactico.py',29),
  ('valor -> ID','valor',1,'p_valor','sintactico.py',35),
  ('valor -> NUMBER','valor',1,'p_valor','sintactico.py',36),
  ('valor -> BOOLEAN','valor',1,'p_valor','sintactico.py',37),
  ('valor -> CADENA','valor',1,'p_valor','sintactico.py',38),
  ('opcomparacion -> IGUAL','opcomparacion',1,'p_opcomparacion','sintactico.py',42),
  ('opcomparacion -> MAYOR','opcomparacion',1,'p_opcomparacion','sintactico.py',43),
  ('opcomparacion -> MENOR','opcomparacion',1,'p_opcomparacion','sintactico.py',44),
  ('opcomparacion -> MAYORIGUAL','opcomparacion',1,'p_opcomparacion','sintactico.py',45),
  ('opcomparacion -> MENORIGUAL','opcomparacion',1,'p_opcomparacion','sintactico.py',46),
  ('expcmp -> valor opcomparacion valor','expcmp',3,'p_expresioncmp','sintactico.py',50),
  ('expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN','expcmp',11,'p_expresioncmp','sintactico.py',51),
  ('expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp','expcmp',13,'p_expresioncmp','sintactico.py',52),
  ('expcmplog -> expcmp oplog expcmp','expcmplog',3,'p_expresioncmplog','sintactico.py',56),
  ('expcmplog -> expcmp oplog expcmplog','expcmplog',3,'p_expresioncmplog','sintactico.py',57),
  ('oplog -> BOOLEAN_OR','oplog',1,'p_oplog','sintactico.py',61),
  ('oplog -> BOOLEAN_AND','oplog',1,'p_oplog','sintactico.py',62),
  ('oplog -> AND','oplog',1,'p_oplog','sintactico.py',63),
  ('oplog -> OR','oplog',1,'p_oplog','sintactico.py',64),
  ('comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE','comparacion',7,'p_comparacionif','sintactico.py',69),
  ('comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE','comparacion',7,'p_comparacionif','sintactico.py',70),
  ('comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE','comparacion',11,'p_comparacionif_else','sintactico.py',74),
  ('comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE','comparacion',18,'p_comparacionif_elseif_else','sintactico.py',77),
  ('array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN','array',6,'p_array','sintactico.py',80),
  ('array -> ARRAY LPAREN valor RPAREN','array',4,'p_array','sintactico.py',81),
  ('sort -> SORT LPAREN ID RPAREN PCOMA','sort',5,'p_sort','sintactico.py',85),
  ('estdatos -> array','estdatos',1,'p_estdatos','sintactico.py',88),
  ('estdatos -> array_map','estdatos',1,'p_estdatos','sintactico.py',89),
  ('estdatos -> heap','estdatos',1,'p_estdatos','sintactico.py',90),
  ('expresionmat -> NUMBER operadormat NUMBER','expresionmat',3,'p_expresionmat','sintactico.py',93),
  ('operadormat -> PLUS','operadormat',1,'p_operadormat_plus','sintactico.py',109),
  ('operadormat -> MINUS','operadormat',1,'p_operadormat_plus','sintactico.py',110),
  ('operadormat -> TIMES','operadormat',1,'p_operadormat_plus','sintactico.py',111),
  ('operadormat -> DIVIDE','operadormat',1,'p_operadormat_plus','sintactico.py',112),
  ('expresion -> expresionmat','expresion',1,'p_expresion','sintactico.py',116),
  ('expresion -> expcmplog','expresion',1,'p_expresion','sintactico.py',117),
  ('funcion -> sort','funcion',1,'p_funcion','sintactico.py',119),
  ('funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE','funcion',9,'p_funciondef','sintactico.py',122),
  ('funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE','funcion',12,'p_funciondef','sintactico.py',123),
  ('args -> ID','args',1,'p_args','sintactico.py',127),
  ('args -> ID args','args',2,'p_args','sintactico.py',128),
  ('excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE','excepcion',17,'p_excepcion','sintactico.py',131),
  ('impresion -> ECHO valor PCOMA','impresion',3,'p_impresion','sintactico.py',136),
  ('impresion -> PRINT valor PCOMA','impresion',3,'p_impresion','sintactico.py',137),
  ('impresion -> PRINT expresionmat PCOMA','impresion',3,'p_impresion','sintactico.py',138),
  ('repeticionrep -> MAYOR','repeticionrep',1,'p_repeticioncompfor','sintactico.py',142),
  ('repeticionrep -> MENOR','repeticionrep',1,'p_repeticioncompfor','sintactico.py',143),
  ('repeticionrep -> MAYORIGUAL','repeticionrep',1,'p_repeticioncompfor','sintactico.py',144),
  ('repeticionrep -> MENORIGUAL','repeticionrep',1,'p_repeticioncompfor','sintactico.py',145),
  ('actualizar -> INCREMENTO','actualizar',1,'p_actualizar','sintactico.py',148),
  ('actualizar -> DECREMENTO','actualizar',1,'p_actualizar','sintactico.py',149),
  ('repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE','repeticion',16,'p_repeticionfor','sintactico.py',153),
  ('repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE','repeticion',12,'p_repeticionwhile','sintactico.py',158),
  ('repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA','repeticion',14,'p_repeticionwhile','sintactico.py',159),
  ('array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA','array_map',7,'p_array_map','sintactico.py',163),
  ('heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA','heap',9,'p_heap','sintactico.py',166),
  ('heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA','heap',10,'p_heap','sintactico.py',167),
  ('expression -> ID','expression',1,'p_expression_name','sintactico.py',174),
]
