
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND ARRAY ARRAY_MAP ASIGNACION BOOLEAN BOOLEAN_AND BOOLEAN_OR BREAK CADENA CASE CATCH CLASS COMA COMMENT CONCAT_EQUAL CONST CONTINUE DECLARE DECREMENTO DEFAULT DIVIDE DIV_EQUAL DO DOUBLE_ARROW ECHO ELSE ELSEIF EXCEPTION EXTENDS FIN FINAL FLECHA FOR FUNCTION GETMESSAGE GLOBAL HEAP ID IF IGUAL INCLUDE INCREMENTO INICIO INSERT INSTANCEOF IS_NOT_EQUAL LCORCH LLLAVE LPAREN MAYOR MAYORIGUAL MENOR MENORIGUAL MINUS MOD NFUNCION NUMBER OR PCOMA PLUS PRINT PRIVATE PROTECTED PUBLIC RCORCH REF RETURN RLLAVE RPAREN SORT TIMES TRY WHILEprograma : INICIO sentencias FINsentencias : asignacion\n                    | comparacion\n                    | funcion\n                    | impresion\n                    | repeticion\n                    | expresion\n                    | excepcion\n    asignacion : ID ASIGNACION valor PCOMA\n                | ID REF ID PCOMA\n                | ID ASIGNACION estdatos PCOMA\n                | ID ASIGNACION expresion PCOMAvalor : ID\n             | NUMBER\n             | CADENA\n             | BOOLEAN\n    opcomparacion : IGUAL\n                    | MAYOR\n                    | MENOR\n                    | MAYORIGUAL\n                    | MENORIGUAL\n    expcmp : valor opcomparacion valor\n            | LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN\n            | LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp expcmplog : expcmp oplog expcmp\n                | expcmp oplog expcmplogoplog : BOOLEAN_OR\n            | BOOLEAN_AND\n            | AND\n            | ORcomparacion : IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE\n                    | IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVEcomparacion : IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVEcomparacion : IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE array : ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN\n            | ARRAY LPAREN valor RPARENsort : SORT LPAREN ID RPAREN PCOMAestdatos : array\n                | array_map\n                | heapexpresionmat : NUMBER operadormat NUMBERoperadormat : PLUS\n                    | DIVIDE\n                    | MINUS\n                    | TIMESexpresion : expresionmat\n                | expcmplogfuncion : sortfuncion : FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE\n            | FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVEargs : ID\n            | ID argsexcepcion : TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVEimpresion : ECHO ID PCOMA\n             | ECHO CADENA PCOMArepeticionrep : MAYOR\n                  | MENOR\n                  | MAYORIGUAL\n                  | MENORIGUAL\n  actualizar : INCREMENTO\n                | DECREMENTO\n  repeticion : FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE repeticion : WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVEarray_map : ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMAheap : HEAP DOUBLE_ARROW INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA\n                | LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA'
    
_lr_action_items = {'INICIO':([0,],[2,]),'$end':([1,28,],[0,-1,]),'ID':([2,4,5,6,7,8,9,10,14,16,17,19,20,24,27,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,49,55,56,57,66,70,73,74,75,77,78,80,84,85,86,87,91,95,97,101,104,105,107,112,113,123,130,131,132,133,135,136,150,155,156,157,158,159,169,176,178,184,185,186,188,192,194,196,201,202,205,206,],[11,-2,-3,-4,-5,-6,-7,-8,39,-47,-48,47,-15,-46,-16,39,69,39,-17,-18,-19,-20,-21,39,-13,-14,39,-27,-28,-29,-30,76,79,81,11,83,39,-22,39,-25,-26,-54,-55,-41,-9,-11,-12,39,-10,107,39,39,11,11,107,-37,39,134,-31,-32,39,11,11,151,161,11,39,39,-49,39,180,-33,-23,11,39,-50,-63,-24,197,11,11,-62,-53,-34,]),'IF':([2,56,104,105,133,135,155,184,196,201,],[13,13,13,13,13,13,13,13,13,13,]),'FUNCTION':([2,56,89,104,105,133,135,155,184,196,201,],[18,18,18,18,18,18,18,18,18,18,18,]),'ECHO':([2,56,104,105,133,135,155,173,184,196,201,],[19,19,19,19,19,19,19,182,19,19,19,]),'FOR':([2,56,104,105,133,135,155,184,196,201,],[21,21,21,21,21,21,21,21,21,21,]),'WHILE':([2,56,104,105,133,135,155,184,196,201,],[23,23,23,23,23,23,23,23,23,23,]),'TRY':([2,56,104,105,133,135,155,184,196,201,],[25,25,25,25,25,25,25,25,25,25,]),'SORT':([2,56,89,104,105,133,135,155,184,196,201,],[26,26,26,26,26,26,26,26,26,26,26,]),'NUMBER':([2,14,29,31,32,33,34,35,36,37,41,42,43,44,45,50,51,52,53,54,56,66,73,87,96,97,101,104,105,113,127,129,132,133,135,145,146,147,148,149,154,155,156,157,159,184,185,196,201,],[22,40,61,40,-17,-18,-19,-20,-21,40,40,-27,-28,-29,-30,80,-42,-43,-44,-45,22,40,40,40,109,40,40,22,22,40,138,140,40,22,22,160,-56,-57,-58,-59,164,22,40,40,40,22,40,22,22,]),'LPAREN':([2,13,21,23,26,29,37,41,42,43,44,45,56,65,67,76,88,103,104,105,111,120,133,135,142,155,156,184,185,196,201,],[14,37,49,55,57,66,14,14,-27,-28,-29,-30,14,87,89,95,101,117,14,14,125,132,14,14,156,14,14,14,14,14,14,]),'CADENA':([2,14,19,29,31,32,33,34,35,36,37,41,42,43,44,45,56,66,73,87,97,101,104,105,113,132,133,135,155,156,157,159,182,184,185,196,201,],[20,20,48,20,20,-17,-18,-19,-20,-21,20,20,-27,-28,-29,-30,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,189,20,20,20,20,]),'BOOLEAN':([2,14,29,31,32,33,34,35,36,37,41,42,43,44,45,56,66,73,87,97,101,104,105,113,132,133,135,155,156,157,159,184,185,196,201,],[27,27,27,27,-17,-18,-19,-20,-21,27,27,-27,-28,-29,-30,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'FIN':([3,4,5,6,7,8,9,10,16,17,20,24,27,39,40,70,74,75,77,78,80,84,85,86,91,112,130,131,158,176,178,186,188,192,202,205,206,],[28,-2,-3,-4,-5,-6,-7,-8,-47,-48,-15,-46,-16,-13,-14,-22,-25,-26,-54,-55,-41,-9,-11,-12,-10,-37,-31,-32,-49,-33,-23,-50,-63,-24,-62,-53,-34,]),'RLLAVE':([4,5,6,7,8,9,10,16,17,20,24,27,39,40,70,74,75,77,78,80,82,84,85,86,91,112,118,119,130,131,144,158,165,176,178,179,181,186,188,191,192,199,202,203,204,205,206,],[-2,-3,-4,-5,-6,-7,-8,-47,-48,-15,-46,-16,-13,-14,-22,-25,-26,-54,-55,-41,98,-9,-11,-12,-10,-37,130,131,-31,-32,158,-49,176,-33,-23,186,188,-50,-63,195,-24,202,-62,205,206,-53,-34,]),'RETURN':([4,5,6,7,8,9,10,16,17,20,24,27,39,40,70,74,75,77,78,80,84,85,86,91,112,130,131,144,158,176,178,186,188,192,202,205,206,],[-2,-3,-4,-5,-6,-7,-8,-47,-48,-15,-46,-16,-13,-14,-22,-25,-26,-54,-55,-41,-9,-11,-12,-10,-37,-31,-32,159,-49,-33,-23,-50,-63,-24,-62,-53,-34,]),'ASIGNACION':([11,79,],[29,96,]),'REF':([11,],[30,]),'IGUAL':([11,12,20,22,27,38,39,40,58,61,81,143,],[-13,32,-15,-14,-16,32,-13,-14,32,-14,32,32,]),'MAYOR':([11,12,20,22,27,38,39,40,58,61,81,134,143,],[-13,33,-15,-14,-16,33,-13,-14,33,-14,33,146,33,]),'MENOR':([11,12,20,22,27,38,39,40,58,61,81,134,143,],[-13,34,-15,-14,-16,34,-13,-14,34,-14,34,147,34,]),'MAYORIGUAL':([11,12,20,22,27,38,39,40,58,61,81,134,143,],[-13,35,-15,-14,-16,35,-13,-14,35,-14,35,148,35,]),'MENORIGUAL':([11,12,20,22,27,38,39,40,58,61,81,134,143,],[-13,36,-15,-14,-16,36,-13,-14,36,-14,36,149,36,]),'BOOLEAN_OR':([15,20,27,39,40,70,71,74,106,178,192,],[42,-15,-16,-13,-14,-22,42,42,42,42,-24,]),'BOOLEAN_AND':([15,20,27,39,40,70,71,74,106,178,192,],[43,-15,-16,-13,-14,-22,43,43,43,43,-24,]),'AND':([15,20,27,39,40,70,71,74,106,178,192,],[44,-15,-16,-13,-14,-22,44,44,44,44,-24,]),'OR':([15,20,27,39,40,70,71,74,106,178,192,],[45,-15,-16,-13,-14,-22,45,45,45,45,-24,]),'PCOMA':([16,20,24,27,39,40,47,48,58,59,60,61,62,63,64,69,70,74,75,80,99,109,114,137,139,153,160,163,168,170,171,172,174,178,183,190,192,],[-47,-15,-46,-16,-13,-14,77,78,84,85,86,-14,-38,-39,-40,91,-22,-25,-26,-41,112,123,-36,-35,153,-64,169,174,179,181,-60,-61,-66,-23,190,-65,-24,]),'COMA':([17,102,112,140,158,186,189,],[-48,116,-37,154,-49,-50,194,]),'NFUNCION':([18,],[46,]),'RPAREN':([20,27,39,40,70,71,72,74,75,83,94,100,107,108,110,114,121,126,128,137,138,151,152,166,167,171,172,175,178,187,192,],[-15,-16,-13,-14,-22,92,93,-25,-26,99,106,114,-51,122,124,-36,-52,137,139,-35,152,162,163,177,178,-60,-61,183,-23,193,-24,]),'DOUBLE_ARROW':([20,27,39,40,68,100,115,],[-15,-16,-13,-14,90,113,127,]),'PLUS':([22,61,],[51,51,]),'DIVIDE':([22,61,],[52,52,]),'MINUS':([22,61,],[53,53,]),'TIMES':([22,61,],[54,54,]),'LLLAVE':([25,92,93,122,124,141,162,177,193,198,],[56,104,105,133,135,155,173,184,196,201,]),'ARRAY':([29,66,116,],[65,88,65,]),'ARRAY_MAP':([29,],[67,]),'HEAP':([29,],[68,]),'INSERT':([90,],[103,]),'CATCH':([98,],[111,]),'LCORCH':([117,],[129,]),'EXCEPTION':([125,],[136,]),'ELSE':([130,195,],[141,198,]),'ELSEIF':([130,],[142,]),'INCREMENTO':([161,180,],[171,171,]),'DECREMENTO':([161,180,],[172,172,]),'RCORCH':([164,],[175,]),'FLECHA':([197,],[200,]),'GETMESSAGE':([200,],[203,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'sentencias':([2,56,104,105,133,135,155,184,196,201,],[3,82,118,119,144,150,165,191,199,204,]),'asignacion':([2,56,104,105,133,135,155,184,196,201,],[4,4,4,4,4,4,4,4,4,4,]),'comparacion':([2,56,104,105,133,135,155,184,196,201,],[5,5,5,5,5,5,5,5,5,5,]),'funcion':([2,56,89,104,105,133,135,155,184,196,201,],[6,6,102,6,6,6,6,6,6,6,6,]),'impresion':([2,56,104,105,133,135,155,184,196,201,],[7,7,7,7,7,7,7,7,7,7,]),'repeticion':([2,56,104,105,133,135,155,184,196,201,],[8,8,8,8,8,8,8,8,8,8,]),'expresion':([2,29,56,104,105,133,135,155,184,196,201,],[9,60,9,9,9,9,9,9,9,9,9,]),'excepcion':([2,56,104,105,133,135,155,184,196,201,],[10,10,10,10,10,10,10,10,10,10,]),'valor':([2,14,29,31,37,41,56,66,73,87,97,101,104,105,113,132,133,135,155,156,157,159,184,185,196,201,],[12,38,58,70,12,12,12,38,94,100,110,115,12,12,126,143,12,12,12,12,167,168,12,12,12,12,]),'expcmp':([2,29,37,41,56,104,105,133,135,155,156,184,185,196,201,],[15,15,71,74,15,15,15,15,15,15,166,15,192,15,15,]),'expcmplog':([2,29,37,41,56,104,105,133,135,155,184,196,201,],[16,16,72,75,16,16,16,16,16,16,16,16,16,]),'sort':([2,56,89,104,105,133,135,155,184,196,201,],[17,17,17,17,17,17,17,17,17,17,17,]),'expresionmat':([2,29,56,104,105,133,135,155,184,196,201,],[24,24,24,24,24,24,24,24,24,24,24,]),'opcomparacion':([12,38,58,81,143,],[31,73,31,97,157,]),'oplog':([15,71,74,106,178,],[41,41,41,120,185,]),'operadormat':([22,61,],[50,50,]),'estdatos':([29,],[59,]),'array':([29,116,],[62,128,]),'array_map':([29,],[63,]),'heap':([29,],[64,]),'args':([95,107,],[108,121,]),'repeticionrep':([134,],[145,]),'actualizar':([161,180,],[170,187,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> INICIO sentencias FIN','programa',3,'p_programa','sintactico.py',6),
  ('sentencias -> asignacion','sentencias',1,'p_sentencias','sintactico.py',11),
  ('sentencias -> comparacion','sentencias',1,'p_sentencias','sintactico.py',12),
  ('sentencias -> funcion','sentencias',1,'p_sentencias','sintactico.py',13),
  ('sentencias -> impresion','sentencias',1,'p_sentencias','sintactico.py',14),
  ('sentencias -> repeticion','sentencias',1,'p_sentencias','sintactico.py',15),
  ('sentencias -> expresion','sentencias',1,'p_sentencias','sintactico.py',16),
  ('sentencias -> excepcion','sentencias',1,'p_sentencias','sintactico.py',17),
  ('asignacion -> ID ASIGNACION valor PCOMA','asignacion',4,'p_asignacion','sintactico.py',22),
  ('asignacion -> ID REF ID PCOMA','asignacion',4,'p_asignacion','sintactico.py',23),
  ('asignacion -> ID ASIGNACION estdatos PCOMA','asignacion',4,'p_asignacion','sintactico.py',24),
  ('asignacion -> ID ASIGNACION expresion PCOMA','asignacion',4,'p_asignacion','sintactico.py',25),
  ('valor -> ID','valor',1,'p_valor','sintactico.py',29),
  ('valor -> NUMBER','valor',1,'p_valor','sintactico.py',30),
  ('valor -> CADENA','valor',1,'p_valor','sintactico.py',31),
  ('valor -> BOOLEAN','valor',1,'p_valor','sintactico.py',32),
  ('opcomparacion -> IGUAL','opcomparacion',1,'p_opcomparacion','sintactico.py',37),
  ('opcomparacion -> MAYOR','opcomparacion',1,'p_opcomparacion','sintactico.py',38),
  ('opcomparacion -> MENOR','opcomparacion',1,'p_opcomparacion','sintactico.py',39),
  ('opcomparacion -> MAYORIGUAL','opcomparacion',1,'p_opcomparacion','sintactico.py',40),
  ('opcomparacion -> MENORIGUAL','opcomparacion',1,'p_opcomparacion','sintactico.py',41),
  ('expcmp -> valor opcomparacion valor','expcmp',3,'p_expresioncmp','sintactico.py',46),
  ('expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN','expcmp',11,'p_expresioncmp','sintactico.py',47),
  ('expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp','expcmp',13,'p_expresioncmp','sintactico.py',48),
  ('expcmplog -> expcmp oplog expcmp','expcmplog',3,'p_expresioncmplog','sintactico.py',52),
  ('expcmplog -> expcmp oplog expcmplog','expcmplog',3,'p_expresioncmplog','sintactico.py',53),
  ('oplog -> BOOLEAN_OR','oplog',1,'p_oplog','sintactico.py',57),
  ('oplog -> BOOLEAN_AND','oplog',1,'p_oplog','sintactico.py',58),
  ('oplog -> AND','oplog',1,'p_oplog','sintactico.py',59),
  ('oplog -> OR','oplog',1,'p_oplog','sintactico.py',60),
  ('comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE','comparacion',7,'p_comparacionif','sintactico.py',64),
  ('comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE','comparacion',7,'p_comparacionif','sintactico.py',65),
  ('comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE','comparacion',11,'p_comparacionif_else','sintactico.py',69),
  ('comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE','comparacion',18,'p_comparacionif_elseif_else','sintactico.py',72),
  ('array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN','array',6,'p_array','sintactico.py',75),
  ('array -> ARRAY LPAREN valor RPAREN','array',4,'p_array','sintactico.py',76),
  ('sort -> SORT LPAREN ID RPAREN PCOMA','sort',5,'p_sort','sintactico.py',80),
  ('estdatos -> array','estdatos',1,'p_estdatos','sintactico.py',83),
  ('estdatos -> array_map','estdatos',1,'p_estdatos','sintactico.py',84),
  ('estdatos -> heap','estdatos',1,'p_estdatos','sintactico.py',85),
  ('expresionmat -> NUMBER operadormat NUMBER','expresionmat',3,'p_expresionmat','sintactico.py',88),
  ('operadormat -> PLUS','operadormat',1,'p_operadormat','sintactico.py',91),
  ('operadormat -> DIVIDE','operadormat',1,'p_operadormat','sintactico.py',92),
  ('operadormat -> MINUS','operadormat',1,'p_operadormat','sintactico.py',93),
  ('operadormat -> TIMES','operadormat',1,'p_operadormat','sintactico.py',94),
  ('expresion -> expresionmat','expresion',1,'p_expresion','sintactico.py',98),
  ('expresion -> expcmplog','expresion',1,'p_expresion','sintactico.py',99),
  ('funcion -> sort','funcion',1,'p_funcion','sintactico.py',101),
  ('funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE','funcion',9,'p_funciondef','sintactico.py',104),
  ('funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE','funcion',12,'p_funciondef','sintactico.py',105),
  ('args -> ID','args',1,'p_args','sintactico.py',109),
  ('args -> ID args','args',2,'p_args','sintactico.py',110),
  ('excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE','excepcion',17,'p_excepcion','sintactico.py',113),
  ('impresion -> ECHO ID PCOMA','impresion',3,'p_impresion','sintactico.py',118),
  ('impresion -> ECHO CADENA PCOMA','impresion',3,'p_impresion','sintactico.py',119),
  ('repeticionrep -> MAYOR','repeticionrep',1,'p_repeticioncompfor','sintactico.py',122),
  ('repeticionrep -> MENOR','repeticionrep',1,'p_repeticioncompfor','sintactico.py',123),
  ('repeticionrep -> MAYORIGUAL','repeticionrep',1,'p_repeticioncompfor','sintactico.py',124),
  ('repeticionrep -> MENORIGUAL','repeticionrep',1,'p_repeticioncompfor','sintactico.py',125),
  ('actualizar -> INCREMENTO','actualizar',1,'p_actualizar','sintactico.py',129),
  ('actualizar -> DECREMENTO','actualizar',1,'p_actualizar','sintactico.py',130),
  ('repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE','repeticion',16,'p_repeticionfor','sintactico.py',134),
  ('repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE','repeticion',12,'p_repeticionwhile','sintactico.py',138),
  ('array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA','array_map',7,'p_array_map','sintactico.py',141),
  ('heap -> HEAP DOUBLE_ARROW INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA','heap',11,'p_heap','sintactico.py',144),
  ('heap -> LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA','heap',9,'p_heap','sintactico.py',145),
]
