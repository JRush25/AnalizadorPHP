
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ARRAY_MAP ASIGNACION BOOLEAN CADENA CATCH COMA DECREMENTO DIVIDE DO DOUBLE_ARROW ECHO ELSE ELSEIF EXCEPTION FIN FOR FUNCTION ID IF IGUAL INCREMENTO INICIO INSERT IS_NOT_EQUAL LCORCH LLLAVE LPAREN MAYOR MAYORIGUAL MENOR MENORIGUAL MINUS MOD NFUNCION NUMBER OR PCOMA PLUS PRINT RCORCH REF RETURN RLLAVE RPAREN SORT TIMES TRY WHILEprograma : INICIO sentencias FINsentencias : asignacion\n                    | comparacion\n                    | funcion\n                    | impresion\n                    | repeticion\n                    | expresion\n                    | excepcion\n                    | estdatos\n    asignacion : ID ASIGNACION valor PCOMA\n                | ID REF ID PCOMA\n                | ID ASIGNACION estdatos PCOMA\n                | ID ASIGNACION expresion PCOMAvalor : ID\n            | NUMBER\n            | BOOLEAN\n            | CADENAopcomparacion : IGUAL\n                    | MAYOR\n                    | MENOR\n                    | MAYORIGUAL\n                    | MENORIGUAL\n                    | IS_NOT_EQUALexpcmp : valor opcomparacion valor\n            | LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN\n             expcmplog : expcmp oplog expcmp\n                | expcmp oplog expcmplogoplog : AND\n            | ORcomparacion : IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE\n                    | IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVEcomparacion : IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVEcomparacion : IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE array : ARRAY LPAREN contenido RPAREN\n            contenido : valor DOUBLE_ARROW valor\n                | valor DOUBLE_ARROW valor COMA contenido\n                | valor\n                | valor COMA contenidosort : SORT LPAREN ID RPAREN PCOMAestdatos : array\n                | array_map\n                | heapexpresionmat : NUMBER operadormat NUMBERoperadormat : PLUS\n                    | MINUS\n                    | TIMES\n                    | DIVIDE\n                    | MODexpresion : expresionmat\n                | expcmplogfuncion : sortfuncion : FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE\n            | FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVEargs : ID\n            | ID argsexcepcion : TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVEimpresion : ECHO valor PCOMA\n             | PRINT valor PCOMA\n             | PRINT expresionmat PCOMArepeticionrep : MAYOR\n                  | MENOR\n                  | MAYORIGUAL\n                  | MENORIGUAL actualizar : INCREMENTO\n                | DECREMENTO\n  repeticion : FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVErepeticion : WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE\n                  | DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA\n  array_map : ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMAheap : INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA\n                | INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA'
    
_lr_action_items = {'INICIO':([0,],[2,]),'$end':([1,37,],[0,-1,]),'ID':([2,4,5,6,7,8,9,10,11,15,17,18,20,21,22,28,29,30,31,36,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,59,66,67,68,69,70,77,80,81,82,84,85,86,88,90,98,99,100,101,105,107,111,112,113,116,117,118,120,128,139,143,147,148,149,150,152,154,156,168,173,174,175,176,177,180,182,188,192,193,195,199,201,202,204,210,212,213,217,218,219,221,],[12,-2,-3,-4,-5,-6,-7,-8,-9,49,-50,-51,49,49,-49,-17,-40,-41,-42,-16,49,76,49,-18,-19,-20,-21,-22,-23,49,-14,-15,49,-28,-29,83,87,89,12,12,92,49,-24,49,-26,-27,-57,-58,-59,-43,108,-10,-12,-13,-11,120,49,-34,49,49,49,12,12,120,-39,151,49,-30,-31,49,12,12,170,-69,179,12,49,49,-52,49,190,-70,197,-71,-32,-25,49,12,-53,-67,214,12,-68,-56,12,-66,-33,]),'IF':([2,67,68,117,118,150,152,173,201,212,218,],[14,14,14,14,14,14,14,14,14,14,14,]),'FUNCTION':([2,67,68,71,117,118,150,152,173,201,212,218,],[19,19,19,19,19,19,19,19,19,19,19,19,]),'ECHO':([2,67,68,117,118,150,152,173,191,201,212,218,],[20,20,20,20,20,20,20,20,200,20,20,20,]),'PRINT':([2,67,68,117,118,150,152,173,201,212,218,],[21,21,21,21,21,21,21,21,21,21,21,]),'FOR':([2,67,68,117,118,150,152,173,201,212,218,],[23,23,23,23,23,23,23,23,23,23,23,]),'WHILE':([2,67,68,117,118,150,152,153,173,201,212,218,],[25,25,25,25,25,25,25,169,25,25,25,25,]),'DO':([2,67,68,117,118,150,152,173,201,212,218,],[26,26,26,26,26,26,26,26,26,26,26,]),'TRY':([2,67,68,117,118,150,152,173,201,212,218,],[27,27,27,27,27,27,27,27,27,27,27,]),'SORT':([2,67,68,71,117,118,150,152,173,201,212,218,],[32,32,32,32,32,32,32,32,32,32,32,32,]),'NUMBER':([2,15,20,21,38,40,41,42,43,44,45,46,47,51,52,53,60,61,62,63,64,65,67,68,70,80,96,106,107,112,113,116,117,118,132,143,146,149,150,152,163,164,165,166,167,173,174,175,177,199,201,212,218,],[24,50,50,58,58,50,-18,-19,-20,-21,-22,-23,50,50,-28,-29,88,-44,-45,-46,-47,-48,24,24,50,50,115,122,50,50,50,50,24,24,145,50,158,50,24,24,178,-60,-61,-62,-63,24,50,50,50,50,24,24,24,]),'ARRAY':([2,38,67,68,72,114,117,118,150,152,173,201,212,218,],[33,33,33,33,97,33,33,33,33,33,33,33,33,33,]),'ARRAY_MAP':([2,38,67,68,117,118,150,152,173,201,212,218,],[34,34,34,34,34,34,34,34,34,34,34,34,]),'INSERT':([2,38,67,68,117,118,150,152,173,201,212,218,],[35,35,35,35,35,35,35,35,35,35,35,35,]),'LPAREN':([2,14,23,25,32,33,34,35,38,47,51,52,53,67,68,83,97,117,118,127,136,150,152,160,169,173,174,201,212,218,],[15,47,59,66,69,70,71,72,15,15,15,-28,-29,15,15,105,116,15,15,142,149,15,15,174,180,15,15,15,15,15,]),'BOOLEAN':([2,15,20,21,38,40,41,42,43,44,45,46,47,51,52,53,67,68,70,80,107,112,113,116,117,118,143,149,150,152,173,174,175,177,199,201,212,218,],[36,36,36,36,36,36,-18,-19,-20,-21,-22,-23,36,36,-28,-29,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'CADENA':([2,15,20,21,38,40,41,42,43,44,45,46,47,51,52,53,67,68,70,80,107,112,113,116,117,118,143,149,150,152,173,174,175,177,199,200,201,212,218,],[28,28,28,28,28,28,-18,-19,-20,-21,-22,-23,28,28,-28,-29,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,206,28,28,28,]),'FIN':([3,4,5,6,7,8,9,10,11,17,18,22,28,29,30,31,36,49,50,77,81,82,84,85,86,88,98,99,100,101,111,128,147,148,156,176,182,192,193,195,202,204,213,217,219,221,],[37,-2,-3,-4,-5,-6,-7,-8,-9,-50,-51,-49,-17,-40,-41,-42,-16,-14,-15,-24,-26,-27,-57,-58,-59,-43,-10,-12,-13,-11,-34,-39,-30,-31,-69,-52,-70,-71,-32,-25,-53,-67,-68,-56,-66,-33,]),'RLLAVE':([4,5,6,7,8,9,10,11,17,18,22,28,29,30,31,36,49,50,77,81,82,84,85,86,88,91,98,99,100,101,111,128,134,135,141,147,148,156,162,176,182,184,192,193,195,196,198,202,204,207,213,214,216,217,219,220,221,],[-2,-3,-4,-5,-6,-7,-8,-9,-50,-51,-49,-17,-40,-41,-42,-16,-14,-15,-24,-26,-27,-57,-58,-59,-43,109,-10,-12,-13,-11,-34,-39,147,148,153,-30,-31,-69,176,-52,-70,193,-71,-32,-25,202,204,-53,-67,211,-68,217,219,-56,-66,221,-33,]),'RETURN':([4,5,6,7,8,9,10,11,17,18,22,28,29,30,31,36,49,50,77,81,82,84,85,86,88,98,99,100,101,111,128,147,148,156,162,176,182,192,193,195,202,204,213,217,219,221,],[-2,-3,-4,-5,-6,-7,-8,-9,-50,-51,-49,-17,-40,-41,-42,-16,-14,-15,-24,-26,-27,-57,-58,-59,-43,-10,-12,-13,-11,-34,-39,-30,-31,-69,177,-52,-70,-71,-32,-25,-53,-67,-68,-56,-66,-33,]),'ASIGNACION':([12,87,],[38,106,]),'REF':([12,],[39,]),'IGUAL':([12,13,24,28,36,48,49,50,58,73,89,161,190,],[-14,41,-15,-17,-16,41,-14,-15,-15,41,41,41,41,]),'MAYOR':([12,13,24,28,36,48,49,50,58,73,89,151,161,190,],[-14,42,-15,-17,-16,42,-14,-15,-15,42,42,164,42,42,]),'MENOR':([12,13,24,28,36,48,49,50,58,73,89,151,161,190,],[-14,43,-15,-17,-16,43,-14,-15,-15,43,43,165,43,43,]),'MAYORIGUAL':([12,13,24,28,36,48,49,50,58,73,89,151,161,190,],[-14,44,-15,-17,-16,44,-14,-15,-15,44,44,166,44,44,]),'MENORIGUAL':([12,13,24,28,36,48,49,50,58,73,89,151,161,190,],[-14,45,-15,-17,-16,45,-14,-15,-15,45,45,167,45,45,]),'IS_NOT_EQUAL':([12,13,24,28,36,48,49,50,58,73,89,161,190,],[-14,46,-15,-17,-16,46,-14,-15,-15,46,46,46,46,]),'AND':([16,28,36,49,50,77,78,81,119,195,],[52,-17,-16,-14,-15,-24,52,52,52,-25,]),'OR':([16,28,36,49,50,77,78,81,119,195,],[53,-17,-16,-14,-15,-24,53,53,53,-25,]),'PCOMA':([17,22,28,29,30,31,36,49,50,55,56,57,58,73,74,75,76,77,81,82,88,110,111,122,124,125,126,144,156,171,178,182,183,187,189,192,195,209,],[-50,-49,-17,-40,-41,-42,-16,-14,-15,84,85,86,-15,98,99,100,101,-24,-26,-27,-43,128,-34,139,141,-64,-65,156,-69,182,188,-70,192,196,198,-71,-25,213,]),'COMA':([18,28,36,49,50,94,95,115,128,129,176,202,206,],[-51,-17,-16,-14,-15,113,114,132,-39,143,-52,-53,210,]),'NFUNCION':([19,],[54,]),'PLUS':([24,58,],[61,61,]),'MINUS':([24,58,],[62,62,]),'TIMES':([24,58,],[63,63,]),'DIVIDE':([24,58,],[64,64,]),'MOD':([24,58,],[65,65,]),'LLLAVE':([26,27,102,103,138,140,159,181,194,208,215,],[67,68,117,118,150,152,173,191,201,212,218,]),'RPAREN':([28,36,49,50,77,78,79,81,82,92,93,94,104,111,120,121,123,125,126,129,130,131,137,155,157,158,170,172,185,186,195,203,205,],[-17,-16,-14,-15,-24,102,103,-26,-27,110,111,-37,119,-34,-54,138,140,-64,-65,-35,-38,144,-55,-36,171,172,181,183,194,195,-25,208,209,]),'DOUBLE_ARROW':([28,36,49,50,94,133,],[-17,-16,-14,-15,112,146,]),'LCORCH':([72,],[96,]),'INCREMENTO':([108,179,197,],[125,125,125,]),'DECREMENTO':([108,179,197,],[126,126,126,]),'CATCH':([109,],[127,]),'EXCEPTION':([142,],[154,]),'RCORCH':([145,],[157,]),'ELSE':([147,211,],[159,215,]),'ELSEIF':([147,],[160,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'sentencias':([2,67,68,117,118,150,152,173,201,212,218,],[3,90,91,134,135,162,168,184,207,216,220,]),'asignacion':([2,67,68,117,118,150,152,173,201,212,218,],[4,4,4,4,4,4,4,4,4,4,4,]),'comparacion':([2,67,68,117,118,150,152,173,201,212,218,],[5,5,5,5,5,5,5,5,5,5,5,]),'funcion':([2,67,68,71,117,118,150,152,173,201,212,218,],[6,6,6,95,6,6,6,6,6,6,6,6,]),'impresion':([2,67,68,117,118,150,152,173,201,212,218,],[7,7,7,7,7,7,7,7,7,7,7,]),'repeticion':([2,67,68,117,118,150,152,173,201,212,218,],[8,8,8,8,8,8,8,8,8,8,8,]),'expresion':([2,38,67,68,117,118,150,152,173,201,212,218,],[9,75,9,9,9,9,9,9,9,9,9,9,]),'excepcion':([2,67,68,117,118,150,152,173,201,212,218,],[10,10,10,10,10,10,10,10,10,10,10,]),'estdatos':([2,38,67,68,117,118,150,152,173,201,212,218,],[11,74,11,11,11,11,11,11,11,11,11,11,]),'valor':([2,15,20,21,38,40,47,51,67,68,70,80,107,112,113,116,117,118,143,149,150,152,173,174,175,177,199,201,212,218,],[13,48,55,56,73,77,13,13,13,13,94,104,123,129,94,133,13,13,94,161,13,13,13,13,186,187,205,13,13,13,]),'expcmp':([2,38,47,51,67,68,117,118,150,152,173,174,201,212,218,],[16,16,78,81,16,16,16,16,16,16,16,185,16,16,16,]),'expcmplog':([2,38,47,51,67,68,117,118,150,152,173,201,212,218,],[17,17,79,82,17,17,17,17,17,17,17,17,17,17,]),'sort':([2,67,68,71,117,118,150,152,173,201,212,218,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'expresionmat':([2,21,38,67,68,117,118,150,152,173,201,212,218,],[22,57,22,22,22,22,22,22,22,22,22,22,22,]),'array':([2,38,67,68,114,117,118,150,152,173,201,212,218,],[29,29,29,29,131,29,29,29,29,29,29,29,29,]),'array_map':([2,38,67,68,117,118,150,152,173,201,212,218,],[30,30,30,30,30,30,30,30,30,30,30,30,]),'heap':([2,38,67,68,117,118,150,152,173,201,212,218,],[31,31,31,31,31,31,31,31,31,31,31,31,]),'opcomparacion':([13,48,73,89,161,190,],[40,80,40,107,175,199,]),'oplog':([16,78,81,119,],[51,51,51,136,]),'operadormat':([24,58,],[60,60,]),'contenido':([70,113,143,],[93,130,155,]),'args':([105,120,],[121,137,]),'actualizar':([108,179,197,],[124,189,203,]),'repeticionrep':([151,],[163,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> INICIO sentencias FIN','programa',3,'p_programa','sintactico.py',9),
  ('sentencias -> asignacion','sentencias',1,'p_sentencias','sintactico.py',14),
  ('sentencias -> comparacion','sentencias',1,'p_sentencias','sintactico.py',15),
  ('sentencias -> funcion','sentencias',1,'p_sentencias','sintactico.py',16),
  ('sentencias -> impresion','sentencias',1,'p_sentencias','sintactico.py',17),
  ('sentencias -> repeticion','sentencias',1,'p_sentencias','sintactico.py',18),
  ('sentencias -> expresion','sentencias',1,'p_sentencias','sintactico.py',19),
  ('sentencias -> excepcion','sentencias',1,'p_sentencias','sintactico.py',20),
  ('sentencias -> estdatos','sentencias',1,'p_sentencias','sintactico.py',21),
  ('asignacion -> ID ASIGNACION valor PCOMA','asignacion',4,'p_asignacion','sintactico.py',26),
  ('asignacion -> ID REF ID PCOMA','asignacion',4,'p_asignacion','sintactico.py',27),
  ('asignacion -> ID ASIGNACION estdatos PCOMA','asignacion',4,'p_asignacion','sintactico.py',28),
  ('asignacion -> ID ASIGNACION expresion PCOMA','asignacion',4,'p_asignacion','sintactico.py',29),
  ('valor -> ID','valor',1,'p_valor','sintactico.py',35),
  ('valor -> NUMBER','valor',1,'p_valor','sintactico.py',36),
  ('valor -> BOOLEAN','valor',1,'p_valor','sintactico.py',37),
  ('valor -> CADENA','valor',1,'p_valor','sintactico.py',38),
  ('opcomparacion -> IGUAL','opcomparacion',1,'p_opcomparacion','sintactico.py',42),
  ('opcomparacion -> MAYOR','opcomparacion',1,'p_opcomparacion','sintactico.py',43),
  ('opcomparacion -> MENOR','opcomparacion',1,'p_opcomparacion','sintactico.py',44),
  ('opcomparacion -> MAYORIGUAL','opcomparacion',1,'p_opcomparacion','sintactico.py',45),
  ('opcomparacion -> MENORIGUAL','opcomparacion',1,'p_opcomparacion','sintactico.py',46),
  ('opcomparacion -> IS_NOT_EQUAL','opcomparacion',1,'p_opcomparacion','sintactico.py',47),
  ('expcmp -> valor opcomparacion valor','expcmp',3,'p_expresioncmp','sintactico.py',51),
  ('expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN','expcmp',11,'p_expresioncmp','sintactico.py',52),
  ('expcmplog -> expcmp oplog expcmp','expcmplog',3,'p_expresioncmplog','sintactico.py',57),
  ('expcmplog -> expcmp oplog expcmplog','expcmplog',3,'p_expresioncmplog','sintactico.py',58),
  ('oplog -> AND','oplog',1,'p_oplog','sintactico.py',62),
  ('oplog -> OR','oplog',1,'p_oplog','sintactico.py',63),
  ('comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE','comparacion',7,'p_comparacionif','sintactico.py',68),
  ('comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE','comparacion',7,'p_comparacionif','sintactico.py',69),
  ('comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE','comparacion',11,'p_comparacionif_else','sintactico.py',73),
  ('comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE','comparacion',18,'p_comparacionif_elseif_else','sintactico.py',76),
  ('array -> ARRAY LPAREN contenido RPAREN','array',4,'p_array','sintactico.py',79),
  ('contenido -> valor DOUBLE_ARROW valor','contenido',3,'p_contenido','sintactico.py',83),
  ('contenido -> valor DOUBLE_ARROW valor COMA contenido','contenido',5,'p_contenido','sintactico.py',84),
  ('contenido -> valor','contenido',1,'p_contenido','sintactico.py',85),
  ('contenido -> valor COMA contenido','contenido',3,'p_contenido','sintactico.py',86),
  ('sort -> SORT LPAREN ID RPAREN PCOMA','sort',5,'p_sort','sintactico.py',90),
  ('estdatos -> array','estdatos',1,'p_estdatos','sintactico.py',93),
  ('estdatos -> array_map','estdatos',1,'p_estdatos','sintactico.py',94),
  ('estdatos -> heap','estdatos',1,'p_estdatos','sintactico.py',95),
  ('expresionmat -> NUMBER operadormat NUMBER','expresionmat',3,'p_expresionmat','sintactico.py',98),
  ('operadormat -> PLUS','operadormat',1,'p_operadormat_plus','sintactico.py',114),
  ('operadormat -> MINUS','operadormat',1,'p_operadormat_plus','sintactico.py',115),
  ('operadormat -> TIMES','operadormat',1,'p_operadormat_plus','sintactico.py',116),
  ('operadormat -> DIVIDE','operadormat',1,'p_operadormat_plus','sintactico.py',117),
  ('operadormat -> MOD','operadormat',1,'p_operadormat_plus','sintactico.py',118),
  ('expresion -> expresionmat','expresion',1,'p_expresion','sintactico.py',122),
  ('expresion -> expcmplog','expresion',1,'p_expresion','sintactico.py',123),
  ('funcion -> sort','funcion',1,'p_funcion','sintactico.py',125),
  ('funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE','funcion',9,'p_funciondef','sintactico.py',128),
  ('funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE','funcion',12,'p_funciondef','sintactico.py',129),
  ('args -> ID','args',1,'p_args','sintactico.py',133),
  ('args -> ID args','args',2,'p_args','sintactico.py',134),
  ('excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE','excepcion',15,'p_excepcion','sintactico.py',137),
  ('impresion -> ECHO valor PCOMA','impresion',3,'p_impresion','sintactico.py',142),
  ('impresion -> PRINT valor PCOMA','impresion',3,'p_impresion','sintactico.py',143),
  ('impresion -> PRINT expresionmat PCOMA','impresion',3,'p_impresion','sintactico.py',144),
  ('repeticionrep -> MAYOR','repeticionrep',1,'p_repeticioncompfor','sintactico.py',148),
  ('repeticionrep -> MENOR','repeticionrep',1,'p_repeticioncompfor','sintactico.py',149),
  ('repeticionrep -> MAYORIGUAL','repeticionrep',1,'p_repeticioncompfor','sintactico.py',150),
  ('repeticionrep -> MENORIGUAL','repeticionrep',1,'p_repeticioncompfor','sintactico.py',151),
  ('actualizar -> INCREMENTO','actualizar',1,'p_actualizar','sintactico.py',154),
  ('actualizar -> DECREMENTO','actualizar',1,'p_actualizar','sintactico.py',155),
  ('repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE','repeticion',16,'p_repeticionfor','sintactico.py',159),
  ('repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE','repeticion',12,'p_repeticionwhile','sintactico.py',164),
  ('repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA','repeticion',14,'p_repeticionwhile','sintactico.py',165),
  ('array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA','array_map',7,'p_array_map','sintactico.py',169),
  ('heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA','heap',9,'p_heap','sintactico.py',172),
  ('heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA','heap',10,'p_heap','sintactico.py',173),
]
