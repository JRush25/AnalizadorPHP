Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    BOOLEAN_AND
    BOOLEAN_OR
    BREAK
    CASE
    CATCH
    CLASS
    COMMENT
    CONCAT_EQUAL
    CONST
    CONTINUE
    DECLARE
    DECREMENTO
    DEFAULT
    DIVIDE
    DIV_EQUAL
    DO
    ECHO
    EXTENDS
    FINAL
    FOR
    FUNCTION
    GLOBAL
    INCLUDE
    INCREMENTO
    INSTANCEOF
    IS_NOT_EQUAL
    MINUS
    MOD
    OR
    PLUS
    PRINT
    PRIVATE
    PROTECTED
    PUBLIC
    TIMES
    TRY
    WHILE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> INICIO sentencias FIN
Rule 2     sentencias -> asignacion
Rule 3     sentencias -> comparacion
Rule 4     sentencias -> funcion
Rule 5     asignacion -> ID ASIGNACION valor PCOMA
Rule 6     asignacion -> ID REF ID PCOMA
Rule 7     asignacion -> ID ASIGNACION array PCOMA
Rule 8     valor -> ID
Rule 9     valor -> NUMBER
Rule 10    valor -> CADENA
Rule 11    valor -> BOOLEAN
Rule 12    opcomparacion -> IGUAL
Rule 13    opcomparacion -> MAYOR
Rule 14    opcomparacion -> MENOR
Rule 15    opcomparacion -> MAYORIGUAL
Rule 16    opcomparacion -> MENORIGUAL
Rule 17    expcmp -> valor opcomparacion valor
Rule 18    comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
Rule 19    comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
Rule 20    comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
Rule 21    array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
Rule 22    array -> ARRAY LPAREN valor RPAREN
Rule 23    contenido -> valor DOUBLE_ARROW valor
Rule 24    contenido -> contenido COMA valor DOUBLE_ARROW valor
Rule 25    estdatos -> ARRAY
Rule 26    sort -> SORT LPAREN ID RPAREN PCOMA
Rule 27    funcion -> sort

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
ARRAY                : 21 22 25
ASIGNACION           : 5 7
BOOLEAN              : 11
BOOLEAN_AND          : 
BOOLEAN_OR           : 
BREAK                : 
CADENA               : 10
CASE                 : 
CATCH                : 
CLASS                : 
COMA                 : 24
COMMENT              : 
CONCAT_EQUAL         : 
CONST                : 
CONTINUE             : 
DECLARE              : 
DECREMENTO           : 
DEFAULT              : 
DIVIDE               : 
DIV_EQUAL            : 
DO                   : 
DOUBLE_ARROW         : 21 23 24
ECHO                 : 
ELSE                 : 19 20
ELSEIF               : 20
EXTENDS              : 
FIN                  : 1
FINAL                : 
FOR                  : 
FUNCTION             : 
GLOBAL               : 
ID                   : 5 6 6 7 8 26
IF                   : 18 19 20
IGUAL                : 12
INCLUDE              : 
INCREMENTO           : 
INICIO               : 1
INSTANCEOF           : 
IS_NOT_EQUAL         : 
LLLAVE               : 18 19 19 20 20 20
LPAREN               : 18 19 20 20 21 22 26
MAYOR                : 13
MAYORIGUAL           : 15
MENOR                : 14
MENORIGUAL           : 16
MINUS                : 
MOD                  : 
NUMBER               : 9
OR                   : 
PCOMA                : 5 6 7 26
PLUS                 : 
PRINT                : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
REF                  : 6
RLLAVE               : 18 19 19 20 20 20
RPAREN               : 18 19 20 20 21 22 26
SORT                 : 26
TIMES                : 
TRY                  : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

array                : 7
asignacion           : 2
comparacion          : 3
contenido            : 24
estdatos             : 
expcmp               : 18 19 20 20
funcion              : 4
opcomparacion        : 17
programa             : 0
sentencias           : 1 18 19 19 20 20 20
sort                 : 27
valor                : 5 17 17 21 21 22 23 23 24 24

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . INICIO sentencias FIN

    INICIO          shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> INICIO . sentencias FIN
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) asignacion -> . ID ASIGNACION valor PCOMA
    (6) asignacion -> . ID REF ID PCOMA
    (7) asignacion -> . ID ASIGNACION array PCOMA
    (18) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (19) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (20) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (27) funcion -> . sort
    (26) sort -> . SORT LPAREN ID RPAREN PCOMA

    ID              shift and go to state 7
    IF              shift and go to state 8
    SORT            shift and go to state 10

    sentencias                     shift and go to state 3
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    sort                           shift and go to state 9

state 3

    (1) programa -> INICIO sentencias . FIN

    FIN             shift and go to state 11


state 4

    (2) sentencias -> asignacion .

    FIN             reduce using rule 2 (sentencias -> asignacion .)
    RLLAVE          reduce using rule 2 (sentencias -> asignacion .)


state 5

    (3) sentencias -> comparacion .

    FIN             reduce using rule 3 (sentencias -> comparacion .)
    RLLAVE          reduce using rule 3 (sentencias -> comparacion .)


state 6

    (4) sentencias -> funcion .

    FIN             reduce using rule 4 (sentencias -> funcion .)
    RLLAVE          reduce using rule 4 (sentencias -> funcion .)


state 7

    (5) asignacion -> ID . ASIGNACION valor PCOMA
    (6) asignacion -> ID . REF ID PCOMA
    (7) asignacion -> ID . ASIGNACION array PCOMA

    ASIGNACION      shift and go to state 12
    REF             shift and go to state 13


state 8

    (18) comparacion -> IF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (19) comparacion -> IF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (20) comparacion -> IF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LPAREN          shift and go to state 14


state 9

    (27) funcion -> sort .

    FIN             reduce using rule 27 (funcion -> sort .)
    RLLAVE          reduce using rule 27 (funcion -> sort .)


state 10

    (26) sort -> SORT . LPAREN ID RPAREN PCOMA

    LPAREN          shift and go to state 15


state 11

    (1) programa -> INICIO sentencias FIN .

    $end            reduce using rule 1 (programa -> INICIO sentencias FIN .)


state 12

    (5) asignacion -> ID ASIGNACION . valor PCOMA
    (7) asignacion -> ID ASIGNACION . array PCOMA
    (8) valor -> . ID
    (9) valor -> . NUMBER
    (10) valor -> . CADENA
    (11) valor -> . BOOLEAN
    (21) array -> . ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
    (22) array -> . ARRAY LPAREN valor RPAREN

    ID              shift and go to state 16
    NUMBER          shift and go to state 19
    CADENA          shift and go to state 20
    BOOLEAN         shift and go to state 21
    ARRAY           shift and go to state 22

    valor                          shift and go to state 17
    array                          shift and go to state 18

state 13

    (6) asignacion -> ID REF . ID PCOMA

    ID              shift and go to state 23


state 14

    (18) comparacion -> IF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE
    (19) comparacion -> IF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (20) comparacion -> IF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (17) expcmp -> . valor opcomparacion valor
    (8) valor -> . ID
    (9) valor -> . NUMBER
    (10) valor -> . CADENA
    (11) valor -> . BOOLEAN

    ID              shift and go to state 16
    NUMBER          shift and go to state 19
    CADENA          shift and go to state 20
    BOOLEAN         shift and go to state 21

    expcmp                         shift and go to state 24
    valor                          shift and go to state 25

state 15

    (26) sort -> SORT LPAREN . ID RPAREN PCOMA

    ID              shift and go to state 26


state 16

    (8) valor -> ID .

    PCOMA           reduce using rule 8 (valor -> ID .)
    IGUAL           reduce using rule 8 (valor -> ID .)
    MAYOR           reduce using rule 8 (valor -> ID .)
    MENOR           reduce using rule 8 (valor -> ID .)
    MAYORIGUAL      reduce using rule 8 (valor -> ID .)
    MENORIGUAL      reduce using rule 8 (valor -> ID .)
    DOUBLE_ARROW    reduce using rule 8 (valor -> ID .)
    RPAREN          reduce using rule 8 (valor -> ID .)


state 17

    (5) asignacion -> ID ASIGNACION valor . PCOMA

    PCOMA           shift and go to state 27


state 18

    (7) asignacion -> ID ASIGNACION array . PCOMA

    PCOMA           shift and go to state 28


state 19

    (9) valor -> NUMBER .

    PCOMA           reduce using rule 9 (valor -> NUMBER .)
    IGUAL           reduce using rule 9 (valor -> NUMBER .)
    MAYOR           reduce using rule 9 (valor -> NUMBER .)
    MENOR           reduce using rule 9 (valor -> NUMBER .)
    MAYORIGUAL      reduce using rule 9 (valor -> NUMBER .)
    MENORIGUAL      reduce using rule 9 (valor -> NUMBER .)
    DOUBLE_ARROW    reduce using rule 9 (valor -> NUMBER .)
    RPAREN          reduce using rule 9 (valor -> NUMBER .)


state 20

    (10) valor -> CADENA .

    PCOMA           reduce using rule 10 (valor -> CADENA .)
    IGUAL           reduce using rule 10 (valor -> CADENA .)
    MAYOR           reduce using rule 10 (valor -> CADENA .)
    MENOR           reduce using rule 10 (valor -> CADENA .)
    MAYORIGUAL      reduce using rule 10 (valor -> CADENA .)
    MENORIGUAL      reduce using rule 10 (valor -> CADENA .)
    DOUBLE_ARROW    reduce using rule 10 (valor -> CADENA .)
    RPAREN          reduce using rule 10 (valor -> CADENA .)


state 21

    (11) valor -> BOOLEAN .

    PCOMA           reduce using rule 11 (valor -> BOOLEAN .)
    IGUAL           reduce using rule 11 (valor -> BOOLEAN .)
    MAYOR           reduce using rule 11 (valor -> BOOLEAN .)
    MENOR           reduce using rule 11 (valor -> BOOLEAN .)
    MAYORIGUAL      reduce using rule 11 (valor -> BOOLEAN .)
    MENORIGUAL      reduce using rule 11 (valor -> BOOLEAN .)
    DOUBLE_ARROW    reduce using rule 11 (valor -> BOOLEAN .)
    RPAREN          reduce using rule 11 (valor -> BOOLEAN .)


state 22

    (21) array -> ARRAY . LPAREN valor DOUBLE_ARROW valor RPAREN
    (22) array -> ARRAY . LPAREN valor RPAREN

    LPAREN          shift and go to state 29


state 23

    (6) asignacion -> ID REF ID . PCOMA

    PCOMA           shift and go to state 30


state 24

    (18) comparacion -> IF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE
    (19) comparacion -> IF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (20) comparacion -> IF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    RPAREN          shift and go to state 31


state 25

    (17) expcmp -> valor . opcomparacion valor
    (12) opcomparacion -> . IGUAL
    (13) opcomparacion -> . MAYOR
    (14) opcomparacion -> . MENOR
    (15) opcomparacion -> . MAYORIGUAL
    (16) opcomparacion -> . MENORIGUAL

    IGUAL           shift and go to state 33
    MAYOR           shift and go to state 34
    MENOR           shift and go to state 35
    MAYORIGUAL      shift and go to state 36
    MENORIGUAL      shift and go to state 37

    opcomparacion                  shift and go to state 32

state 26

    (26) sort -> SORT LPAREN ID . RPAREN PCOMA

    RPAREN          shift and go to state 38


state 27

    (5) asignacion -> ID ASIGNACION valor PCOMA .

    FIN             reduce using rule 5 (asignacion -> ID ASIGNACION valor PCOMA .)
    RLLAVE          reduce using rule 5 (asignacion -> ID ASIGNACION valor PCOMA .)


state 28

    (7) asignacion -> ID ASIGNACION array PCOMA .

    FIN             reduce using rule 7 (asignacion -> ID ASIGNACION array PCOMA .)
    RLLAVE          reduce using rule 7 (asignacion -> ID ASIGNACION array PCOMA .)


state 29

    (21) array -> ARRAY LPAREN . valor DOUBLE_ARROW valor RPAREN
    (22) array -> ARRAY LPAREN . valor RPAREN
    (8) valor -> . ID
    (9) valor -> . NUMBER
    (10) valor -> . CADENA
    (11) valor -> . BOOLEAN

    ID              shift and go to state 16
    NUMBER          shift and go to state 19
    CADENA          shift and go to state 20
    BOOLEAN         shift and go to state 21

    valor                          shift and go to state 39

state 30

    (6) asignacion -> ID REF ID PCOMA .

    FIN             reduce using rule 6 (asignacion -> ID REF ID PCOMA .)
    RLLAVE          reduce using rule 6 (asignacion -> ID REF ID PCOMA .)


state 31

    (18) comparacion -> IF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE
    (19) comparacion -> IF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (20) comparacion -> IF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 40


state 32

    (17) expcmp -> valor opcomparacion . valor
    (8) valor -> . ID
    (9) valor -> . NUMBER
    (10) valor -> . CADENA
    (11) valor -> . BOOLEAN

    ID              shift and go to state 16
    NUMBER          shift and go to state 19
    CADENA          shift and go to state 20
    BOOLEAN         shift and go to state 21

    valor                          shift and go to state 41

state 33

    (12) opcomparacion -> IGUAL .

    ID              reduce using rule 12 (opcomparacion -> IGUAL .)
    NUMBER          reduce using rule 12 (opcomparacion -> IGUAL .)
    CADENA          reduce using rule 12 (opcomparacion -> IGUAL .)
    BOOLEAN         reduce using rule 12 (opcomparacion -> IGUAL .)


state 34

    (13) opcomparacion -> MAYOR .

    ID              reduce using rule 13 (opcomparacion -> MAYOR .)
    NUMBER          reduce using rule 13 (opcomparacion -> MAYOR .)
    CADENA          reduce using rule 13 (opcomparacion -> MAYOR .)
    BOOLEAN         reduce using rule 13 (opcomparacion -> MAYOR .)


state 35

    (14) opcomparacion -> MENOR .

    ID              reduce using rule 14 (opcomparacion -> MENOR .)
    NUMBER          reduce using rule 14 (opcomparacion -> MENOR .)
    CADENA          reduce using rule 14 (opcomparacion -> MENOR .)
    BOOLEAN         reduce using rule 14 (opcomparacion -> MENOR .)


state 36

    (15) opcomparacion -> MAYORIGUAL .

    ID              reduce using rule 15 (opcomparacion -> MAYORIGUAL .)
    NUMBER          reduce using rule 15 (opcomparacion -> MAYORIGUAL .)
    CADENA          reduce using rule 15 (opcomparacion -> MAYORIGUAL .)
    BOOLEAN         reduce using rule 15 (opcomparacion -> MAYORIGUAL .)


state 37

    (16) opcomparacion -> MENORIGUAL .

    ID              reduce using rule 16 (opcomparacion -> MENORIGUAL .)
    NUMBER          reduce using rule 16 (opcomparacion -> MENORIGUAL .)
    CADENA          reduce using rule 16 (opcomparacion -> MENORIGUAL .)
    BOOLEAN         reduce using rule 16 (opcomparacion -> MENORIGUAL .)


state 38

    (26) sort -> SORT LPAREN ID RPAREN . PCOMA

    PCOMA           shift and go to state 42


state 39

    (21) array -> ARRAY LPAREN valor . DOUBLE_ARROW valor RPAREN
    (22) array -> ARRAY LPAREN valor . RPAREN

    DOUBLE_ARROW    shift and go to state 43
    RPAREN          shift and go to state 44


state 40

    (18) comparacion -> IF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE
    (19) comparacion -> IF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (20) comparacion -> IF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) asignacion -> . ID ASIGNACION valor PCOMA
    (6) asignacion -> . ID REF ID PCOMA
    (7) asignacion -> . ID ASIGNACION array PCOMA
    (18) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (19) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (20) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (27) funcion -> . sort
    (26) sort -> . SORT LPAREN ID RPAREN PCOMA

    ID              shift and go to state 7
    IF              shift and go to state 8
    SORT            shift and go to state 10

    sentencias                     shift and go to state 45
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    sort                           shift and go to state 9

state 41

    (17) expcmp -> valor opcomparacion valor .

    RPAREN          reduce using rule 17 (expcmp -> valor opcomparacion valor .)


state 42

    (26) sort -> SORT LPAREN ID RPAREN PCOMA .

    FIN             reduce using rule 26 (sort -> SORT LPAREN ID RPAREN PCOMA .)
    RLLAVE          reduce using rule 26 (sort -> SORT LPAREN ID RPAREN PCOMA .)


state 43

    (21) array -> ARRAY LPAREN valor DOUBLE_ARROW . valor RPAREN
    (8) valor -> . ID
    (9) valor -> . NUMBER
    (10) valor -> . CADENA
    (11) valor -> . BOOLEAN

    ID              shift and go to state 16
    NUMBER          shift and go to state 19
    CADENA          shift and go to state 20
    BOOLEAN         shift and go to state 21

    valor                          shift and go to state 46

state 44

    (22) array -> ARRAY LPAREN valor RPAREN .

    PCOMA           reduce using rule 22 (array -> ARRAY LPAREN valor RPAREN .)


state 45

    (18) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE
    (19) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE ELSE LLLAVE sentencias RLLAVE
    (20) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    RLLAVE          shift and go to state 47


state 46

    (21) array -> ARRAY LPAREN valor DOUBLE_ARROW valor . RPAREN

    RPAREN          shift and go to state 48


state 47

    (18) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .
    (19) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE . ELSE LLLAVE sentencias RLLAVE
    (20) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE . ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    FIN             reduce using rule 18 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 18 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    ELSE            shift and go to state 49
    ELSEIF          shift and go to state 50


state 48

    (21) array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN .

    PCOMA           reduce using rule 21 (array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN .)


state 49

    (19) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 51


state 50

    (20) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LPAREN          shift and go to state 52


state 51

    (19) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) asignacion -> . ID ASIGNACION valor PCOMA
    (6) asignacion -> . ID REF ID PCOMA
    (7) asignacion -> . ID ASIGNACION array PCOMA
    (18) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (19) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (20) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (27) funcion -> . sort
    (26) sort -> . SORT LPAREN ID RPAREN PCOMA

    ID              shift and go to state 7
    IF              shift and go to state 8
    SORT            shift and go to state 10

    sentencias                     shift and go to state 53
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    sort                           shift and go to state 9

state 52

    (20) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (17) expcmp -> . valor opcomparacion valor
    (8) valor -> . ID
    (9) valor -> . NUMBER
    (10) valor -> . CADENA
    (11) valor -> . BOOLEAN

    ID              shift and go to state 16
    NUMBER          shift and go to state 19
    CADENA          shift and go to state 20
    BOOLEAN         shift and go to state 21

    expcmp                         shift and go to state 54
    valor                          shift and go to state 25

state 53

    (19) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 55


state 54

    (20) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    RPAREN          shift and go to state 56


state 55

    (19) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 19 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 19 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)


state 56

    (20) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 57


state 57

    (20) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) asignacion -> . ID ASIGNACION valor PCOMA
    (6) asignacion -> . ID REF ID PCOMA
    (7) asignacion -> . ID ASIGNACION array PCOMA
    (18) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (19) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (20) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (27) funcion -> . sort
    (26) sort -> . SORT LPAREN ID RPAREN PCOMA

    ID              shift and go to state 7
    IF              shift and go to state 8
    SORT            shift and go to state 10

    sentencias                     shift and go to state 58
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    sort                           shift and go to state 9

state 58

    (20) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE ELSE LLLAVE sentencias RLLAVE

    RLLAVE          shift and go to state 59


state 59

    (20) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE . ELSE LLLAVE sentencias RLLAVE

    ELSE            shift and go to state 60


state 60

    (20) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 61


state 61

    (20) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) asignacion -> . ID ASIGNACION valor PCOMA
    (6) asignacion -> . ID REF ID PCOMA
    (7) asignacion -> . ID ASIGNACION array PCOMA
    (18) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (19) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (20) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (27) funcion -> . sort
    (26) sort -> . SORT LPAREN ID RPAREN PCOMA

    ID              shift and go to state 7
    IF              shift and go to state 8
    SORT            shift and go to state 10

    sentencias                     shift and go to state 62
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    sort                           shift and go to state 9

state 62

    (20) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 63


state 63

    (20) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 20 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 20 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)

