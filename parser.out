Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    BREAK
    CASE
    CLASS
    COMMENT
    CONCAT_EQUAL
    CONST
    CONTINUE
    DECLARE
    DEFAULT
    DIV_EQUAL
    EXTENDS
    FINAL
    GLOBAL
    HEAP
    INCLUDE
    INSTANCEOF
    IS_NOT_EQUAL
    MOD
    PRIVATE
    PROTECTED
    PUBLIC

Grammar

Rule 0     S' -> programa
Rule 1     programa -> INICIO sentencias FIN
Rule 2     sentencias -> asignacion
Rule 3     sentencias -> comparacion
Rule 4     sentencias -> funcion
Rule 5     sentencias -> impresion
Rule 6     sentencias -> repeticion
Rule 7     sentencias -> expresion
Rule 8     sentencias -> excepcion
Rule 9     sentencias -> heap
Rule 10    sentencias -> array_map
Rule 11    asignacion -> ID ASIGNACION valor PCOMA
Rule 12    asignacion -> ID REF ID PCOMA
Rule 13    asignacion -> ID ASIGNACION estdatos PCOMA
Rule 14    asignacion -> ID ASIGNACION expresion PCOMA
Rule 15    valor -> ID
Rule 16    valor -> NUMBER
Rule 17    valor -> CADENA
Rule 18    valor -> BOOLEAN
Rule 19    opcomparacion -> IGUAL
Rule 20    opcomparacion -> MAYOR
Rule 21    opcomparacion -> MENOR
Rule 22    opcomparacion -> MAYORIGUAL
Rule 23    opcomparacion -> MENORIGUAL
Rule 24    expcmp -> valor opcomparacion valor
Rule 25    expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
Rule 26    expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
Rule 27    expcmplog -> expcmp oplog expcmp
Rule 28    expcmplog -> expcmp oplog expcmplog
Rule 29    oplog -> BOOLEAN_OR
Rule 30    oplog -> BOOLEAN_AND
Rule 31    oplog -> AND
Rule 32    oplog -> OR
Rule 33    comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
Rule 34    comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
Rule 35    comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
Rule 36    comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
Rule 37    array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
Rule 38    array -> ARRAY LPAREN valor RPAREN
Rule 39    sort -> SORT LPAREN ID RPAREN PCOMA
Rule 40    estdatos -> array
Rule 41    estdatos -> array_map
Rule 42    estdatos -> heap
Rule 43    expresionmat -> NUMBER operadormat NUMBER
Rule 44    operadormat -> PLUS
Rule 45    operadormat -> DIVIDE
Rule 46    operadormat -> MINUS
Rule 47    operadormat -> TIMES
Rule 48    expresion -> expresionmat
Rule 49    expresion -> expcmplog
Rule 50    funcion -> sort
Rule 51    funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
Rule 52    funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
Rule 53    args -> ID
Rule 54    args -> ID args
Rule 55    excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
Rule 56    impresion -> ECHO valor PCOMA
Rule 57    impresion -> PRINT valor PCOMA
Rule 58    repeticionrep -> MAYOR
Rule 59    repeticionrep -> MENOR
Rule 60    repeticionrep -> MAYORIGUAL
Rule 61    repeticionrep -> MENORIGUAL
Rule 62    actualizar -> INCREMENTO
Rule 63    actualizar -> DECREMENTO
Rule 64    repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
Rule 65    repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
Rule 66    repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
Rule 67    array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
Rule 68    heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
Rule 69    heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 31
ARRAY                : 37 38 69
ARRAY_MAP            : 67
ASIGNACION           : 11 13 14 64
BOOLEAN              : 18
BOOLEAN_AND          : 30
BOOLEAN_OR           : 29
BREAK                : 
CADENA               : 17 55
CASE                 : 
CATCH                : 55
CLASS                : 
COMA                 : 55 67 68
COMMENT              : 
CONCAT_EQUAL         : 
CONST                : 
CONTINUE             : 
DECLARE              : 
DECREMENTO           : 63
DEFAULT              : 
DIVIDE               : 45
DIV_EQUAL            : 
DO                   : 66
DOUBLE_ARROW         : 37 69
ECHO                 : 55 56
ELSE                 : 35 36
ELSEIF               : 36
EXCEPTION            : 55
EXTENDS              : 
FIN                  : 1
FINAL                : 
FLECHA               : 55
FOR                  : 64
FUNCTION             : 51 52
GETMESSAGE           : 55
GLOBAL               : 
HEAP                 : 
ID                   : 11 12 12 13 14 15 39 51 52 53 54 55 55 64 64 64 65 65 66 66
IF                   : 33 34 35 36
IGUAL                : 19
INCLUDE              : 
INCREMENTO           : 62
INICIO               : 1
INSERT               : 68 69
INSTANCEOF           : 
IS_NOT_EQUAL         : 
LCORCH               : 68
LLLAVE               : 33 34 35 35 36 36 36 51 52 55 55 64 65 66
LPAREN               : 25 25 26 26 33 34 35 36 36 37 38 39 51 52 55 64 65 66 67 68 69 69
MAYOR                : 20 58
MAYORIGUAL           : 22 60
MENOR                : 21 59
MENORIGUAL           : 23 61
MINUS                : 46
MOD                  : 
NFUNCION             : 51 52
NUMBER               : 16 43 43 64 64 68 68 69
OR                   : 32
PCOMA                : 11 12 13 14 39 52 56 57 64 64 65 66 66 67 68 69
PLUS                 : 44
PRINT                : 57
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RCORCH               : 68
REF                  : 12
RETURN               : 52
RLLAVE               : 33 34 35 35 36 36 36 51 52 55 55 64 65 66
RPAREN               : 25 25 26 26 33 34 35 36 36 37 38 39 51 52 55 64 65 66 67 68 69 69
SORT                 : 39
TIMES                : 47
TRY                  : 55
WHILE                : 65 66
error                : 

Nonterminals, with rules where they appear

actualizar           : 64 65 66
args                 : 51 52 54
array                : 40 67
array_map            : 10 41
asignacion           : 2
comparacion          : 3
estdatos             : 13
excepcion            : 8
expcmp               : 26 27 27 28 33 35 36 36
expcmplog            : 28 34 49
expresion            : 7 14
expresionmat         : 48
funcion              : 4 67
heap                 : 9 42
impresion            : 5
opcomparacion        : 24 25 25 26 26 65 66
operadormat          : 43
oplog                : 25 26 26 27 28
programa             : 0
repeticion           : 6
repeticionrep        : 64
sentencias           : 1 33 34 35 35 36 36 36 51 52 55 64 65 66
sort                 : 50
valor                : 11 24 24 25 25 25 25 26 26 26 26 37 37 38 52 56 57 65 66 69

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . INICIO sentencias FIN

    INICIO          shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> INICIO . sentencias FIN
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . heap
    (10) sentencias -> . array_map
    (11) asignacion -> . ID ASIGNACION valor PCOMA
    (12) asignacion -> . ID REF ID PCOMA
    (13) asignacion -> . ID ASIGNACION estdatos PCOMA
    (14) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (50) funcion -> . sort
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (56) impresion -> . ECHO valor PCOMA
    (57) impresion -> . PRINT valor PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (48) expresion -> . expresionmat
    (49) expresion -> . expcmplog
    (55) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (27) expcmplog -> . expcmp oplog expcmp
    (28) expcmplog -> . expcmp oplog expcmplog
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 13
    IF              shift and go to state 15
    FUNCTION        shift and go to state 20
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 28
    INSERT          shift and go to state 30
    ARRAY_MAP       shift and go to state 31
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 16
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    sentencias                     shift and go to state 3
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    heap                           shift and go to state 11
    array_map                      shift and go to state 12
    valor                          shift and go to state 14
    expcmp                         shift and go to state 17
    expcmplog                      shift and go to state 18
    sort                           shift and go to state 19
    expresionmat                   shift and go to state 27

state 3

    (1) programa -> INICIO sentencias . FIN

    FIN             shift and go to state 34


state 4

    (2) sentencias -> asignacion .

    FIN             reduce using rule 2 (sentencias -> asignacion .)
    ID              reduce using rule 2 (sentencias -> asignacion .)
    RLLAVE          reduce using rule 2 (sentencias -> asignacion .)
    RETURN          reduce using rule 2 (sentencias -> asignacion .)


state 5

    (3) sentencias -> comparacion .

    FIN             reduce using rule 3 (sentencias -> comparacion .)
    ID              reduce using rule 3 (sentencias -> comparacion .)
    RLLAVE          reduce using rule 3 (sentencias -> comparacion .)
    RETURN          reduce using rule 3 (sentencias -> comparacion .)


state 6

    (4) sentencias -> funcion .

    FIN             reduce using rule 4 (sentencias -> funcion .)
    ID              reduce using rule 4 (sentencias -> funcion .)
    RLLAVE          reduce using rule 4 (sentencias -> funcion .)
    RETURN          reduce using rule 4 (sentencias -> funcion .)


state 7

    (5) sentencias -> impresion .

    FIN             reduce using rule 5 (sentencias -> impresion .)
    ID              reduce using rule 5 (sentencias -> impresion .)
    RLLAVE          reduce using rule 5 (sentencias -> impresion .)
    RETURN          reduce using rule 5 (sentencias -> impresion .)


state 8

    (6) sentencias -> repeticion .

    FIN             reduce using rule 6 (sentencias -> repeticion .)
    ID              reduce using rule 6 (sentencias -> repeticion .)
    RLLAVE          reduce using rule 6 (sentencias -> repeticion .)
    RETURN          reduce using rule 6 (sentencias -> repeticion .)


state 9

    (7) sentencias -> expresion .

    FIN             reduce using rule 7 (sentencias -> expresion .)
    ID              reduce using rule 7 (sentencias -> expresion .)
    RLLAVE          reduce using rule 7 (sentencias -> expresion .)
    RETURN          reduce using rule 7 (sentencias -> expresion .)


state 10

    (8) sentencias -> excepcion .

    FIN             reduce using rule 8 (sentencias -> excepcion .)
    ID              reduce using rule 8 (sentencias -> excepcion .)
    RLLAVE          reduce using rule 8 (sentencias -> excepcion .)
    RETURN          reduce using rule 8 (sentencias -> excepcion .)


state 11

    (9) sentencias -> heap .

    FIN             reduce using rule 9 (sentencias -> heap .)
    ID              reduce using rule 9 (sentencias -> heap .)
    RLLAVE          reduce using rule 9 (sentencias -> heap .)
    RETURN          reduce using rule 9 (sentencias -> heap .)


state 12

    (10) sentencias -> array_map .

    FIN             reduce using rule 10 (sentencias -> array_map .)
    ID              reduce using rule 10 (sentencias -> array_map .)
    RLLAVE          reduce using rule 10 (sentencias -> array_map .)
    RETURN          reduce using rule 10 (sentencias -> array_map .)


state 13

    (11) asignacion -> ID . ASIGNACION valor PCOMA
    (12) asignacion -> ID . REF ID PCOMA
    (13) asignacion -> ID . ASIGNACION estdatos PCOMA
    (14) asignacion -> ID . ASIGNACION expresion PCOMA
    (15) valor -> ID .

    ASIGNACION      shift and go to state 35
    REF             shift and go to state 36
    IGUAL           reduce using rule 15 (valor -> ID .)
    MAYOR           reduce using rule 15 (valor -> ID .)
    MENOR           reduce using rule 15 (valor -> ID .)
    MAYORIGUAL      reduce using rule 15 (valor -> ID .)
    MENORIGUAL      reduce using rule 15 (valor -> ID .)


state 14

    (24) expcmp -> valor . opcomparacion valor
    (19) opcomparacion -> . IGUAL
    (20) opcomparacion -> . MAYOR
    (21) opcomparacion -> . MENOR
    (22) opcomparacion -> . MAYORIGUAL
    (23) opcomparacion -> . MENORIGUAL

    IGUAL           shift and go to state 38
    MAYOR           shift and go to state 39
    MENOR           shift and go to state 40
    MAYORIGUAL      shift and go to state 41
    MENORIGUAL      shift and go to state 42

    opcomparacion                  shift and go to state 37

state 15

    (33) comparacion -> IF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> IF . LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> IF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> IF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LPAREN          shift and go to state 43


state 16

    (25) expcmp -> LPAREN . valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> LPAREN . valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 45
    NUMBER          shift and go to state 46
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    valor                          shift and go to state 44

state 17

    (27) expcmplog -> expcmp . oplog expcmp
    (28) expcmplog -> expcmp . oplog expcmplog
    (29) oplog -> . BOOLEAN_OR
    (30) oplog -> . BOOLEAN_AND
    (31) oplog -> . AND
    (32) oplog -> . OR

    BOOLEAN_OR      shift and go to state 48
    BOOLEAN_AND     shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51

    oplog                          shift and go to state 47

state 18

    (49) expresion -> expcmplog .

    FIN             reduce using rule 49 (expresion -> expcmplog .)
    PCOMA           reduce using rule 49 (expresion -> expcmplog .)
    ID              reduce using rule 49 (expresion -> expcmplog .)
    RLLAVE          reduce using rule 49 (expresion -> expcmplog .)
    RETURN          reduce using rule 49 (expresion -> expcmplog .)


state 19

    (50) funcion -> sort .

    FIN             reduce using rule 50 (funcion -> sort .)
    ID              reduce using rule 50 (funcion -> sort .)
    RLLAVE          reduce using rule 50 (funcion -> sort .)
    COMA            reduce using rule 50 (funcion -> sort .)
    RETURN          reduce using rule 50 (funcion -> sort .)


state 20

    (51) funcion -> FUNCTION . NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (52) funcion -> FUNCTION . NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE

    NFUNCION        shift and go to state 52


state 21

    (56) impresion -> ECHO . valor PCOMA
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 45
    NUMBER          shift and go to state 46
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    valor                          shift and go to state 53

state 22

    (57) impresion -> PRINT . valor PCOMA
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 45
    NUMBER          shift and go to state 46
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    valor                          shift and go to state 54

state 23

    (64) repeticion -> FOR . LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    LPAREN          shift and go to state 55


state 24

    (43) expresionmat -> NUMBER . operadormat NUMBER
    (16) valor -> NUMBER .
    (44) operadormat -> . PLUS
    (45) operadormat -> . DIVIDE
    (46) operadormat -> . MINUS
    (47) operadormat -> . TIMES

    IGUAL           reduce using rule 16 (valor -> NUMBER .)
    MAYOR           reduce using rule 16 (valor -> NUMBER .)
    MENOR           reduce using rule 16 (valor -> NUMBER .)
    MAYORIGUAL      reduce using rule 16 (valor -> NUMBER .)
    MENORIGUAL      reduce using rule 16 (valor -> NUMBER .)
    PLUS            shift and go to state 57
    DIVIDE          shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60

    operadormat                    shift and go to state 56

state 25

    (65) repeticion -> WHILE . LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE

    LPAREN          shift and go to state 61


state 26

    (66) repeticion -> DO . LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    LLLAVE          shift and go to state 62


state 27

    (48) expresion -> expresionmat .

    FIN             reduce using rule 48 (expresion -> expresionmat .)
    PCOMA           reduce using rule 48 (expresion -> expresionmat .)
    ID              reduce using rule 48 (expresion -> expresionmat .)
    RLLAVE          reduce using rule 48 (expresion -> expresionmat .)
    RETURN          reduce using rule 48 (expresion -> expresionmat .)


state 28

    (55) excepcion -> TRY . LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    LLLAVE          shift and go to state 63


state 29

    (17) valor -> CADENA .

    IGUAL           reduce using rule 17 (valor -> CADENA .)
    MAYOR           reduce using rule 17 (valor -> CADENA .)
    MENOR           reduce using rule 17 (valor -> CADENA .)
    MAYORIGUAL      reduce using rule 17 (valor -> CADENA .)
    MENORIGUAL      reduce using rule 17 (valor -> CADENA .)
    PCOMA           reduce using rule 17 (valor -> CADENA .)
    BOOLEAN_OR      reduce using rule 17 (valor -> CADENA .)
    BOOLEAN_AND     reduce using rule 17 (valor -> CADENA .)
    AND             reduce using rule 17 (valor -> CADENA .)
    OR              reduce using rule 17 (valor -> CADENA .)
    RPAREN          reduce using rule 17 (valor -> CADENA .)
    FIN             reduce using rule 17 (valor -> CADENA .)
    ID              reduce using rule 17 (valor -> CADENA .)
    RLLAVE          reduce using rule 17 (valor -> CADENA .)
    RETURN          reduce using rule 17 (valor -> CADENA .)
    DOUBLE_ARROW    reduce using rule 17 (valor -> CADENA .)


state 30

    (68) heap -> INSERT . LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> INSERT . LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

    LPAREN          shift and go to state 64


state 31

    (67) array_map -> ARRAY_MAP . LPAREN funcion COMA array RPAREN PCOMA

    LPAREN          shift and go to state 65


state 32

    (39) sort -> SORT . LPAREN ID RPAREN PCOMA

    LPAREN          shift and go to state 66


state 33

    (18) valor -> BOOLEAN .

    IGUAL           reduce using rule 18 (valor -> BOOLEAN .)
    MAYOR           reduce using rule 18 (valor -> BOOLEAN .)
    MENOR           reduce using rule 18 (valor -> BOOLEAN .)
    MAYORIGUAL      reduce using rule 18 (valor -> BOOLEAN .)
    MENORIGUAL      reduce using rule 18 (valor -> BOOLEAN .)
    PCOMA           reduce using rule 18 (valor -> BOOLEAN .)
    BOOLEAN_OR      reduce using rule 18 (valor -> BOOLEAN .)
    BOOLEAN_AND     reduce using rule 18 (valor -> BOOLEAN .)
    AND             reduce using rule 18 (valor -> BOOLEAN .)
    OR              reduce using rule 18 (valor -> BOOLEAN .)
    RPAREN          reduce using rule 18 (valor -> BOOLEAN .)
    FIN             reduce using rule 18 (valor -> BOOLEAN .)
    ID              reduce using rule 18 (valor -> BOOLEAN .)
    RLLAVE          reduce using rule 18 (valor -> BOOLEAN .)
    RETURN          reduce using rule 18 (valor -> BOOLEAN .)
    DOUBLE_ARROW    reduce using rule 18 (valor -> BOOLEAN .)


state 34

    (1) programa -> INICIO sentencias FIN .

    $end            reduce using rule 1 (programa -> INICIO sentencias FIN .)


state 35

    (11) asignacion -> ID ASIGNACION . valor PCOMA
    (13) asignacion -> ID ASIGNACION . estdatos PCOMA
    (14) asignacion -> ID ASIGNACION . expresion PCOMA
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN
    (40) estdatos -> . array
    (41) estdatos -> . array_map
    (42) estdatos -> . heap
    (48) expresion -> . expresionmat
    (49) expresion -> . expcmplog
    (37) array -> . ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
    (38) array -> . ARRAY LPAREN valor RPAREN
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (27) expcmplog -> . expcmp oplog expcmp
    (28) expcmplog -> . expcmp oplog expcmplog
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp

    ID              shift and go to state 45
    NUMBER          shift and go to state 70
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33
    ARRAY           shift and go to state 74
    ARRAY_MAP       shift and go to state 31
    INSERT          shift and go to state 30
    LPAREN          shift and go to state 16

    valor                          shift and go to state 67
    estdatos                       shift and go to state 68
    expresion                      shift and go to state 69
    array                          shift and go to state 71
    array_map                      shift and go to state 72
    heap                           shift and go to state 73
    expresionmat                   shift and go to state 27
    expcmplog                      shift and go to state 18
    expcmp                         shift and go to state 17

state 36

    (12) asignacion -> ID REF . ID PCOMA

    ID              shift and go to state 75


state 37

    (24) expcmp -> valor opcomparacion . valor
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 45
    NUMBER          shift and go to state 46
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    valor                          shift and go to state 76

state 38

    (19) opcomparacion -> IGUAL .

    ID              reduce using rule 19 (opcomparacion -> IGUAL .)
    NUMBER          reduce using rule 19 (opcomparacion -> IGUAL .)
    CADENA          reduce using rule 19 (opcomparacion -> IGUAL .)
    BOOLEAN         reduce using rule 19 (opcomparacion -> IGUAL .)


state 39

    (20) opcomparacion -> MAYOR .

    ID              reduce using rule 20 (opcomparacion -> MAYOR .)
    NUMBER          reduce using rule 20 (opcomparacion -> MAYOR .)
    CADENA          reduce using rule 20 (opcomparacion -> MAYOR .)
    BOOLEAN         reduce using rule 20 (opcomparacion -> MAYOR .)


state 40

    (21) opcomparacion -> MENOR .

    ID              reduce using rule 21 (opcomparacion -> MENOR .)
    NUMBER          reduce using rule 21 (opcomparacion -> MENOR .)
    CADENA          reduce using rule 21 (opcomparacion -> MENOR .)
    BOOLEAN         reduce using rule 21 (opcomparacion -> MENOR .)


state 41

    (22) opcomparacion -> MAYORIGUAL .

    ID              reduce using rule 22 (opcomparacion -> MAYORIGUAL .)
    NUMBER          reduce using rule 22 (opcomparacion -> MAYORIGUAL .)
    CADENA          reduce using rule 22 (opcomparacion -> MAYORIGUAL .)
    BOOLEAN         reduce using rule 22 (opcomparacion -> MAYORIGUAL .)


state 42

    (23) opcomparacion -> MENORIGUAL .

    ID              reduce using rule 23 (opcomparacion -> MENORIGUAL .)
    NUMBER          reduce using rule 23 (opcomparacion -> MENORIGUAL .)
    CADENA          reduce using rule 23 (opcomparacion -> MENORIGUAL .)
    BOOLEAN         reduce using rule 23 (opcomparacion -> MENORIGUAL .)


state 43

    (33) comparacion -> IF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> IF LPAREN . expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> IF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> IF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmp
    (28) expcmplog -> . expcmp oplog expcmplog
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    LPAREN          shift and go to state 16
    ID              shift and go to state 45
    NUMBER          shift and go to state 46
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    expcmp                         shift and go to state 77
    expcmplog                      shift and go to state 78
    valor                          shift and go to state 14

state 44

    (25) expcmp -> LPAREN valor . opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> LPAREN valor . opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (19) opcomparacion -> . IGUAL
    (20) opcomparacion -> . MAYOR
    (21) opcomparacion -> . MENOR
    (22) opcomparacion -> . MAYORIGUAL
    (23) opcomparacion -> . MENORIGUAL

    IGUAL           shift and go to state 38
    MAYOR           shift and go to state 39
    MENOR           shift and go to state 40
    MAYORIGUAL      shift and go to state 41
    MENORIGUAL      shift and go to state 42

    opcomparacion                  shift and go to state 79

state 45

    (15) valor -> ID .

    IGUAL           reduce using rule 15 (valor -> ID .)
    MAYOR           reduce using rule 15 (valor -> ID .)
    MENOR           reduce using rule 15 (valor -> ID .)
    MAYORIGUAL      reduce using rule 15 (valor -> ID .)
    MENORIGUAL      reduce using rule 15 (valor -> ID .)
    PCOMA           reduce using rule 15 (valor -> ID .)
    BOOLEAN_OR      reduce using rule 15 (valor -> ID .)
    BOOLEAN_AND     reduce using rule 15 (valor -> ID .)
    AND             reduce using rule 15 (valor -> ID .)
    OR              reduce using rule 15 (valor -> ID .)
    RPAREN          reduce using rule 15 (valor -> ID .)
    FIN             reduce using rule 15 (valor -> ID .)
    ID              reduce using rule 15 (valor -> ID .)
    RLLAVE          reduce using rule 15 (valor -> ID .)
    RETURN          reduce using rule 15 (valor -> ID .)
    DOUBLE_ARROW    reduce using rule 15 (valor -> ID .)


state 46

    (16) valor -> NUMBER .

    IGUAL           reduce using rule 16 (valor -> NUMBER .)
    MAYOR           reduce using rule 16 (valor -> NUMBER .)
    MENOR           reduce using rule 16 (valor -> NUMBER .)
    MAYORIGUAL      reduce using rule 16 (valor -> NUMBER .)
    MENORIGUAL      reduce using rule 16 (valor -> NUMBER .)
    PCOMA           reduce using rule 16 (valor -> NUMBER .)
    BOOLEAN_OR      reduce using rule 16 (valor -> NUMBER .)
    BOOLEAN_AND     reduce using rule 16 (valor -> NUMBER .)
    AND             reduce using rule 16 (valor -> NUMBER .)
    OR              reduce using rule 16 (valor -> NUMBER .)
    RPAREN          reduce using rule 16 (valor -> NUMBER .)
    FIN             reduce using rule 16 (valor -> NUMBER .)
    ID              reduce using rule 16 (valor -> NUMBER .)
    RLLAVE          reduce using rule 16 (valor -> NUMBER .)
    RETURN          reduce using rule 16 (valor -> NUMBER .)
    DOUBLE_ARROW    reduce using rule 16 (valor -> NUMBER .)


state 47

    (27) expcmplog -> expcmp oplog . expcmp
    (28) expcmplog -> expcmp oplog . expcmplog
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmp
    (28) expcmplog -> . expcmp oplog expcmplog
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    LPAREN          shift and go to state 16
    ID              shift and go to state 45
    NUMBER          shift and go to state 46
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    expcmp                         shift and go to state 80
    expcmplog                      shift and go to state 81
    valor                          shift and go to state 14

state 48

    (29) oplog -> BOOLEAN_OR .

    LPAREN          reduce using rule 29 (oplog -> BOOLEAN_OR .)
    ID              reduce using rule 29 (oplog -> BOOLEAN_OR .)
    NUMBER          reduce using rule 29 (oplog -> BOOLEAN_OR .)
    CADENA          reduce using rule 29 (oplog -> BOOLEAN_OR .)
    BOOLEAN         reduce using rule 29 (oplog -> BOOLEAN_OR .)


state 49

    (30) oplog -> BOOLEAN_AND .

    LPAREN          reduce using rule 30 (oplog -> BOOLEAN_AND .)
    ID              reduce using rule 30 (oplog -> BOOLEAN_AND .)
    NUMBER          reduce using rule 30 (oplog -> BOOLEAN_AND .)
    CADENA          reduce using rule 30 (oplog -> BOOLEAN_AND .)
    BOOLEAN         reduce using rule 30 (oplog -> BOOLEAN_AND .)


state 50

    (31) oplog -> AND .

    LPAREN          reduce using rule 31 (oplog -> AND .)
    ID              reduce using rule 31 (oplog -> AND .)
    NUMBER          reduce using rule 31 (oplog -> AND .)
    CADENA          reduce using rule 31 (oplog -> AND .)
    BOOLEAN         reduce using rule 31 (oplog -> AND .)


state 51

    (32) oplog -> OR .

    LPAREN          reduce using rule 32 (oplog -> OR .)
    ID              reduce using rule 32 (oplog -> OR .)
    NUMBER          reduce using rule 32 (oplog -> OR .)
    CADENA          reduce using rule 32 (oplog -> OR .)
    BOOLEAN         reduce using rule 32 (oplog -> OR .)


state 52

    (51) funcion -> FUNCTION NFUNCION . ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (52) funcion -> FUNCTION NFUNCION . ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE

    ID              shift and go to state 82


state 53

    (56) impresion -> ECHO valor . PCOMA

    PCOMA           shift and go to state 83


state 54

    (57) impresion -> PRINT valor . PCOMA

    PCOMA           shift and go to state 84


state 55

    (64) repeticion -> FOR LPAREN . ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    ID              shift and go to state 85


state 56

    (43) expresionmat -> NUMBER operadormat . NUMBER

    NUMBER          shift and go to state 86


state 57

    (44) operadormat -> PLUS .

    NUMBER          reduce using rule 44 (operadormat -> PLUS .)


state 58

    (45) operadormat -> DIVIDE .

    NUMBER          reduce using rule 45 (operadormat -> DIVIDE .)


state 59

    (46) operadormat -> MINUS .

    NUMBER          reduce using rule 46 (operadormat -> MINUS .)


state 60

    (47) operadormat -> TIMES .

    NUMBER          reduce using rule 47 (operadormat -> TIMES .)


state 61

    (65) repeticion -> WHILE LPAREN . ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE

    ID              shift and go to state 87


state 62

    (66) repeticion -> DO LLLAVE . sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . heap
    (10) sentencias -> . array_map
    (11) asignacion -> . ID ASIGNACION valor PCOMA
    (12) asignacion -> . ID REF ID PCOMA
    (13) asignacion -> . ID ASIGNACION estdatos PCOMA
    (14) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (50) funcion -> . sort
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (56) impresion -> . ECHO valor PCOMA
    (57) impresion -> . PRINT valor PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (48) expresion -> . expresionmat
    (49) expresion -> . expcmplog
    (55) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (27) expcmplog -> . expcmp oplog expcmp
    (28) expcmplog -> . expcmp oplog expcmplog
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 13
    IF              shift and go to state 15
    FUNCTION        shift and go to state 20
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 28
    INSERT          shift and go to state 30
    ARRAY_MAP       shift and go to state 31
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 16
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    sentencias                     shift and go to state 88
    valor                          shift and go to state 14
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    heap                           shift and go to state 11
    array_map                      shift and go to state 12
    expcmp                         shift and go to state 17
    expcmplog                      shift and go to state 18
    sort                           shift and go to state 19
    expresionmat                   shift and go to state 27

state 63

    (55) excepcion -> TRY LLLAVE . sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . heap
    (10) sentencias -> . array_map
    (11) asignacion -> . ID ASIGNACION valor PCOMA
    (12) asignacion -> . ID REF ID PCOMA
    (13) asignacion -> . ID ASIGNACION estdatos PCOMA
    (14) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (50) funcion -> . sort
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (56) impresion -> . ECHO valor PCOMA
    (57) impresion -> . PRINT valor PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (48) expresion -> . expresionmat
    (49) expresion -> . expcmplog
    (55) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (27) expcmplog -> . expcmp oplog expcmp
    (28) expcmplog -> . expcmp oplog expcmplog
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 13
    IF              shift and go to state 15
    FUNCTION        shift and go to state 20
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 28
    INSERT          shift and go to state 30
    ARRAY_MAP       shift and go to state 31
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 16
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    sentencias                     shift and go to state 89
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    heap                           shift and go to state 11
    array_map                      shift and go to state 12
    valor                          shift and go to state 14
    expcmp                         shift and go to state 17
    expcmplog                      shift and go to state 18
    sort                           shift and go to state 19
    expresionmat                   shift and go to state 27

state 64

    (68) heap -> INSERT LPAREN . LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> INSERT LPAREN . ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

    LCORCH          shift and go to state 90
    ARRAY           shift and go to state 91


state 65

    (67) array_map -> ARRAY_MAP LPAREN . funcion COMA array RPAREN PCOMA
    (50) funcion -> . sort
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA

    FUNCTION        shift and go to state 20
    SORT            shift and go to state 32

    funcion                        shift and go to state 92
    sort                           shift and go to state 19

state 66

    (39) sort -> SORT LPAREN . ID RPAREN PCOMA

    ID              shift and go to state 93


state 67

    (11) asignacion -> ID ASIGNACION valor . PCOMA
    (24) expcmp -> valor . opcomparacion valor
    (19) opcomparacion -> . IGUAL
    (20) opcomparacion -> . MAYOR
    (21) opcomparacion -> . MENOR
    (22) opcomparacion -> . MAYORIGUAL
    (23) opcomparacion -> . MENORIGUAL

    PCOMA           shift and go to state 94
    IGUAL           shift and go to state 38
    MAYOR           shift and go to state 39
    MENOR           shift and go to state 40
    MAYORIGUAL      shift and go to state 41
    MENORIGUAL      shift and go to state 42

    opcomparacion                  shift and go to state 37

state 68

    (13) asignacion -> ID ASIGNACION estdatos . PCOMA

    PCOMA           shift and go to state 95


state 69

    (14) asignacion -> ID ASIGNACION expresion . PCOMA

    PCOMA           shift and go to state 96


state 70

    (16) valor -> NUMBER .
    (43) expresionmat -> NUMBER . operadormat NUMBER
    (44) operadormat -> . PLUS
    (45) operadormat -> . DIVIDE
    (46) operadormat -> . MINUS
    (47) operadormat -> . TIMES

    PCOMA           reduce using rule 16 (valor -> NUMBER .)
    IGUAL           reduce using rule 16 (valor -> NUMBER .)
    MAYOR           reduce using rule 16 (valor -> NUMBER .)
    MENOR           reduce using rule 16 (valor -> NUMBER .)
    MAYORIGUAL      reduce using rule 16 (valor -> NUMBER .)
    MENORIGUAL      reduce using rule 16 (valor -> NUMBER .)
    PLUS            shift and go to state 57
    DIVIDE          shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60

    operadormat                    shift and go to state 56

state 71

    (40) estdatos -> array .

    PCOMA           reduce using rule 40 (estdatos -> array .)


state 72

    (41) estdatos -> array_map .

    PCOMA           reduce using rule 41 (estdatos -> array_map .)


state 73

    (42) estdatos -> heap .

    PCOMA           reduce using rule 42 (estdatos -> heap .)


state 74

    (37) array -> ARRAY . LPAREN valor DOUBLE_ARROW valor RPAREN
    (38) array -> ARRAY . LPAREN valor RPAREN

    LPAREN          shift and go to state 97


state 75

    (12) asignacion -> ID REF ID . PCOMA

    PCOMA           shift and go to state 98


state 76

    (24) expcmp -> valor opcomparacion valor .

    BOOLEAN_OR      reduce using rule 24 (expcmp -> valor opcomparacion valor .)
    BOOLEAN_AND     reduce using rule 24 (expcmp -> valor opcomparacion valor .)
    AND             reduce using rule 24 (expcmp -> valor opcomparacion valor .)
    OR              reduce using rule 24 (expcmp -> valor opcomparacion valor .)
    RPAREN          reduce using rule 24 (expcmp -> valor opcomparacion valor .)
    FIN             reduce using rule 24 (expcmp -> valor opcomparacion valor .)
    PCOMA           reduce using rule 24 (expcmp -> valor opcomparacion valor .)
    ID              reduce using rule 24 (expcmp -> valor opcomparacion valor .)
    RLLAVE          reduce using rule 24 (expcmp -> valor opcomparacion valor .)
    RETURN          reduce using rule 24 (expcmp -> valor opcomparacion valor .)


state 77

    (33) comparacion -> IF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> IF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> IF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (27) expcmplog -> expcmp . oplog expcmp
    (28) expcmplog -> expcmp . oplog expcmplog
    (29) oplog -> . BOOLEAN_OR
    (30) oplog -> . BOOLEAN_AND
    (31) oplog -> . AND
    (32) oplog -> . OR

    RPAREN          shift and go to state 99
    BOOLEAN_OR      shift and go to state 48
    BOOLEAN_AND     shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51

    oplog                          shift and go to state 47

state 78

    (34) comparacion -> IF LPAREN expcmplog . RPAREN LLLAVE sentencias RLLAVE

    RPAREN          shift and go to state 100


state 79

    (25) expcmp -> LPAREN valor opcomparacion . valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> LPAREN valor opcomparacion . valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 45
    NUMBER          shift and go to state 46
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    valor                          shift and go to state 101

state 80

    (27) expcmplog -> expcmp oplog expcmp .
    (27) expcmplog -> expcmp . oplog expcmp
    (28) expcmplog -> expcmp . oplog expcmplog
    (29) oplog -> . BOOLEAN_OR
    (30) oplog -> . BOOLEAN_AND
    (31) oplog -> . AND
    (32) oplog -> . OR

    FIN             reduce using rule 27 (expcmplog -> expcmp oplog expcmp .)
    PCOMA           reduce using rule 27 (expcmplog -> expcmp oplog expcmp .)
    RPAREN          reduce using rule 27 (expcmplog -> expcmp oplog expcmp .)
    ID              reduce using rule 27 (expcmplog -> expcmp oplog expcmp .)
    RLLAVE          reduce using rule 27 (expcmplog -> expcmp oplog expcmp .)
    RETURN          reduce using rule 27 (expcmplog -> expcmp oplog expcmp .)
    BOOLEAN_OR      shift and go to state 48
    BOOLEAN_AND     shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51

    oplog                          shift and go to state 47

state 81

    (28) expcmplog -> expcmp oplog expcmplog .

    FIN             reduce using rule 28 (expcmplog -> expcmp oplog expcmplog .)
    PCOMA           reduce using rule 28 (expcmplog -> expcmp oplog expcmplog .)
    RPAREN          reduce using rule 28 (expcmplog -> expcmp oplog expcmplog .)
    ID              reduce using rule 28 (expcmplog -> expcmp oplog expcmplog .)
    RLLAVE          reduce using rule 28 (expcmplog -> expcmp oplog expcmplog .)
    RETURN          reduce using rule 28 (expcmplog -> expcmp oplog expcmplog .)


state 82

    (51) funcion -> FUNCTION NFUNCION ID . LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (52) funcion -> FUNCTION NFUNCION ID . LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE

    LPAREN          shift and go to state 102


state 83

    (56) impresion -> ECHO valor PCOMA .

    FIN             reduce using rule 56 (impresion -> ECHO valor PCOMA .)
    ID              reduce using rule 56 (impresion -> ECHO valor PCOMA .)
    RLLAVE          reduce using rule 56 (impresion -> ECHO valor PCOMA .)
    RETURN          reduce using rule 56 (impresion -> ECHO valor PCOMA .)


state 84

    (57) impresion -> PRINT valor PCOMA .

    FIN             reduce using rule 57 (impresion -> PRINT valor PCOMA .)
    ID              reduce using rule 57 (impresion -> PRINT valor PCOMA .)
    RLLAVE          reduce using rule 57 (impresion -> PRINT valor PCOMA .)
    RETURN          reduce using rule 57 (impresion -> PRINT valor PCOMA .)


state 85

    (64) repeticion -> FOR LPAREN ID . ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    ASIGNACION      shift and go to state 103


state 86

    (43) expresionmat -> NUMBER operadormat NUMBER .

    FIN             reduce using rule 43 (expresionmat -> NUMBER operadormat NUMBER .)
    PCOMA           reduce using rule 43 (expresionmat -> NUMBER operadormat NUMBER .)
    ID              reduce using rule 43 (expresionmat -> NUMBER operadormat NUMBER .)
    RLLAVE          reduce using rule 43 (expresionmat -> NUMBER operadormat NUMBER .)
    RETURN          reduce using rule 43 (expresionmat -> NUMBER operadormat NUMBER .)


state 87

    (65) repeticion -> WHILE LPAREN ID . opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (19) opcomparacion -> . IGUAL
    (20) opcomparacion -> . MAYOR
    (21) opcomparacion -> . MENOR
    (22) opcomparacion -> . MAYORIGUAL
    (23) opcomparacion -> . MENORIGUAL

    IGUAL           shift and go to state 38
    MAYOR           shift and go to state 39
    MENOR           shift and go to state 40
    MAYORIGUAL      shift and go to state 41
    MENORIGUAL      shift and go to state 42

    opcomparacion                  shift and go to state 104

state 88

    (66) repeticion -> DO LLLAVE sentencias . ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    ID              shift and go to state 105


state 89

    (55) excepcion -> TRY LLLAVE sentencias . RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    RLLAVE          shift and go to state 106


state 90

    (68) heap -> INSERT LPAREN LCORCH . NUMBER COMA NUMBER RCORCH RPAREN PCOMA

    NUMBER          shift and go to state 107


state 91

    (69) heap -> INSERT LPAREN ARRAY . LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

    LPAREN          shift and go to state 108


state 92

    (67) array_map -> ARRAY_MAP LPAREN funcion . COMA array RPAREN PCOMA

    COMA            shift and go to state 109


state 93

    (39) sort -> SORT LPAREN ID . RPAREN PCOMA

    RPAREN          shift and go to state 110


state 94

    (11) asignacion -> ID ASIGNACION valor PCOMA .

    FIN             reduce using rule 11 (asignacion -> ID ASIGNACION valor PCOMA .)
    ID              reduce using rule 11 (asignacion -> ID ASIGNACION valor PCOMA .)
    RLLAVE          reduce using rule 11 (asignacion -> ID ASIGNACION valor PCOMA .)
    RETURN          reduce using rule 11 (asignacion -> ID ASIGNACION valor PCOMA .)


state 95

    (13) asignacion -> ID ASIGNACION estdatos PCOMA .

    FIN             reduce using rule 13 (asignacion -> ID ASIGNACION estdatos PCOMA .)
    ID              reduce using rule 13 (asignacion -> ID ASIGNACION estdatos PCOMA .)
    RLLAVE          reduce using rule 13 (asignacion -> ID ASIGNACION estdatos PCOMA .)
    RETURN          reduce using rule 13 (asignacion -> ID ASIGNACION estdatos PCOMA .)


state 96

    (14) asignacion -> ID ASIGNACION expresion PCOMA .

    FIN             reduce using rule 14 (asignacion -> ID ASIGNACION expresion PCOMA .)
    ID              reduce using rule 14 (asignacion -> ID ASIGNACION expresion PCOMA .)
    RLLAVE          reduce using rule 14 (asignacion -> ID ASIGNACION expresion PCOMA .)
    RETURN          reduce using rule 14 (asignacion -> ID ASIGNACION expresion PCOMA .)


state 97

    (37) array -> ARRAY LPAREN . valor DOUBLE_ARROW valor RPAREN
    (38) array -> ARRAY LPAREN . valor RPAREN
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 45
    NUMBER          shift and go to state 46
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    valor                          shift and go to state 111

state 98

    (12) asignacion -> ID REF ID PCOMA .

    FIN             reduce using rule 12 (asignacion -> ID REF ID PCOMA .)
    ID              reduce using rule 12 (asignacion -> ID REF ID PCOMA .)
    RLLAVE          reduce using rule 12 (asignacion -> ID REF ID PCOMA .)
    RETURN          reduce using rule 12 (asignacion -> ID REF ID PCOMA .)


state 99

    (33) comparacion -> IF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE
    (35) comparacion -> IF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> IF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 112


state 100

    (34) comparacion -> IF LPAREN expcmplog RPAREN . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 113


state 101

    (25) expcmp -> LPAREN valor opcomparacion valor . RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> LPAREN valor opcomparacion valor . RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp

    RPAREN          shift and go to state 114


state 102

    (51) funcion -> FUNCTION NFUNCION ID LPAREN . args RPAREN LLLAVE sentencias RLLAVE
    (52) funcion -> FUNCTION NFUNCION ID LPAREN . args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (53) args -> . ID
    (54) args -> . ID args

    ID              shift and go to state 115

    args                           shift and go to state 116

state 103

    (64) repeticion -> FOR LPAREN ID ASIGNACION . NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    NUMBER          shift and go to state 117


state 104

    (65) repeticion -> WHILE LPAREN ID opcomparacion . valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 45
    NUMBER          shift and go to state 46
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    valor                          shift and go to state 118

state 105

    (66) repeticion -> DO LLLAVE sentencias ID . actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (62) actualizar -> . INCREMENTO
    (63) actualizar -> . DECREMENTO

    INCREMENTO      shift and go to state 120
    DECREMENTO      shift and go to state 121

    actualizar                     shift and go to state 119

state 106

    (55) excepcion -> TRY LLLAVE sentencias RLLAVE . CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    CATCH           shift and go to state 122


state 107

    (68) heap -> INSERT LPAREN LCORCH NUMBER . COMA NUMBER RCORCH RPAREN PCOMA

    COMA            shift and go to state 123


state 108

    (69) heap -> INSERT LPAREN ARRAY LPAREN . valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 45
    NUMBER          shift and go to state 46
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    valor                          shift and go to state 124

state 109

    (67) array_map -> ARRAY_MAP LPAREN funcion COMA . array RPAREN PCOMA
    (37) array -> . ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
    (38) array -> . ARRAY LPAREN valor RPAREN

    ARRAY           shift and go to state 74

    array                          shift and go to state 125

state 110

    (39) sort -> SORT LPAREN ID RPAREN . PCOMA

    PCOMA           shift and go to state 126


state 111

    (37) array -> ARRAY LPAREN valor . DOUBLE_ARROW valor RPAREN
    (38) array -> ARRAY LPAREN valor . RPAREN

    DOUBLE_ARROW    shift and go to state 127
    RPAREN          shift and go to state 128


state 112

    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE
    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . heap
    (10) sentencias -> . array_map
    (11) asignacion -> . ID ASIGNACION valor PCOMA
    (12) asignacion -> . ID REF ID PCOMA
    (13) asignacion -> . ID ASIGNACION estdatos PCOMA
    (14) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (50) funcion -> . sort
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (56) impresion -> . ECHO valor PCOMA
    (57) impresion -> . PRINT valor PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (48) expresion -> . expresionmat
    (49) expresion -> . expcmplog
    (55) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (27) expcmplog -> . expcmp oplog expcmp
    (28) expcmplog -> . expcmp oplog expcmplog
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 13
    IF              shift and go to state 15
    FUNCTION        shift and go to state 20
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 28
    INSERT          shift and go to state 30
    ARRAY_MAP       shift and go to state 31
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 16
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    expcmp                         shift and go to state 17
    sentencias                     shift and go to state 129
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    heap                           shift and go to state 11
    array_map                      shift and go to state 12
    valor                          shift and go to state 14
    expcmplog                      shift and go to state 18
    sort                           shift and go to state 19
    expresionmat                   shift and go to state 27

state 113

    (34) comparacion -> IF LPAREN expcmplog RPAREN LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . heap
    (10) sentencias -> . array_map
    (11) asignacion -> . ID ASIGNACION valor PCOMA
    (12) asignacion -> . ID REF ID PCOMA
    (13) asignacion -> . ID ASIGNACION estdatos PCOMA
    (14) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (50) funcion -> . sort
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (56) impresion -> . ECHO valor PCOMA
    (57) impresion -> . PRINT valor PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (48) expresion -> . expresionmat
    (49) expresion -> . expcmplog
    (55) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (27) expcmplog -> . expcmp oplog expcmp
    (28) expcmplog -> . expcmp oplog expcmplog
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 13
    IF              shift and go to state 15
    FUNCTION        shift and go to state 20
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 28
    INSERT          shift and go to state 30
    ARRAY_MAP       shift and go to state 31
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 16
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    expcmplog                      shift and go to state 18
    sentencias                     shift and go to state 130
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    heap                           shift and go to state 11
    array_map                      shift and go to state 12
    valor                          shift and go to state 14
    expcmp                         shift and go to state 17
    sort                           shift and go to state 19
    expresionmat                   shift and go to state 27

state 114

    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN . oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> LPAREN valor opcomparacion valor RPAREN . oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (29) oplog -> . BOOLEAN_OR
    (30) oplog -> . BOOLEAN_AND
    (31) oplog -> . AND
    (32) oplog -> . OR

    BOOLEAN_OR      shift and go to state 48
    BOOLEAN_AND     shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51

    oplog                          shift and go to state 131

state 115

    (53) args -> ID .
    (54) args -> ID . args
    (53) args -> . ID
    (54) args -> . ID args

    RPAREN          reduce using rule 53 (args -> ID .)
    ID              shift and go to state 115

    args                           shift and go to state 132

state 116

    (51) funcion -> FUNCTION NFUNCION ID LPAREN args . RPAREN LLLAVE sentencias RLLAVE
    (52) funcion -> FUNCTION NFUNCION ID LPAREN args . RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE

    RPAREN          shift and go to state 133


state 117

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER . PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    PCOMA           shift and go to state 134


state 118

    (65) repeticion -> WHILE LPAREN ID opcomparacion valor . RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE

    RPAREN          shift and go to state 135


state 119

    (66) repeticion -> DO LLLAVE sentencias ID actualizar . PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    PCOMA           shift and go to state 136


state 120

    (62) actualizar -> INCREMENTO .

    PCOMA           reduce using rule 62 (actualizar -> INCREMENTO .)
    RPAREN          reduce using rule 62 (actualizar -> INCREMENTO .)


state 121

    (63) actualizar -> DECREMENTO .

    PCOMA           reduce using rule 63 (actualizar -> DECREMENTO .)
    RPAREN          reduce using rule 63 (actualizar -> DECREMENTO .)


state 122

    (55) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH . LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    LPAREN          shift and go to state 137


state 123

    (68) heap -> INSERT LPAREN LCORCH NUMBER COMA . NUMBER RCORCH RPAREN PCOMA

    NUMBER          shift and go to state 138


state 124

    (69) heap -> INSERT LPAREN ARRAY LPAREN valor . DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

    DOUBLE_ARROW    shift and go to state 139


state 125

    (67) array_map -> ARRAY_MAP LPAREN funcion COMA array . RPAREN PCOMA

    RPAREN          shift and go to state 140


state 126

    (39) sort -> SORT LPAREN ID RPAREN PCOMA .

    FIN             reduce using rule 39 (sort -> SORT LPAREN ID RPAREN PCOMA .)
    ID              reduce using rule 39 (sort -> SORT LPAREN ID RPAREN PCOMA .)
    RLLAVE          reduce using rule 39 (sort -> SORT LPAREN ID RPAREN PCOMA .)
    COMA            reduce using rule 39 (sort -> SORT LPAREN ID RPAREN PCOMA .)
    RETURN          reduce using rule 39 (sort -> SORT LPAREN ID RPAREN PCOMA .)


state 127

    (37) array -> ARRAY LPAREN valor DOUBLE_ARROW . valor RPAREN
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 45
    NUMBER          shift and go to state 46
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    valor                          shift and go to state 141

state 128

    (38) array -> ARRAY LPAREN valor RPAREN .

    PCOMA           reduce using rule 38 (array -> ARRAY LPAREN valor RPAREN .)
    RPAREN          reduce using rule 38 (array -> ARRAY LPAREN valor RPAREN .)


state 129

    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE
    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    RLLAVE          shift and go to state 142


state 130

    (34) comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 143


state 131

    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog . LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog . LPAREN valor opcomparacion valor RPAREN oplog expcmp

    LPAREN          shift and go to state 144


state 132

    (54) args -> ID args .

    RPAREN          reduce using rule 54 (args -> ID args .)


state 133

    (51) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN . LLLAVE sentencias RLLAVE
    (52) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN . LLLAVE sentencias RETURN valor PCOMA RLLAVE

    LLLAVE          shift and go to state 145


state 134

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA . ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    ID              shift and go to state 146


state 135

    (65) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN . LLLAVE sentencias ID actualizar PCOMA RLLAVE

    LLLAVE          shift and go to state 147


state 136

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA . RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    RLLAVE          shift and go to state 148


state 137

    (55) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN . EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    EXCEPTION       shift and go to state 149


state 138

    (68) heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER . RCORCH RPAREN PCOMA

    RCORCH          shift and go to state 150


state 139

    (69) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW . NUMBER RPAREN RPAREN PCOMA

    NUMBER          shift and go to state 151


state 140

    (67) array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN . PCOMA

    PCOMA           shift and go to state 152


state 141

    (37) array -> ARRAY LPAREN valor DOUBLE_ARROW valor . RPAREN

    RPAREN          shift and go to state 153


state 142

    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .
    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE . ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE . ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    FIN             reduce using rule 33 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 33 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 33 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 33 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    ELSE            shift and go to state 154
    ELSEIF          shift and go to state 155


state 143

    (34) comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 34 (comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 34 (comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 34 (comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 34 (comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .)


state 144

    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN . valor opcomparacion valor RPAREN
    (26) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN . valor opcomparacion valor RPAREN oplog expcmp
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 45
    NUMBER          shift and go to state 46
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    valor                          shift and go to state 156

state 145

    (51) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE . sentencias RLLAVE
    (52) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE . sentencias RETURN valor PCOMA RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . heap
    (10) sentencias -> . array_map
    (11) asignacion -> . ID ASIGNACION valor PCOMA
    (12) asignacion -> . ID REF ID PCOMA
    (13) asignacion -> . ID ASIGNACION estdatos PCOMA
    (14) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (50) funcion -> . sort
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (56) impresion -> . ECHO valor PCOMA
    (57) impresion -> . PRINT valor PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (48) expresion -> . expresionmat
    (49) expresion -> . expcmplog
    (55) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (27) expcmplog -> . expcmp oplog expcmp
    (28) expcmplog -> . expcmp oplog expcmplog
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 13
    IF              shift and go to state 15
    FUNCTION        shift and go to state 20
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 28
    INSERT          shift and go to state 30
    ARRAY_MAP       shift and go to state 31
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 16
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    sentencias                     shift and go to state 157
    valor                          shift and go to state 14
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    heap                           shift and go to state 11
    array_map                      shift and go to state 12
    expcmp                         shift and go to state 17
    expcmplog                      shift and go to state 18
    sort                           shift and go to state 19
    expresionmat                   shift and go to state 27

state 146

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID . repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (58) repeticionrep -> . MAYOR
    (59) repeticionrep -> . MENOR
    (60) repeticionrep -> . MAYORIGUAL
    (61) repeticionrep -> . MENORIGUAL

    MAYOR           shift and go to state 159
    MENOR           shift and go to state 160
    MAYORIGUAL      shift and go to state 161
    MENORIGUAL      shift and go to state 162

    repeticionrep                  shift and go to state 158

state 147

    (65) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE . sentencias ID actualizar PCOMA RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . heap
    (10) sentencias -> . array_map
    (11) asignacion -> . ID ASIGNACION valor PCOMA
    (12) asignacion -> . ID REF ID PCOMA
    (13) asignacion -> . ID ASIGNACION estdatos PCOMA
    (14) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (50) funcion -> . sort
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (56) impresion -> . ECHO valor PCOMA
    (57) impresion -> . PRINT valor PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (48) expresion -> . expresionmat
    (49) expresion -> . expcmplog
    (55) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (27) expcmplog -> . expcmp oplog expcmp
    (28) expcmplog -> . expcmp oplog expcmplog
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 13
    IF              shift and go to state 15
    FUNCTION        shift and go to state 20
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 28
    INSERT          shift and go to state 30
    ARRAY_MAP       shift and go to state 31
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 16
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    valor                          shift and go to state 14
    sentencias                     shift and go to state 163
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    heap                           shift and go to state 11
    array_map                      shift and go to state 12
    expcmp                         shift and go to state 17
    expcmplog                      shift and go to state 18
    sort                           shift and go to state 19
    expresionmat                   shift and go to state 27

state 148

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE . WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    WHILE           shift and go to state 164


state 149

    (55) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION . ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    ID              shift and go to state 165


state 150

    (68) heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH . RPAREN PCOMA

    RPAREN          shift and go to state 166


state 151

    (69) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER . RPAREN RPAREN PCOMA

    RPAREN          shift and go to state 167


state 152

    (67) array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .

    FIN             reduce using rule 67 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)
    PCOMA           reduce using rule 67 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)
    ID              reduce using rule 67 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)
    RLLAVE          reduce using rule 67 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)
    RETURN          reduce using rule 67 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)


state 153

    (37) array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN .

    PCOMA           reduce using rule 37 (array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN .)
    RPAREN          reduce using rule 37 (array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN .)


state 154

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 168


state 155

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LPAREN          shift and go to state 169


state 156

    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor . opcomparacion valor RPAREN
    (26) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor . opcomparacion valor RPAREN oplog expcmp
    (19) opcomparacion -> . IGUAL
    (20) opcomparacion -> . MAYOR
    (21) opcomparacion -> . MENOR
    (22) opcomparacion -> . MAYORIGUAL
    (23) opcomparacion -> . MENORIGUAL

    IGUAL           shift and go to state 38
    MAYOR           shift and go to state 39
    MENOR           shift and go to state 40
    MAYORIGUAL      shift and go to state 41
    MENORIGUAL      shift and go to state 42

    opcomparacion                  shift and go to state 170

state 157

    (51) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias . RLLAVE
    (52) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias . RETURN valor PCOMA RLLAVE

    RLLAVE          shift and go to state 171
    RETURN          shift and go to state 172


state 158

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep . NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    NUMBER          shift and go to state 173


state 159

    (58) repeticionrep -> MAYOR .

    NUMBER          reduce using rule 58 (repeticionrep -> MAYOR .)


state 160

    (59) repeticionrep -> MENOR .

    NUMBER          reduce using rule 59 (repeticionrep -> MENOR .)


state 161

    (60) repeticionrep -> MAYORIGUAL .

    NUMBER          reduce using rule 60 (repeticionrep -> MAYORIGUAL .)


state 162

    (61) repeticionrep -> MENORIGUAL .

    NUMBER          reduce using rule 61 (repeticionrep -> MENORIGUAL .)


state 163

    (65) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias . ID actualizar PCOMA RLLAVE

    ID              shift and go to state 174


state 164

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE . LPAREN ID opcomparacion valor RPAREN PCOMA

    LPAREN          shift and go to state 175


state 165

    (55) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID . RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    RPAREN          shift and go to state 176


state 166

    (68) heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN . PCOMA

    PCOMA           shift and go to state 177


state 167

    (69) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN . RPAREN PCOMA

    RPAREN          shift and go to state 178


state 168

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . heap
    (10) sentencias -> . array_map
    (11) asignacion -> . ID ASIGNACION valor PCOMA
    (12) asignacion -> . ID REF ID PCOMA
    (13) asignacion -> . ID ASIGNACION estdatos PCOMA
    (14) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (50) funcion -> . sort
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (56) impresion -> . ECHO valor PCOMA
    (57) impresion -> . PRINT valor PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (48) expresion -> . expresionmat
    (49) expresion -> . expcmplog
    (55) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (27) expcmplog -> . expcmp oplog expcmp
    (28) expcmplog -> . expcmp oplog expcmplog
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 13
    IF              shift and go to state 15
    FUNCTION        shift and go to state 20
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 28
    INSERT          shift and go to state 30
    ARRAY_MAP       shift and go to state 31
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 16
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    expcmp                         shift and go to state 17
    sentencias                     shift and go to state 179
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    heap                           shift and go to state 11
    array_map                      shift and go to state 12
    valor                          shift and go to state 14
    expcmplog                      shift and go to state 18
    sort                           shift and go to state 19
    expresionmat                   shift and go to state 27

state 169

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    LPAREN          shift and go to state 16
    ID              shift and go to state 45
    NUMBER          shift and go to state 46
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    expcmp                         shift and go to state 180
    valor                          shift and go to state 14

state 170

    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion . valor RPAREN
    (26) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion . valor RPAREN oplog expcmp
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 45
    NUMBER          shift and go to state 46
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    valor                          shift and go to state 181

state 171

    (51) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 51 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 51 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 51 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .)
    COMA            reduce using rule 51 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 51 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .)


state 172

    (52) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN . valor PCOMA RLLAVE
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 45
    NUMBER          shift and go to state 46
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    valor                          shift and go to state 182

state 173

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER . PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    PCOMA           shift and go to state 183


state 174

    (65) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID . actualizar PCOMA RLLAVE
    (62) actualizar -> . INCREMENTO
    (63) actualizar -> . DECREMENTO

    INCREMENTO      shift and go to state 120
    DECREMENTO      shift and go to state 121

    actualizar                     shift and go to state 184

state 175

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN . ID opcomparacion valor RPAREN PCOMA

    ID              shift and go to state 185


state 176

    (55) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN . LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    LLLAVE          shift and go to state 186


state 177

    (68) heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .

    FIN             reduce using rule 68 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)
    PCOMA           reduce using rule 68 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)
    ID              reduce using rule 68 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)
    RLLAVE          reduce using rule 68 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)
    RETURN          reduce using rule 68 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)


state 178

    (69) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN . PCOMA

    PCOMA           shift and go to state 187


state 179

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 188


state 180

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    RPAREN          shift and go to state 189


state 181

    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor . RPAREN
    (26) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor . RPAREN oplog expcmp

    RPAREN          shift and go to state 190


state 182

    (52) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor . PCOMA RLLAVE

    PCOMA           shift and go to state 191


state 183

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA . ID actualizar RPAREN LLLAVE sentencias RLLAVE

    ID              shift and go to state 192


state 184

    (65) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar . PCOMA RLLAVE

    PCOMA           shift and go to state 193


state 185

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID . opcomparacion valor RPAREN PCOMA
    (19) opcomparacion -> . IGUAL
    (20) opcomparacion -> . MAYOR
    (21) opcomparacion -> . MENOR
    (22) opcomparacion -> . MAYORIGUAL
    (23) opcomparacion -> . MENORIGUAL

    IGUAL           shift and go to state 38
    MAYOR           shift and go to state 39
    MENOR           shift and go to state 40
    MAYORIGUAL      shift and go to state 41
    MENORIGUAL      shift and go to state 42

    opcomparacion                  shift and go to state 194

state 186

    (55) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE . ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    ECHO            shift and go to state 195


state 187

    (69) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .

    FIN             reduce using rule 69 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)
    PCOMA           reduce using rule 69 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)
    ID              reduce using rule 69 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)
    RLLAVE          reduce using rule 69 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)
    RETURN          reduce using rule 69 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)


state 188

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 35 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 35 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 35 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 35 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)


state 189

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 196


state 190

    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .
    (26) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN . oplog expcmp
    (29) oplog -> . BOOLEAN_OR
    (30) oplog -> . BOOLEAN_AND
    (31) oplog -> . AND
    (32) oplog -> . OR

  ! shift/reduce conflict for BOOLEAN_OR resolved as shift
  ! shift/reduce conflict for BOOLEAN_AND resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    FIN             reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    PCOMA           reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    ID              reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    RLLAVE          reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    RETURN          reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    BOOLEAN_OR      shift and go to state 48
    BOOLEAN_AND     shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51

  ! BOOLEAN_OR      [ reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .) ]
  ! BOOLEAN_AND     [ reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .) ]
  ! AND             [ reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .) ]
  ! OR              [ reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .) ]

    oplog                          shift and go to state 197

state 191

    (52) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA . RLLAVE

    RLLAVE          shift and go to state 198


state 192

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID . actualizar RPAREN LLLAVE sentencias RLLAVE
    (62) actualizar -> . INCREMENTO
    (63) actualizar -> . DECREMENTO

    INCREMENTO      shift and go to state 120
    DECREMENTO      shift and go to state 121

    actualizar                     shift and go to state 199

state 193

    (65) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA . RLLAVE

    RLLAVE          shift and go to state 200


state 194

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion . valor RPAREN PCOMA
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 45
    NUMBER          shift and go to state 46
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    valor                          shift and go to state 201

state 195

    (55) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO . CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    CADENA          shift and go to state 202


state 196

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . heap
    (10) sentencias -> . array_map
    (11) asignacion -> . ID ASIGNACION valor PCOMA
    (12) asignacion -> . ID REF ID PCOMA
    (13) asignacion -> . ID ASIGNACION estdatos PCOMA
    (14) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (50) funcion -> . sort
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (56) impresion -> . ECHO valor PCOMA
    (57) impresion -> . PRINT valor PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (48) expresion -> . expresionmat
    (49) expresion -> . expcmplog
    (55) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (27) expcmplog -> . expcmp oplog expcmp
    (28) expcmplog -> . expcmp oplog expcmplog
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 13
    IF              shift and go to state 15
    FUNCTION        shift and go to state 20
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 28
    INSERT          shift and go to state 30
    ARRAY_MAP       shift and go to state 31
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 16
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    expcmp                         shift and go to state 17
    sentencias                     shift and go to state 203
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    heap                           shift and go to state 11
    array_map                      shift and go to state 12
    valor                          shift and go to state 14
    expcmplog                      shift and go to state 18
    sort                           shift and go to state 19
    expresionmat                   shift and go to state 27

state 197

    (26) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog . expcmp
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    LPAREN          shift and go to state 16
    ID              shift and go to state 45
    NUMBER          shift and go to state 46
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    valor                          shift and go to state 14
    expcmp                         shift and go to state 204

state 198

    (52) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .

    FIN             reduce using rule 52 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)
    ID              reduce using rule 52 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)
    RLLAVE          reduce using rule 52 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)
    COMA            reduce using rule 52 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)
    RETURN          reduce using rule 52 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)


state 199

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar . RPAREN LLLAVE sentencias RLLAVE

    RPAREN          shift and go to state 205


state 200

    (65) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .

    FIN             reduce using rule 65 (repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .)
    ID              reduce using rule 65 (repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .)
    RLLAVE          reduce using rule 65 (repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .)
    RETURN          reduce using rule 65 (repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .)


state 201

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor . RPAREN PCOMA

    RPAREN          shift and go to state 206


state 202

    (55) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA . COMA ID FLECHA GETMESSAGE RLLAVE

    COMA            shift and go to state 207


state 203

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE ELSE LLLAVE sentencias RLLAVE

    RLLAVE          shift and go to state 208


state 204

    (26) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .

    BOOLEAN_OR      reduce using rule 26 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    BOOLEAN_AND     reduce using rule 26 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    AND             reduce using rule 26 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    OR              reduce using rule 26 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    RPAREN          reduce using rule 26 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    FIN             reduce using rule 26 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    PCOMA           reduce using rule 26 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    ID              reduce using rule 26 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    RLLAVE          reduce using rule 26 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    RETURN          reduce using rule 26 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)


state 205

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 209


state 206

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN . PCOMA

    PCOMA           shift and go to state 210


state 207

    (55) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA . ID FLECHA GETMESSAGE RLLAVE

    ID              shift and go to state 211


state 208

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE . ELSE LLLAVE sentencias RLLAVE

    ELSE            shift and go to state 212


state 209

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . heap
    (10) sentencias -> . array_map
    (11) asignacion -> . ID ASIGNACION valor PCOMA
    (12) asignacion -> . ID REF ID PCOMA
    (13) asignacion -> . ID ASIGNACION estdatos PCOMA
    (14) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (50) funcion -> . sort
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (56) impresion -> . ECHO valor PCOMA
    (57) impresion -> . PRINT valor PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (48) expresion -> . expresionmat
    (49) expresion -> . expcmplog
    (55) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (27) expcmplog -> . expcmp oplog expcmp
    (28) expcmplog -> . expcmp oplog expcmplog
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 13
    IF              shift and go to state 15
    FUNCTION        shift and go to state 20
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 28
    INSERT          shift and go to state 30
    ARRAY_MAP       shift and go to state 31
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 16
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    sentencias                     shift and go to state 213
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    heap                           shift and go to state 11
    array_map                      shift and go to state 12
    valor                          shift and go to state 14
    expcmp                         shift and go to state 17
    expcmplog                      shift and go to state 18
    sort                           shift and go to state 19
    expresionmat                   shift and go to state 27

state 210

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .

    FIN             reduce using rule 66 (repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .)
    ID              reduce using rule 66 (repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .)
    RLLAVE          reduce using rule 66 (repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .)
    RETURN          reduce using rule 66 (repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .)


state 211

    (55) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID . FLECHA GETMESSAGE RLLAVE

    FLECHA          shift and go to state 214


state 212

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 215


state 213

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 216


state 214

    (55) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA . GETMESSAGE RLLAVE

    GETMESSAGE      shift and go to state 217


state 215

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . heap
    (10) sentencias -> . array_map
    (11) asignacion -> . ID ASIGNACION valor PCOMA
    (12) asignacion -> . ID REF ID PCOMA
    (13) asignacion -> . ID ASIGNACION estdatos PCOMA
    (14) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (50) funcion -> . sort
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (56) impresion -> . ECHO valor PCOMA
    (57) impresion -> . PRINT valor PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (48) expresion -> . expresionmat
    (49) expresion -> . expcmplog
    (55) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (27) expcmplog -> . expcmp oplog expcmp
    (28) expcmplog -> . expcmp oplog expcmplog
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (15) valor -> . ID
    (16) valor -> . NUMBER
    (17) valor -> . CADENA
    (18) valor -> . BOOLEAN

    ID              shift and go to state 13
    IF              shift and go to state 15
    FUNCTION        shift and go to state 20
    ECHO            shift and go to state 21
    PRINT           shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 28
    INSERT          shift and go to state 30
    ARRAY_MAP       shift and go to state 31
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    LPAREN          shift and go to state 16
    CADENA          shift and go to state 29
    BOOLEAN         shift and go to state 33

    expcmp                         shift and go to state 17
    sentencias                     shift and go to state 218
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    heap                           shift and go to state 11
    array_map                      shift and go to state 12
    valor                          shift and go to state 14
    expcmplog                      shift and go to state 18
    sort                           shift and go to state 19
    expresionmat                   shift and go to state 27

state 216

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 64 (repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 64 (repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 64 (repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 64 (repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .)


state 217

    (55) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE . RLLAVE

    RLLAVE          shift and go to state 219


state 218

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 220


state 219

    (55) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE .

    FIN             reduce using rule 55 (excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE .)
    ID              reduce using rule 55 (excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE .)
    RLLAVE          reduce using rule 55 (excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE .)
    RETURN          reduce using rule 55 (excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE .)


state 220

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 36 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 36 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 36 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 36 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BOOLEAN_OR in state 190 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN_AND in state 190 resolved as shift
WARNING: shift/reduce conflict for AND in state 190 resolved as shift
WARNING: shift/reduce conflict for OR in state 190 resolved as shift
