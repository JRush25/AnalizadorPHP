Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> INICIO sentencias FIN
Rule 2     sentencias -> asignacion
Rule 3     sentencias -> comparacion
Rule 4     sentencias -> funcion
Rule 5     sentencias -> impresion
Rule 6     sentencias -> repeticion
Rule 7     sentencias -> expresion
Rule 8     sentencias -> excepcion
Rule 9     sentencias -> estdatos
Rule 10    asignacion -> ID ASIGNACION valor PCOMA
Rule 11    asignacion -> ID REF ID PCOMA
Rule 12    asignacion -> ID ASIGNACION estdatos PCOMA
Rule 13    asignacion -> ID ASIGNACION expresion PCOMA
Rule 14    valor -> ID
Rule 15    valor -> NUMBER
Rule 16    valor -> BOOLEAN
Rule 17    valor -> CADENA
Rule 18    opcomparacion -> IGUAL
Rule 19    opcomparacion -> MAYOR
Rule 20    opcomparacion -> MENOR
Rule 21    opcomparacion -> MAYORIGUAL
Rule 22    opcomparacion -> MENORIGUAL
Rule 23    opcomparacion -> IS_NOT_EQUAL
Rule 24    expcmp -> valor opcomparacion valor
Rule 25    expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
Rule 26    expcmplog -> expcmp oplog expcmp
Rule 27    expcmplog -> expcmp oplog expcmplog
Rule 28    oplog -> AND
Rule 29    oplog -> OR
Rule 30    comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
Rule 31    comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
Rule 32    comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
Rule 33    comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
Rule 34    array -> ARRAY LPAREN contenido RPAREN
Rule 35    contenido -> valor DOUBLE_ARROW valor
Rule 36    contenido -> valor DOUBLE_ARROW valor COMA contenido
Rule 37    contenido -> valor
Rule 38    contenido -> valor COMA contenido
Rule 39    sort -> SORT LPAREN ID RPAREN PCOMA
Rule 40    estdatos -> array
Rule 41    estdatos -> array_map
Rule 42    estdatos -> heap
Rule 43    expresionmat -> NUMBER operadormat NUMBER
Rule 44    operadormat -> PLUS
Rule 45    operadormat -> MINUS
Rule 46    operadormat -> TIMES
Rule 47    operadormat -> DIVIDE
Rule 48    operadormat -> MOD
Rule 49    expresion -> expresionmat
Rule 50    expresion -> expcmplog
Rule 51    funcion -> sort
Rule 52    funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
Rule 53    funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
Rule 54    args -> ID
Rule 55    args -> ID args
Rule 56    excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
Rule 57    impresion -> ECHO valor PCOMA
Rule 58    impresion -> PRINT valor PCOMA
Rule 59    impresion -> PRINT expresionmat PCOMA
Rule 60    repeticionrep -> MAYOR
Rule 61    repeticionrep -> MENOR
Rule 62    repeticionrep -> MAYORIGUAL
Rule 63    repeticionrep -> MENORIGUAL
Rule 64    actualizar -> INCREMENTO
Rule 65    actualizar -> DECREMENTO
Rule 66    repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
Rule 67    repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
Rule 68    repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
Rule 69    array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
Rule 70    heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
Rule 71    heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

Terminals, with rules where they appear

AND                  : 28
ARRAY                : 34 71
ARRAY_MAP            : 69
ASIGNACION           : 10 12 13 66
BOOLEAN              : 16
CADENA               : 17 56
CATCH                : 56
COMA                 : 36 38 56 69 70
DECREMENTO           : 65
DIVIDE               : 47
DO                   : 68
DOUBLE_ARROW         : 35 36 71
ECHO                 : 56 57
ELSE                 : 32 33
ELSEIF               : 33
EXCEPTION            : 56
FIN                  : 1
FOR                  : 66
FUNCTION             : 52 53
ID                   : 10 11 11 12 13 14 39 52 53 54 55 56 56 66 66 66 67 67 68 68
IF                   : 30 31 32 33
IGUAL                : 18
INCREMENTO           : 64
INICIO               : 1
INSERT               : 70 71
IS_NOT_EQUAL         : 23
LCORCH               : 70
LLLAVE               : 30 31 32 32 33 33 33 52 53 56 56 66 67 68
LPAREN               : 25 25 30 31 32 33 33 34 39 52 53 56 66 67 68 69 70 71 71
MAYOR                : 19 60
MAYORIGUAL           : 21 62
MENOR                : 20 61
MENORIGUAL           : 22 63
MINUS                : 45
MOD                  : 48
NFUNCION             : 52 53
NUMBER               : 15 43 43 66 66 70 70 71
OR                   : 29
PCOMA                : 10 11 12 13 39 53 57 58 59 66 66 67 68 68 69 70 71
PLUS                 : 44
PRINT                : 58 59
RCORCH               : 70
REF                  : 11
RETURN               : 53
RLLAVE               : 30 31 32 32 33 33 33 52 53 56 56 66 67 68
RPAREN               : 25 25 30 31 32 33 33 34 39 52 53 56 66 67 68 69 70 71 71
SORT                 : 39
TIMES                : 46
TRY                  : 56
WHILE                : 67 68
error                : 

Nonterminals, with rules where they appear

actualizar           : 66 67 68
args                 : 52 53 55
array                : 40 69
array_map            : 41
asignacion           : 2
comparacion          : 3
contenido            : 34 36 38
estdatos             : 9 12
excepcion            : 8
expcmp               : 26 26 27 30 32 33 33
expcmplog            : 27 31 50
expresion            : 7 13
expresionmat         : 49 59
funcion              : 4 69
heap                 : 42
impresion            : 5
opcomparacion        : 24 25 25 67 68
operadormat          : 43
oplog                : 25 26 27
programa             : 0
repeticion           : 6
repeticionrep        : 66
sentencias           : 1 30 31 32 32 33 33 33 52 53 56 66 67 68
sort                 : 51
valor                : 10 24 24 25 25 25 25 35 35 36 36 37 38 53 57 58 67 68 71

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . INICIO sentencias FIN

    INICIO          shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> INICIO . sentencias FIN
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (30) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (31) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (51) funcion -> . sort
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (53) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (57) impresion -> . ECHO valor PCOMA
    (58) impresion -> . PRINT valor PCOMA
    (59) impresion -> . PRINT expresionmat PCOMA
    (66) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (67) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (68) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (49) expresion -> . expresionmat
    (50) expresion -> . expcmplog
    (56) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (40) estdatos -> . array
    (41) estdatos -> . array_map
    (42) estdatos -> . heap
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (34) array -> . ARRAY LPAREN contenido RPAREN
    (69) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (70) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (71) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    sentencias                     shift and go to state 3
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 3

    (1) programa -> INICIO sentencias . FIN

    FIN             shift and go to state 37


state 4

    (2) sentencias -> asignacion .

    FIN             reduce using rule 2 (sentencias -> asignacion .)
    ID              reduce using rule 2 (sentencias -> asignacion .)
    RLLAVE          reduce using rule 2 (sentencias -> asignacion .)
    RETURN          reduce using rule 2 (sentencias -> asignacion .)


state 5

    (3) sentencias -> comparacion .

    FIN             reduce using rule 3 (sentencias -> comparacion .)
    ID              reduce using rule 3 (sentencias -> comparacion .)
    RLLAVE          reduce using rule 3 (sentencias -> comparacion .)
    RETURN          reduce using rule 3 (sentencias -> comparacion .)


state 6

    (4) sentencias -> funcion .

    FIN             reduce using rule 4 (sentencias -> funcion .)
    ID              reduce using rule 4 (sentencias -> funcion .)
    RLLAVE          reduce using rule 4 (sentencias -> funcion .)
    RETURN          reduce using rule 4 (sentencias -> funcion .)


state 7

    (5) sentencias -> impresion .

    FIN             reduce using rule 5 (sentencias -> impresion .)
    ID              reduce using rule 5 (sentencias -> impresion .)
    RLLAVE          reduce using rule 5 (sentencias -> impresion .)
    RETURN          reduce using rule 5 (sentencias -> impresion .)


state 8

    (6) sentencias -> repeticion .

    FIN             reduce using rule 6 (sentencias -> repeticion .)
    ID              reduce using rule 6 (sentencias -> repeticion .)
    RLLAVE          reduce using rule 6 (sentencias -> repeticion .)
    RETURN          reduce using rule 6 (sentencias -> repeticion .)


state 9

    (7) sentencias -> expresion .

    FIN             reduce using rule 7 (sentencias -> expresion .)
    ID              reduce using rule 7 (sentencias -> expresion .)
    RLLAVE          reduce using rule 7 (sentencias -> expresion .)
    RETURN          reduce using rule 7 (sentencias -> expresion .)


state 10

    (8) sentencias -> excepcion .

    FIN             reduce using rule 8 (sentencias -> excepcion .)
    ID              reduce using rule 8 (sentencias -> excepcion .)
    RLLAVE          reduce using rule 8 (sentencias -> excepcion .)
    RETURN          reduce using rule 8 (sentencias -> excepcion .)


state 11

    (9) sentencias -> estdatos .

    FIN             reduce using rule 9 (sentencias -> estdatos .)
    ID              reduce using rule 9 (sentencias -> estdatos .)
    RLLAVE          reduce using rule 9 (sentencias -> estdatos .)
    RETURN          reduce using rule 9 (sentencias -> estdatos .)


state 12

    (10) asignacion -> ID . ASIGNACION valor PCOMA
    (11) asignacion -> ID . REF ID PCOMA
    (12) asignacion -> ID . ASIGNACION estdatos PCOMA
    (13) asignacion -> ID . ASIGNACION expresion PCOMA
    (14) valor -> ID .

    ASIGNACION      shift and go to state 38
    REF             shift and go to state 39
    IGUAL           reduce using rule 14 (valor -> ID .)
    MAYOR           reduce using rule 14 (valor -> ID .)
    MENOR           reduce using rule 14 (valor -> ID .)
    MAYORIGUAL      reduce using rule 14 (valor -> ID .)
    MENORIGUAL      reduce using rule 14 (valor -> ID .)
    IS_NOT_EQUAL    reduce using rule 14 (valor -> ID .)


state 13

    (24) expcmp -> valor . opcomparacion valor
    (18) opcomparacion -> . IGUAL
    (19) opcomparacion -> . MAYOR
    (20) opcomparacion -> . MENOR
    (21) opcomparacion -> . MAYORIGUAL
    (22) opcomparacion -> . MENORIGUAL
    (23) opcomparacion -> . IS_NOT_EQUAL

    IGUAL           shift and go to state 41
    MAYOR           shift and go to state 42
    MENOR           shift and go to state 43
    MAYORIGUAL      shift and go to state 44
    MENORIGUAL      shift and go to state 45
    IS_NOT_EQUAL    shift and go to state 46

    opcomparacion                  shift and go to state 40

state 14

    (30) comparacion -> IF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (31) comparacion -> IF . LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (32) comparacion -> IF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> IF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LPAREN          shift and go to state 47


state 15

    (25) expcmp -> LPAREN . valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 49
    NUMBER          shift and go to state 50
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 48

state 16

    (26) expcmplog -> expcmp . oplog expcmp
    (27) expcmplog -> expcmp . oplog expcmplog
    (28) oplog -> . AND
    (29) oplog -> . OR

    AND             shift and go to state 52
    OR              shift and go to state 53

    oplog                          shift and go to state 51

state 17

    (50) expresion -> expcmplog .

    FIN             reduce using rule 50 (expresion -> expcmplog .)
    PCOMA           reduce using rule 50 (expresion -> expcmplog .)
    ID              reduce using rule 50 (expresion -> expcmplog .)
    RLLAVE          reduce using rule 50 (expresion -> expcmplog .)
    RETURN          reduce using rule 50 (expresion -> expcmplog .)


state 18

    (51) funcion -> sort .

    FIN             reduce using rule 51 (funcion -> sort .)
    ID              reduce using rule 51 (funcion -> sort .)
    RLLAVE          reduce using rule 51 (funcion -> sort .)
    COMA            reduce using rule 51 (funcion -> sort .)
    RETURN          reduce using rule 51 (funcion -> sort .)


state 19

    (52) funcion -> FUNCTION . NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (53) funcion -> FUNCTION . NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE

    NFUNCION        shift and go to state 54


state 20

    (57) impresion -> ECHO . valor PCOMA
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 49
    NUMBER          shift and go to state 50
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 55

state 21

    (58) impresion -> PRINT . valor PCOMA
    (59) impresion -> PRINT . expresionmat PCOMA
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA
    (43) expresionmat -> . NUMBER operadormat NUMBER

    ID              shift and go to state 49
    NUMBER          shift and go to state 58
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 56
    expresionmat                   shift and go to state 57

state 22

    (49) expresion -> expresionmat .

    FIN             reduce using rule 49 (expresion -> expresionmat .)
    PCOMA           reduce using rule 49 (expresion -> expresionmat .)
    ID              reduce using rule 49 (expresion -> expresionmat .)
    RLLAVE          reduce using rule 49 (expresion -> expresionmat .)
    RETURN          reduce using rule 49 (expresion -> expresionmat .)


state 23

    (66) repeticion -> FOR . LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    LPAREN          shift and go to state 59


state 24

    (43) expresionmat -> NUMBER . operadormat NUMBER
    (15) valor -> NUMBER .
    (44) operadormat -> . PLUS
    (45) operadormat -> . MINUS
    (46) operadormat -> . TIMES
    (47) operadormat -> . DIVIDE
    (48) operadormat -> . MOD

    IGUAL           reduce using rule 15 (valor -> NUMBER .)
    MAYOR           reduce using rule 15 (valor -> NUMBER .)
    MENOR           reduce using rule 15 (valor -> NUMBER .)
    MAYORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    MENORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    IS_NOT_EQUAL    reduce using rule 15 (valor -> NUMBER .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65

    operadormat                    shift and go to state 60

state 25

    (67) repeticion -> WHILE . LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE

    LPAREN          shift and go to state 66


state 26

    (68) repeticion -> DO . LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    LLLAVE          shift and go to state 67


state 27

    (56) excepcion -> TRY . LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE

    LLLAVE          shift and go to state 68


state 28

    (17) valor -> CADENA .

    IGUAL           reduce using rule 17 (valor -> CADENA .)
    MAYOR           reduce using rule 17 (valor -> CADENA .)
    MENOR           reduce using rule 17 (valor -> CADENA .)
    MAYORIGUAL      reduce using rule 17 (valor -> CADENA .)
    MENORIGUAL      reduce using rule 17 (valor -> CADENA .)
    IS_NOT_EQUAL    reduce using rule 17 (valor -> CADENA .)
    PCOMA           reduce using rule 17 (valor -> CADENA .)
    AND             reduce using rule 17 (valor -> CADENA .)
    OR              reduce using rule 17 (valor -> CADENA .)
    RPAREN          reduce using rule 17 (valor -> CADENA .)
    FIN             reduce using rule 17 (valor -> CADENA .)
    ID              reduce using rule 17 (valor -> CADENA .)
    RLLAVE          reduce using rule 17 (valor -> CADENA .)
    RETURN          reduce using rule 17 (valor -> CADENA .)
    DOUBLE_ARROW    reduce using rule 17 (valor -> CADENA .)
    COMA            reduce using rule 17 (valor -> CADENA .)


state 29

    (40) estdatos -> array .

    FIN             reduce using rule 40 (estdatos -> array .)
    PCOMA           reduce using rule 40 (estdatos -> array .)
    ID              reduce using rule 40 (estdatos -> array .)
    RLLAVE          reduce using rule 40 (estdatos -> array .)
    RETURN          reduce using rule 40 (estdatos -> array .)


state 30

    (41) estdatos -> array_map .

    FIN             reduce using rule 41 (estdatos -> array_map .)
    PCOMA           reduce using rule 41 (estdatos -> array_map .)
    ID              reduce using rule 41 (estdatos -> array_map .)
    RLLAVE          reduce using rule 41 (estdatos -> array_map .)
    RETURN          reduce using rule 41 (estdatos -> array_map .)


state 31

    (42) estdatos -> heap .

    FIN             reduce using rule 42 (estdatos -> heap .)
    PCOMA           reduce using rule 42 (estdatos -> heap .)
    ID              reduce using rule 42 (estdatos -> heap .)
    RLLAVE          reduce using rule 42 (estdatos -> heap .)
    RETURN          reduce using rule 42 (estdatos -> heap .)


state 32

    (39) sort -> SORT . LPAREN ID RPAREN PCOMA

    LPAREN          shift and go to state 69


state 33

    (34) array -> ARRAY . LPAREN contenido RPAREN

    LPAREN          shift and go to state 70


state 34

    (69) array_map -> ARRAY_MAP . LPAREN funcion COMA array RPAREN PCOMA

    LPAREN          shift and go to state 71


state 35

    (70) heap -> INSERT . LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (71) heap -> INSERT . LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

    LPAREN          shift and go to state 72


state 36

    (16) valor -> BOOLEAN .

    IGUAL           reduce using rule 16 (valor -> BOOLEAN .)
    MAYOR           reduce using rule 16 (valor -> BOOLEAN .)
    MENOR           reduce using rule 16 (valor -> BOOLEAN .)
    MAYORIGUAL      reduce using rule 16 (valor -> BOOLEAN .)
    MENORIGUAL      reduce using rule 16 (valor -> BOOLEAN .)
    IS_NOT_EQUAL    reduce using rule 16 (valor -> BOOLEAN .)
    PCOMA           reduce using rule 16 (valor -> BOOLEAN .)
    AND             reduce using rule 16 (valor -> BOOLEAN .)
    OR              reduce using rule 16 (valor -> BOOLEAN .)
    RPAREN          reduce using rule 16 (valor -> BOOLEAN .)
    FIN             reduce using rule 16 (valor -> BOOLEAN .)
    ID              reduce using rule 16 (valor -> BOOLEAN .)
    RLLAVE          reduce using rule 16 (valor -> BOOLEAN .)
    RETURN          reduce using rule 16 (valor -> BOOLEAN .)
    DOUBLE_ARROW    reduce using rule 16 (valor -> BOOLEAN .)
    COMA            reduce using rule 16 (valor -> BOOLEAN .)


state 37

    (1) programa -> INICIO sentencias FIN .

    $end            reduce using rule 1 (programa -> INICIO sentencias FIN .)


state 38

    (10) asignacion -> ID ASIGNACION . valor PCOMA
    (12) asignacion -> ID ASIGNACION . estdatos PCOMA
    (13) asignacion -> ID ASIGNACION . expresion PCOMA
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA
    (40) estdatos -> . array
    (41) estdatos -> . array_map
    (42) estdatos -> . heap
    (49) expresion -> . expresionmat
    (50) expresion -> . expcmplog
    (34) array -> . ARRAY LPAREN contenido RPAREN
    (69) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (70) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (71) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN

    ID              shift and go to state 49
    NUMBER          shift and go to state 58
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15

    valor                          shift and go to state 73
    estdatos                       shift and go to state 74
    expresion                      shift and go to state 75
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31
    expresionmat                   shift and go to state 22
    expcmplog                      shift and go to state 17
    expcmp                         shift and go to state 16

state 39

    (11) asignacion -> ID REF . ID PCOMA

    ID              shift and go to state 76


state 40

    (24) expcmp -> valor opcomparacion . valor
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 49
    NUMBER          shift and go to state 50
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 77

state 41

    (18) opcomparacion -> IGUAL .

    ID              reduce using rule 18 (opcomparacion -> IGUAL .)
    NUMBER          reduce using rule 18 (opcomparacion -> IGUAL .)
    BOOLEAN         reduce using rule 18 (opcomparacion -> IGUAL .)
    CADENA          reduce using rule 18 (opcomparacion -> IGUAL .)


state 42

    (19) opcomparacion -> MAYOR .

    ID              reduce using rule 19 (opcomparacion -> MAYOR .)
    NUMBER          reduce using rule 19 (opcomparacion -> MAYOR .)
    BOOLEAN         reduce using rule 19 (opcomparacion -> MAYOR .)
    CADENA          reduce using rule 19 (opcomparacion -> MAYOR .)


state 43

    (20) opcomparacion -> MENOR .

    ID              reduce using rule 20 (opcomparacion -> MENOR .)
    NUMBER          reduce using rule 20 (opcomparacion -> MENOR .)
    BOOLEAN         reduce using rule 20 (opcomparacion -> MENOR .)
    CADENA          reduce using rule 20 (opcomparacion -> MENOR .)


state 44

    (21) opcomparacion -> MAYORIGUAL .

    ID              reduce using rule 21 (opcomparacion -> MAYORIGUAL .)
    NUMBER          reduce using rule 21 (opcomparacion -> MAYORIGUAL .)
    BOOLEAN         reduce using rule 21 (opcomparacion -> MAYORIGUAL .)
    CADENA          reduce using rule 21 (opcomparacion -> MAYORIGUAL .)


state 45

    (22) opcomparacion -> MENORIGUAL .

    ID              reduce using rule 22 (opcomparacion -> MENORIGUAL .)
    NUMBER          reduce using rule 22 (opcomparacion -> MENORIGUAL .)
    BOOLEAN         reduce using rule 22 (opcomparacion -> MENORIGUAL .)
    CADENA          reduce using rule 22 (opcomparacion -> MENORIGUAL .)


state 46

    (23) opcomparacion -> IS_NOT_EQUAL .

    ID              reduce using rule 23 (opcomparacion -> IS_NOT_EQUAL .)
    NUMBER          reduce using rule 23 (opcomparacion -> IS_NOT_EQUAL .)
    BOOLEAN         reduce using rule 23 (opcomparacion -> IS_NOT_EQUAL .)
    CADENA          reduce using rule 23 (opcomparacion -> IS_NOT_EQUAL .)


state 47

    (30) comparacion -> IF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE
    (31) comparacion -> IF LPAREN . expcmplog RPAREN LLLAVE sentencias RLLAVE
    (32) comparacion -> IF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> IF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    LPAREN          shift and go to state 15
    ID              shift and go to state 49
    NUMBER          shift and go to state 50
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    expcmp                         shift and go to state 78
    expcmplog                      shift and go to state 79
    valor                          shift and go to state 13

state 48

    (25) expcmp -> LPAREN valor . opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (18) opcomparacion -> . IGUAL
    (19) opcomparacion -> . MAYOR
    (20) opcomparacion -> . MENOR
    (21) opcomparacion -> . MAYORIGUAL
    (22) opcomparacion -> . MENORIGUAL
    (23) opcomparacion -> . IS_NOT_EQUAL

    IGUAL           shift and go to state 41
    MAYOR           shift and go to state 42
    MENOR           shift and go to state 43
    MAYORIGUAL      shift and go to state 44
    MENORIGUAL      shift and go to state 45
    IS_NOT_EQUAL    shift and go to state 46

    opcomparacion                  shift and go to state 80

state 49

    (14) valor -> ID .

    IGUAL           reduce using rule 14 (valor -> ID .)
    MAYOR           reduce using rule 14 (valor -> ID .)
    MENOR           reduce using rule 14 (valor -> ID .)
    MAYORIGUAL      reduce using rule 14 (valor -> ID .)
    MENORIGUAL      reduce using rule 14 (valor -> ID .)
    IS_NOT_EQUAL    reduce using rule 14 (valor -> ID .)
    PCOMA           reduce using rule 14 (valor -> ID .)
    AND             reduce using rule 14 (valor -> ID .)
    OR              reduce using rule 14 (valor -> ID .)
    RPAREN          reduce using rule 14 (valor -> ID .)
    FIN             reduce using rule 14 (valor -> ID .)
    ID              reduce using rule 14 (valor -> ID .)
    RLLAVE          reduce using rule 14 (valor -> ID .)
    RETURN          reduce using rule 14 (valor -> ID .)
    DOUBLE_ARROW    reduce using rule 14 (valor -> ID .)
    COMA            reduce using rule 14 (valor -> ID .)


state 50

    (15) valor -> NUMBER .

    IGUAL           reduce using rule 15 (valor -> NUMBER .)
    MAYOR           reduce using rule 15 (valor -> NUMBER .)
    MENOR           reduce using rule 15 (valor -> NUMBER .)
    MAYORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    MENORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    IS_NOT_EQUAL    reduce using rule 15 (valor -> NUMBER .)
    PCOMA           reduce using rule 15 (valor -> NUMBER .)
    AND             reduce using rule 15 (valor -> NUMBER .)
    OR              reduce using rule 15 (valor -> NUMBER .)
    RPAREN          reduce using rule 15 (valor -> NUMBER .)
    FIN             reduce using rule 15 (valor -> NUMBER .)
    ID              reduce using rule 15 (valor -> NUMBER .)
    RLLAVE          reduce using rule 15 (valor -> NUMBER .)
    RETURN          reduce using rule 15 (valor -> NUMBER .)
    DOUBLE_ARROW    reduce using rule 15 (valor -> NUMBER .)
    COMA            reduce using rule 15 (valor -> NUMBER .)


state 51

    (26) expcmplog -> expcmp oplog . expcmp
    (27) expcmplog -> expcmp oplog . expcmplog
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    LPAREN          shift and go to state 15
    ID              shift and go to state 49
    NUMBER          shift and go to state 50
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    expcmp                         shift and go to state 81
    expcmplog                      shift and go to state 82
    valor                          shift and go to state 13

state 52

    (28) oplog -> AND .

    LPAREN          reduce using rule 28 (oplog -> AND .)
    ID              reduce using rule 28 (oplog -> AND .)
    NUMBER          reduce using rule 28 (oplog -> AND .)
    BOOLEAN         reduce using rule 28 (oplog -> AND .)
    CADENA          reduce using rule 28 (oplog -> AND .)


state 53

    (29) oplog -> OR .

    LPAREN          reduce using rule 29 (oplog -> OR .)
    ID              reduce using rule 29 (oplog -> OR .)
    NUMBER          reduce using rule 29 (oplog -> OR .)
    BOOLEAN         reduce using rule 29 (oplog -> OR .)
    CADENA          reduce using rule 29 (oplog -> OR .)


state 54

    (52) funcion -> FUNCTION NFUNCION . ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (53) funcion -> FUNCTION NFUNCION . ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE

    ID              shift and go to state 83


state 55

    (57) impresion -> ECHO valor . PCOMA

    PCOMA           shift and go to state 84


state 56

    (58) impresion -> PRINT valor . PCOMA

    PCOMA           shift and go to state 85


state 57

    (59) impresion -> PRINT expresionmat . PCOMA

    PCOMA           shift and go to state 86


state 58

    (15) valor -> NUMBER .
    (43) expresionmat -> NUMBER . operadormat NUMBER
    (44) operadormat -> . PLUS
    (45) operadormat -> . MINUS
    (46) operadormat -> . TIMES
    (47) operadormat -> . DIVIDE
    (48) operadormat -> . MOD

    PCOMA           reduce using rule 15 (valor -> NUMBER .)
    IGUAL           reduce using rule 15 (valor -> NUMBER .)
    MAYOR           reduce using rule 15 (valor -> NUMBER .)
    MENOR           reduce using rule 15 (valor -> NUMBER .)
    MAYORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    MENORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    IS_NOT_EQUAL    reduce using rule 15 (valor -> NUMBER .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65

    operadormat                    shift and go to state 60

state 59

    (66) repeticion -> FOR LPAREN . ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    ID              shift and go to state 87


state 60

    (43) expresionmat -> NUMBER operadormat . NUMBER

    NUMBER          shift and go to state 88


state 61

    (44) operadormat -> PLUS .

    NUMBER          reduce using rule 44 (operadormat -> PLUS .)


state 62

    (45) operadormat -> MINUS .

    NUMBER          reduce using rule 45 (operadormat -> MINUS .)


state 63

    (46) operadormat -> TIMES .

    NUMBER          reduce using rule 46 (operadormat -> TIMES .)


state 64

    (47) operadormat -> DIVIDE .

    NUMBER          reduce using rule 47 (operadormat -> DIVIDE .)


state 65

    (48) operadormat -> MOD .

    NUMBER          reduce using rule 48 (operadormat -> MOD .)


state 66

    (67) repeticion -> WHILE LPAREN . ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE

    ID              shift and go to state 89


state 67

    (68) repeticion -> DO LLLAVE . sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (30) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (31) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (51) funcion -> . sort
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (53) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (57) impresion -> . ECHO valor PCOMA
    (58) impresion -> . PRINT valor PCOMA
    (59) impresion -> . PRINT expresionmat PCOMA
    (66) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (67) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (68) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (49) expresion -> . expresionmat
    (50) expresion -> . expcmplog
    (56) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (40) estdatos -> . array
    (41) estdatos -> . array_map
    (42) estdatos -> . heap
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (34) array -> . ARRAY LPAREN contenido RPAREN
    (69) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (70) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (71) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    sentencias                     shift and go to state 90
    valor                          shift and go to state 13
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 68

    (56) excepcion -> TRY LLLAVE . sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (30) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (31) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (51) funcion -> . sort
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (53) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (57) impresion -> . ECHO valor PCOMA
    (58) impresion -> . PRINT valor PCOMA
    (59) impresion -> . PRINT expresionmat PCOMA
    (66) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (67) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (68) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (49) expresion -> . expresionmat
    (50) expresion -> . expcmplog
    (56) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (40) estdatos -> . array
    (41) estdatos -> . array_map
    (42) estdatos -> . heap
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (34) array -> . ARRAY LPAREN contenido RPAREN
    (69) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (70) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (71) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    sentencias                     shift and go to state 91
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 69

    (39) sort -> SORT LPAREN . ID RPAREN PCOMA

    ID              shift and go to state 92


state 70

    (34) array -> ARRAY LPAREN . contenido RPAREN
    (35) contenido -> . valor DOUBLE_ARROW valor
    (36) contenido -> . valor DOUBLE_ARROW valor COMA contenido
    (37) contenido -> . valor
    (38) contenido -> . valor COMA contenido
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 49
    NUMBER          shift and go to state 50
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    contenido                      shift and go to state 93
    valor                          shift and go to state 94

state 71

    (69) array_map -> ARRAY_MAP LPAREN . funcion COMA array RPAREN PCOMA
    (51) funcion -> . sort
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (53) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA

    FUNCTION        shift and go to state 19
    SORT            shift and go to state 32

    funcion                        shift and go to state 95
    sort                           shift and go to state 18

state 72

    (70) heap -> INSERT LPAREN . LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (71) heap -> INSERT LPAREN . ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

    LCORCH          shift and go to state 96
    ARRAY           shift and go to state 97


state 73

    (10) asignacion -> ID ASIGNACION valor . PCOMA
    (24) expcmp -> valor . opcomparacion valor
    (18) opcomparacion -> . IGUAL
    (19) opcomparacion -> . MAYOR
    (20) opcomparacion -> . MENOR
    (21) opcomparacion -> . MAYORIGUAL
    (22) opcomparacion -> . MENORIGUAL
    (23) opcomparacion -> . IS_NOT_EQUAL

    PCOMA           shift and go to state 98
    IGUAL           shift and go to state 41
    MAYOR           shift and go to state 42
    MENOR           shift and go to state 43
    MAYORIGUAL      shift and go to state 44
    MENORIGUAL      shift and go to state 45
    IS_NOT_EQUAL    shift and go to state 46

    opcomparacion                  shift and go to state 40

state 74

    (12) asignacion -> ID ASIGNACION estdatos . PCOMA

    PCOMA           shift and go to state 99


state 75

    (13) asignacion -> ID ASIGNACION expresion . PCOMA

    PCOMA           shift and go to state 100


state 76

    (11) asignacion -> ID REF ID . PCOMA

    PCOMA           shift and go to state 101


state 77

    (24) expcmp -> valor opcomparacion valor .

    AND             reduce using rule 24 (expcmp -> valor opcomparacion valor .)
    OR              reduce using rule 24 (expcmp -> valor opcomparacion valor .)
    RPAREN          reduce using rule 24 (expcmp -> valor opcomparacion valor .)
    FIN             reduce using rule 24 (expcmp -> valor opcomparacion valor .)
    PCOMA           reduce using rule 24 (expcmp -> valor opcomparacion valor .)
    ID              reduce using rule 24 (expcmp -> valor opcomparacion valor .)
    RLLAVE          reduce using rule 24 (expcmp -> valor opcomparacion valor .)
    RETURN          reduce using rule 24 (expcmp -> valor opcomparacion valor .)


state 78

    (30) comparacion -> IF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE
    (32) comparacion -> IF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> IF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (26) expcmplog -> expcmp . oplog expcmp
    (27) expcmplog -> expcmp . oplog expcmplog
    (28) oplog -> . AND
    (29) oplog -> . OR

    RPAREN          shift and go to state 102
    AND             shift and go to state 52
    OR              shift and go to state 53

    oplog                          shift and go to state 51

state 79

    (31) comparacion -> IF LPAREN expcmplog . RPAREN LLLAVE sentencias RLLAVE

    RPAREN          shift and go to state 103


state 80

    (25) expcmp -> LPAREN valor opcomparacion . valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 49
    NUMBER          shift and go to state 50
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 104

state 81

    (26) expcmplog -> expcmp oplog expcmp .
    (26) expcmplog -> expcmp . oplog expcmp
    (27) expcmplog -> expcmp . oplog expcmplog
    (28) oplog -> . AND
    (29) oplog -> . OR

    FIN             reduce using rule 26 (expcmplog -> expcmp oplog expcmp .)
    PCOMA           reduce using rule 26 (expcmplog -> expcmp oplog expcmp .)
    RPAREN          reduce using rule 26 (expcmplog -> expcmp oplog expcmp .)
    ID              reduce using rule 26 (expcmplog -> expcmp oplog expcmp .)
    RLLAVE          reduce using rule 26 (expcmplog -> expcmp oplog expcmp .)
    RETURN          reduce using rule 26 (expcmplog -> expcmp oplog expcmp .)
    AND             shift and go to state 52
    OR              shift and go to state 53

    oplog                          shift and go to state 51

state 82

    (27) expcmplog -> expcmp oplog expcmplog .

    FIN             reduce using rule 27 (expcmplog -> expcmp oplog expcmplog .)
    PCOMA           reduce using rule 27 (expcmplog -> expcmp oplog expcmplog .)
    RPAREN          reduce using rule 27 (expcmplog -> expcmp oplog expcmplog .)
    ID              reduce using rule 27 (expcmplog -> expcmp oplog expcmplog .)
    RLLAVE          reduce using rule 27 (expcmplog -> expcmp oplog expcmplog .)
    RETURN          reduce using rule 27 (expcmplog -> expcmp oplog expcmplog .)


state 83

    (52) funcion -> FUNCTION NFUNCION ID . LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (53) funcion -> FUNCTION NFUNCION ID . LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE

    LPAREN          shift and go to state 105


state 84

    (57) impresion -> ECHO valor PCOMA .

    FIN             reduce using rule 57 (impresion -> ECHO valor PCOMA .)
    ID              reduce using rule 57 (impresion -> ECHO valor PCOMA .)
    RLLAVE          reduce using rule 57 (impresion -> ECHO valor PCOMA .)
    RETURN          reduce using rule 57 (impresion -> ECHO valor PCOMA .)


state 85

    (58) impresion -> PRINT valor PCOMA .

    FIN             reduce using rule 58 (impresion -> PRINT valor PCOMA .)
    ID              reduce using rule 58 (impresion -> PRINT valor PCOMA .)
    RLLAVE          reduce using rule 58 (impresion -> PRINT valor PCOMA .)
    RETURN          reduce using rule 58 (impresion -> PRINT valor PCOMA .)


state 86

    (59) impresion -> PRINT expresionmat PCOMA .

    FIN             reduce using rule 59 (impresion -> PRINT expresionmat PCOMA .)
    ID              reduce using rule 59 (impresion -> PRINT expresionmat PCOMA .)
    RLLAVE          reduce using rule 59 (impresion -> PRINT expresionmat PCOMA .)
    RETURN          reduce using rule 59 (impresion -> PRINT expresionmat PCOMA .)


state 87

    (66) repeticion -> FOR LPAREN ID . ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    ASIGNACION      shift and go to state 106


state 88

    (43) expresionmat -> NUMBER operadormat NUMBER .

    FIN             reduce using rule 43 (expresionmat -> NUMBER operadormat NUMBER .)
    PCOMA           reduce using rule 43 (expresionmat -> NUMBER operadormat NUMBER .)
    ID              reduce using rule 43 (expresionmat -> NUMBER operadormat NUMBER .)
    RLLAVE          reduce using rule 43 (expresionmat -> NUMBER operadormat NUMBER .)
    RETURN          reduce using rule 43 (expresionmat -> NUMBER operadormat NUMBER .)


state 89

    (67) repeticion -> WHILE LPAREN ID . opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (18) opcomparacion -> . IGUAL
    (19) opcomparacion -> . MAYOR
    (20) opcomparacion -> . MENOR
    (21) opcomparacion -> . MAYORIGUAL
    (22) opcomparacion -> . MENORIGUAL
    (23) opcomparacion -> . IS_NOT_EQUAL

    IGUAL           shift and go to state 41
    MAYOR           shift and go to state 42
    MENOR           shift and go to state 43
    MAYORIGUAL      shift and go to state 44
    MENORIGUAL      shift and go to state 45
    IS_NOT_EQUAL    shift and go to state 46

    opcomparacion                  shift and go to state 107

state 90

    (68) repeticion -> DO LLLAVE sentencias . ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    ID              shift and go to state 108


state 91

    (56) excepcion -> TRY LLLAVE sentencias . RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE

    RLLAVE          shift and go to state 109


state 92

    (39) sort -> SORT LPAREN ID . RPAREN PCOMA

    RPAREN          shift and go to state 110


state 93

    (34) array -> ARRAY LPAREN contenido . RPAREN

    RPAREN          shift and go to state 111


state 94

    (35) contenido -> valor . DOUBLE_ARROW valor
    (36) contenido -> valor . DOUBLE_ARROW valor COMA contenido
    (37) contenido -> valor .
    (38) contenido -> valor . COMA contenido

    DOUBLE_ARROW    shift and go to state 112
    RPAREN          reduce using rule 37 (contenido -> valor .)
    COMA            shift and go to state 113


state 95

    (69) array_map -> ARRAY_MAP LPAREN funcion . COMA array RPAREN PCOMA

    COMA            shift and go to state 114


state 96

    (70) heap -> INSERT LPAREN LCORCH . NUMBER COMA NUMBER RCORCH RPAREN PCOMA

    NUMBER          shift and go to state 115


state 97

    (71) heap -> INSERT LPAREN ARRAY . LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

    LPAREN          shift and go to state 116


state 98

    (10) asignacion -> ID ASIGNACION valor PCOMA .

    FIN             reduce using rule 10 (asignacion -> ID ASIGNACION valor PCOMA .)
    ID              reduce using rule 10 (asignacion -> ID ASIGNACION valor PCOMA .)
    RLLAVE          reduce using rule 10 (asignacion -> ID ASIGNACION valor PCOMA .)
    RETURN          reduce using rule 10 (asignacion -> ID ASIGNACION valor PCOMA .)


state 99

    (12) asignacion -> ID ASIGNACION estdatos PCOMA .

    FIN             reduce using rule 12 (asignacion -> ID ASIGNACION estdatos PCOMA .)
    ID              reduce using rule 12 (asignacion -> ID ASIGNACION estdatos PCOMA .)
    RLLAVE          reduce using rule 12 (asignacion -> ID ASIGNACION estdatos PCOMA .)
    RETURN          reduce using rule 12 (asignacion -> ID ASIGNACION estdatos PCOMA .)


state 100

    (13) asignacion -> ID ASIGNACION expresion PCOMA .

    FIN             reduce using rule 13 (asignacion -> ID ASIGNACION expresion PCOMA .)
    ID              reduce using rule 13 (asignacion -> ID ASIGNACION expresion PCOMA .)
    RLLAVE          reduce using rule 13 (asignacion -> ID ASIGNACION expresion PCOMA .)
    RETURN          reduce using rule 13 (asignacion -> ID ASIGNACION expresion PCOMA .)


state 101

    (11) asignacion -> ID REF ID PCOMA .

    FIN             reduce using rule 11 (asignacion -> ID REF ID PCOMA .)
    ID              reduce using rule 11 (asignacion -> ID REF ID PCOMA .)
    RLLAVE          reduce using rule 11 (asignacion -> ID REF ID PCOMA .)
    RETURN          reduce using rule 11 (asignacion -> ID REF ID PCOMA .)


state 102

    (30) comparacion -> IF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE
    (32) comparacion -> IF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> IF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 117


state 103

    (31) comparacion -> IF LPAREN expcmplog RPAREN . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 118


state 104

    (25) expcmp -> LPAREN valor opcomparacion valor . RPAREN oplog LPAREN valor opcomparacion valor RPAREN

    RPAREN          shift and go to state 119


state 105

    (52) funcion -> FUNCTION NFUNCION ID LPAREN . args RPAREN LLLAVE sentencias RLLAVE
    (53) funcion -> FUNCTION NFUNCION ID LPAREN . args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (54) args -> . ID
    (55) args -> . ID args

    ID              shift and go to state 120

    args                           shift and go to state 121

state 106

    (66) repeticion -> FOR LPAREN ID ASIGNACION . NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    NUMBER          shift and go to state 122


state 107

    (67) repeticion -> WHILE LPAREN ID opcomparacion . valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 49
    NUMBER          shift and go to state 50
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 123

state 108

    (68) repeticion -> DO LLLAVE sentencias ID . actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (64) actualizar -> . INCREMENTO
    (65) actualizar -> . DECREMENTO

    INCREMENTO      shift and go to state 125
    DECREMENTO      shift and go to state 126

    actualizar                     shift and go to state 124

state 109

    (56) excepcion -> TRY LLLAVE sentencias RLLAVE . CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE

    CATCH           shift and go to state 127


state 110

    (39) sort -> SORT LPAREN ID RPAREN . PCOMA

    PCOMA           shift and go to state 128


state 111

    (34) array -> ARRAY LPAREN contenido RPAREN .

    FIN             reduce using rule 34 (array -> ARRAY LPAREN contenido RPAREN .)
    PCOMA           reduce using rule 34 (array -> ARRAY LPAREN contenido RPAREN .)
    ID              reduce using rule 34 (array -> ARRAY LPAREN contenido RPAREN .)
    RLLAVE          reduce using rule 34 (array -> ARRAY LPAREN contenido RPAREN .)
    RPAREN          reduce using rule 34 (array -> ARRAY LPAREN contenido RPAREN .)
    RETURN          reduce using rule 34 (array -> ARRAY LPAREN contenido RPAREN .)


state 112

    (35) contenido -> valor DOUBLE_ARROW . valor
    (36) contenido -> valor DOUBLE_ARROW . valor COMA contenido
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 49
    NUMBER          shift and go to state 50
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 129

state 113

    (38) contenido -> valor COMA . contenido
    (35) contenido -> . valor DOUBLE_ARROW valor
    (36) contenido -> . valor DOUBLE_ARROW valor COMA contenido
    (37) contenido -> . valor
    (38) contenido -> . valor COMA contenido
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 49
    NUMBER          shift and go to state 50
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 94
    contenido                      shift and go to state 130

state 114

    (69) array_map -> ARRAY_MAP LPAREN funcion COMA . array RPAREN PCOMA
    (34) array -> . ARRAY LPAREN contenido RPAREN

    ARRAY           shift and go to state 33

    array                          shift and go to state 131

state 115

    (70) heap -> INSERT LPAREN LCORCH NUMBER . COMA NUMBER RCORCH RPAREN PCOMA

    COMA            shift and go to state 132


state 116

    (71) heap -> INSERT LPAREN ARRAY LPAREN . valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 49
    NUMBER          shift and go to state 50
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 133

state 117

    (30) comparacion -> IF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE
    (32) comparacion -> IF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (30) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (31) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (51) funcion -> . sort
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (53) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (57) impresion -> . ECHO valor PCOMA
    (58) impresion -> . PRINT valor PCOMA
    (59) impresion -> . PRINT expresionmat PCOMA
    (66) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (67) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (68) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (49) expresion -> . expresionmat
    (50) expresion -> . expcmplog
    (56) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (40) estdatos -> . array
    (41) estdatos -> . array_map
    (42) estdatos -> . heap
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (34) array -> . ARRAY LPAREN contenido RPAREN
    (69) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (70) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (71) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    expcmp                         shift and go to state 16
    sentencias                     shift and go to state 134
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 118

    (31) comparacion -> IF LPAREN expcmplog RPAREN LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (30) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (31) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (51) funcion -> . sort
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (53) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (57) impresion -> . ECHO valor PCOMA
    (58) impresion -> . PRINT valor PCOMA
    (59) impresion -> . PRINT expresionmat PCOMA
    (66) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (67) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (68) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (49) expresion -> . expresionmat
    (50) expresion -> . expcmplog
    (56) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (40) estdatos -> . array
    (41) estdatos -> . array_map
    (42) estdatos -> . heap
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (34) array -> . ARRAY LPAREN contenido RPAREN
    (69) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (70) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (71) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    expcmplog                      shift and go to state 17
    sentencias                     shift and go to state 135
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmp                         shift and go to state 16
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 119

    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN . oplog LPAREN valor opcomparacion valor RPAREN
    (28) oplog -> . AND
    (29) oplog -> . OR

    AND             shift and go to state 52
    OR              shift and go to state 53

    oplog                          shift and go to state 136

state 120

    (54) args -> ID .
    (55) args -> ID . args
    (54) args -> . ID
    (55) args -> . ID args

    RPAREN          reduce using rule 54 (args -> ID .)
    ID              shift and go to state 120

    args                           shift and go to state 137

state 121

    (52) funcion -> FUNCTION NFUNCION ID LPAREN args . RPAREN LLLAVE sentencias RLLAVE
    (53) funcion -> FUNCTION NFUNCION ID LPAREN args . RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE

    RPAREN          shift and go to state 138


state 122

    (66) repeticion -> FOR LPAREN ID ASIGNACION NUMBER . PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    PCOMA           shift and go to state 139


state 123

    (67) repeticion -> WHILE LPAREN ID opcomparacion valor . RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE

    RPAREN          shift and go to state 140


state 124

    (68) repeticion -> DO LLLAVE sentencias ID actualizar . PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    PCOMA           shift and go to state 141


state 125

    (64) actualizar -> INCREMENTO .

    PCOMA           reduce using rule 64 (actualizar -> INCREMENTO .)
    RPAREN          reduce using rule 64 (actualizar -> INCREMENTO .)


state 126

    (65) actualizar -> DECREMENTO .

    PCOMA           reduce using rule 65 (actualizar -> DECREMENTO .)
    RPAREN          reduce using rule 65 (actualizar -> DECREMENTO .)


state 127

    (56) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH . LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE

    LPAREN          shift and go to state 142


state 128

    (39) sort -> SORT LPAREN ID RPAREN PCOMA .

    FIN             reduce using rule 39 (sort -> SORT LPAREN ID RPAREN PCOMA .)
    ID              reduce using rule 39 (sort -> SORT LPAREN ID RPAREN PCOMA .)
    RLLAVE          reduce using rule 39 (sort -> SORT LPAREN ID RPAREN PCOMA .)
    COMA            reduce using rule 39 (sort -> SORT LPAREN ID RPAREN PCOMA .)
    RETURN          reduce using rule 39 (sort -> SORT LPAREN ID RPAREN PCOMA .)


state 129

    (35) contenido -> valor DOUBLE_ARROW valor .
    (36) contenido -> valor DOUBLE_ARROW valor . COMA contenido

    RPAREN          reduce using rule 35 (contenido -> valor DOUBLE_ARROW valor .)
    COMA            shift and go to state 143


state 130

    (38) contenido -> valor COMA contenido .

    RPAREN          reduce using rule 38 (contenido -> valor COMA contenido .)


state 131

    (69) array_map -> ARRAY_MAP LPAREN funcion COMA array . RPAREN PCOMA

    RPAREN          shift and go to state 144


state 132

    (70) heap -> INSERT LPAREN LCORCH NUMBER COMA . NUMBER RCORCH RPAREN PCOMA

    NUMBER          shift and go to state 145


state 133

    (71) heap -> INSERT LPAREN ARRAY LPAREN valor . DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

    DOUBLE_ARROW    shift and go to state 146


state 134

    (30) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE
    (32) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    RLLAVE          shift and go to state 147


state 135

    (31) comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 148


state 136

    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog . LPAREN valor opcomparacion valor RPAREN

    LPAREN          shift and go to state 149


state 137

    (55) args -> ID args .

    RPAREN          reduce using rule 55 (args -> ID args .)


state 138

    (52) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN . LLLAVE sentencias RLLAVE
    (53) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN . LLLAVE sentencias RETURN valor PCOMA RLLAVE

    LLLAVE          shift and go to state 150


state 139

    (66) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA . ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    ID              shift and go to state 151


state 140

    (67) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN . LLLAVE sentencias ID actualizar PCOMA RLLAVE

    LLLAVE          shift and go to state 152


state 141

    (68) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA . RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    RLLAVE          shift and go to state 153


state 142

    (56) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN . EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE

    EXCEPTION       shift and go to state 154


state 143

    (36) contenido -> valor DOUBLE_ARROW valor COMA . contenido
    (35) contenido -> . valor DOUBLE_ARROW valor
    (36) contenido -> . valor DOUBLE_ARROW valor COMA contenido
    (37) contenido -> . valor
    (38) contenido -> . valor COMA contenido
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 49
    NUMBER          shift and go to state 50
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 94
    contenido                      shift and go to state 155

state 144

    (69) array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN . PCOMA

    PCOMA           shift and go to state 156


state 145

    (70) heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER . RCORCH RPAREN PCOMA

    RCORCH          shift and go to state 157


state 146

    (71) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW . NUMBER RPAREN RPAREN PCOMA

    NUMBER          shift and go to state 158


state 147

    (30) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .
    (32) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE . ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE . ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    FIN             reduce using rule 30 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 30 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 30 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 30 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    ELSE            shift and go to state 159
    ELSEIF          shift and go to state 160


state 148

    (31) comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 31 (comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 31 (comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 31 (comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 31 (comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .)


state 149

    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN . valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 49
    NUMBER          shift and go to state 50
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 161

state 150

    (52) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE . sentencias RLLAVE
    (53) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE . sentencias RETURN valor PCOMA RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (30) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (31) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (51) funcion -> . sort
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (53) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (57) impresion -> . ECHO valor PCOMA
    (58) impresion -> . PRINT valor PCOMA
    (59) impresion -> . PRINT expresionmat PCOMA
    (66) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (67) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (68) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (49) expresion -> . expresionmat
    (50) expresion -> . expcmplog
    (56) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (40) estdatos -> . array
    (41) estdatos -> . array_map
    (42) estdatos -> . heap
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (34) array -> . ARRAY LPAREN contenido RPAREN
    (69) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (70) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (71) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    sentencias                     shift and go to state 162
    valor                          shift and go to state 13
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 151

    (66) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID . repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (60) repeticionrep -> . MAYOR
    (61) repeticionrep -> . MENOR
    (62) repeticionrep -> . MAYORIGUAL
    (63) repeticionrep -> . MENORIGUAL

    MAYOR           shift and go to state 164
    MENOR           shift and go to state 165
    MAYORIGUAL      shift and go to state 166
    MENORIGUAL      shift and go to state 167

    repeticionrep                  shift and go to state 163

state 152

    (67) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE . sentencias ID actualizar PCOMA RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (30) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (31) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (51) funcion -> . sort
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (53) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (57) impresion -> . ECHO valor PCOMA
    (58) impresion -> . PRINT valor PCOMA
    (59) impresion -> . PRINT expresionmat PCOMA
    (66) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (67) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (68) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (49) expresion -> . expresionmat
    (50) expresion -> . expcmplog
    (56) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (40) estdatos -> . array
    (41) estdatos -> . array_map
    (42) estdatos -> . heap
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (34) array -> . ARRAY LPAREN contenido RPAREN
    (69) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (70) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (71) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 13
    sentencias                     shift and go to state 168
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 153

    (68) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE . WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    WHILE           shift and go to state 169


state 154

    (56) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION . ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE

    ID              shift and go to state 170


state 155

    (36) contenido -> valor DOUBLE_ARROW valor COMA contenido .

    RPAREN          reduce using rule 36 (contenido -> valor DOUBLE_ARROW valor COMA contenido .)


state 156

    (69) array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .

    FIN             reduce using rule 69 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)
    PCOMA           reduce using rule 69 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)
    ID              reduce using rule 69 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)
    RLLAVE          reduce using rule 69 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)
    RETURN          reduce using rule 69 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)


state 157

    (70) heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH . RPAREN PCOMA

    RPAREN          shift and go to state 171


state 158

    (71) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER . RPAREN RPAREN PCOMA

    RPAREN          shift and go to state 172


state 159

    (32) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 173


state 160

    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LPAREN          shift and go to state 174


state 161

    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor . opcomparacion valor RPAREN
    (18) opcomparacion -> . IGUAL
    (19) opcomparacion -> . MAYOR
    (20) opcomparacion -> . MENOR
    (21) opcomparacion -> . MAYORIGUAL
    (22) opcomparacion -> . MENORIGUAL
    (23) opcomparacion -> . IS_NOT_EQUAL

    IGUAL           shift and go to state 41
    MAYOR           shift and go to state 42
    MENOR           shift and go to state 43
    MAYORIGUAL      shift and go to state 44
    MENORIGUAL      shift and go to state 45
    IS_NOT_EQUAL    shift and go to state 46

    opcomparacion                  shift and go to state 175

state 162

    (52) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias . RLLAVE
    (53) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias . RETURN valor PCOMA RLLAVE

    RLLAVE          shift and go to state 176
    RETURN          shift and go to state 177


state 163

    (66) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep . NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    NUMBER          shift and go to state 178


state 164

    (60) repeticionrep -> MAYOR .

    NUMBER          reduce using rule 60 (repeticionrep -> MAYOR .)


state 165

    (61) repeticionrep -> MENOR .

    NUMBER          reduce using rule 61 (repeticionrep -> MENOR .)


state 166

    (62) repeticionrep -> MAYORIGUAL .

    NUMBER          reduce using rule 62 (repeticionrep -> MAYORIGUAL .)


state 167

    (63) repeticionrep -> MENORIGUAL .

    NUMBER          reduce using rule 63 (repeticionrep -> MENORIGUAL .)


state 168

    (67) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias . ID actualizar PCOMA RLLAVE

    ID              shift and go to state 179


state 169

    (68) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE . LPAREN ID opcomparacion valor RPAREN PCOMA

    LPAREN          shift and go to state 180


state 170

    (56) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID . RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE

    RPAREN          shift and go to state 181


state 171

    (70) heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN . PCOMA

    PCOMA           shift and go to state 182


state 172

    (71) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN . RPAREN PCOMA

    RPAREN          shift and go to state 183


state 173

    (32) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (30) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (31) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (51) funcion -> . sort
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (53) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (57) impresion -> . ECHO valor PCOMA
    (58) impresion -> . PRINT valor PCOMA
    (59) impresion -> . PRINT expresionmat PCOMA
    (66) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (67) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (68) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (49) expresion -> . expresionmat
    (50) expresion -> . expcmplog
    (56) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (40) estdatos -> . array
    (41) estdatos -> . array_map
    (42) estdatos -> . heap
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (34) array -> . ARRAY LPAREN contenido RPAREN
    (69) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (70) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (71) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    expcmp                         shift and go to state 16
    sentencias                     shift and go to state 184
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 174

    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    LPAREN          shift and go to state 15
    ID              shift and go to state 49
    NUMBER          shift and go to state 50
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    expcmp                         shift and go to state 185
    valor                          shift and go to state 13

state 175

    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion . valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 49
    NUMBER          shift and go to state 50
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 186

state 176

    (52) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 52 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 52 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 52 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .)
    COMA            reduce using rule 52 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 52 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .)


state 177

    (53) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN . valor PCOMA RLLAVE
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 49
    NUMBER          shift and go to state 50
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 187

state 178

    (66) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER . PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    PCOMA           shift and go to state 188


state 179

    (67) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID . actualizar PCOMA RLLAVE
    (64) actualizar -> . INCREMENTO
    (65) actualizar -> . DECREMENTO

    INCREMENTO      shift and go to state 125
    DECREMENTO      shift and go to state 126

    actualizar                     shift and go to state 189

state 180

    (68) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN . ID opcomparacion valor RPAREN PCOMA

    ID              shift and go to state 190


state 181

    (56) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN . LLLAVE ECHO CADENA COMA ID RLLAVE

    LLLAVE          shift and go to state 191


state 182

    (70) heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .

    FIN             reduce using rule 70 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)
    PCOMA           reduce using rule 70 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)
    ID              reduce using rule 70 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)
    RLLAVE          reduce using rule 70 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)
    RETURN          reduce using rule 70 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)


state 183

    (71) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN . PCOMA

    PCOMA           shift and go to state 192


state 184

    (32) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 193


state 185

    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    RPAREN          shift and go to state 194


state 186

    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor . RPAREN

    RPAREN          shift and go to state 195


state 187

    (53) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor . PCOMA RLLAVE

    PCOMA           shift and go to state 196


state 188

    (66) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA . ID actualizar RPAREN LLLAVE sentencias RLLAVE

    ID              shift and go to state 197


state 189

    (67) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar . PCOMA RLLAVE

    PCOMA           shift and go to state 198


state 190

    (68) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID . opcomparacion valor RPAREN PCOMA
    (18) opcomparacion -> . IGUAL
    (19) opcomparacion -> . MAYOR
    (20) opcomparacion -> . MENOR
    (21) opcomparacion -> . MAYORIGUAL
    (22) opcomparacion -> . MENORIGUAL
    (23) opcomparacion -> . IS_NOT_EQUAL

    IGUAL           shift and go to state 41
    MAYOR           shift and go to state 42
    MENOR           shift and go to state 43
    MAYORIGUAL      shift and go to state 44
    MENORIGUAL      shift and go to state 45
    IS_NOT_EQUAL    shift and go to state 46

    opcomparacion                  shift and go to state 199

state 191

    (56) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE . ECHO CADENA COMA ID RLLAVE

    ECHO            shift and go to state 200


state 192

    (71) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .

    FIN             reduce using rule 71 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)
    PCOMA           reduce using rule 71 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)
    ID              reduce using rule 71 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)
    RLLAVE          reduce using rule 71 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)
    RETURN          reduce using rule 71 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)


state 193

    (32) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 32 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 32 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 32 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 32 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)


state 194

    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 201


state 195

    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .

    AND             reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    OR              reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    RPAREN          reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    FIN             reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    PCOMA           reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    ID              reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    RLLAVE          reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    RETURN          reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)


state 196

    (53) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA . RLLAVE

    RLLAVE          shift and go to state 202


state 197

    (66) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID . actualizar RPAREN LLLAVE sentencias RLLAVE
    (64) actualizar -> . INCREMENTO
    (65) actualizar -> . DECREMENTO

    INCREMENTO      shift and go to state 125
    DECREMENTO      shift and go to state 126

    actualizar                     shift and go to state 203

state 198

    (67) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA . RLLAVE

    RLLAVE          shift and go to state 204


state 199

    (68) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion . valor RPAREN PCOMA
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 49
    NUMBER          shift and go to state 50
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 205

state 200

    (56) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO . CADENA COMA ID RLLAVE

    CADENA          shift and go to state 206


state 201

    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (30) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (31) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (51) funcion -> . sort
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (53) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (57) impresion -> . ECHO valor PCOMA
    (58) impresion -> . PRINT valor PCOMA
    (59) impresion -> . PRINT expresionmat PCOMA
    (66) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (67) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (68) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (49) expresion -> . expresionmat
    (50) expresion -> . expcmplog
    (56) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (40) estdatos -> . array
    (41) estdatos -> . array_map
    (42) estdatos -> . heap
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (34) array -> . ARRAY LPAREN contenido RPAREN
    (69) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (70) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (71) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    expcmp                         shift and go to state 16
    sentencias                     shift and go to state 207
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 202

    (53) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .

    FIN             reduce using rule 53 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)
    ID              reduce using rule 53 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)
    RLLAVE          reduce using rule 53 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)
    COMA            reduce using rule 53 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)
    RETURN          reduce using rule 53 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)


state 203

    (66) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar . RPAREN LLLAVE sentencias RLLAVE

    RPAREN          shift and go to state 208


state 204

    (67) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .

    FIN             reduce using rule 67 (repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .)
    ID              reduce using rule 67 (repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .)
    RLLAVE          reduce using rule 67 (repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .)
    RETURN          reduce using rule 67 (repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .)


state 205

    (68) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor . RPAREN PCOMA

    RPAREN          shift and go to state 209


state 206

    (56) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA . COMA ID RLLAVE

    COMA            shift and go to state 210


state 207

    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE ELSE LLLAVE sentencias RLLAVE

    RLLAVE          shift and go to state 211


state 208

    (66) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 212


state 209

    (68) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN . PCOMA

    PCOMA           shift and go to state 213


state 210

    (56) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA . ID RLLAVE

    ID              shift and go to state 214


state 211

    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE . ELSE LLLAVE sentencias RLLAVE

    ELSE            shift and go to state 215


state 212

    (66) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (30) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (31) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (51) funcion -> . sort
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (53) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (57) impresion -> . ECHO valor PCOMA
    (58) impresion -> . PRINT valor PCOMA
    (59) impresion -> . PRINT expresionmat PCOMA
    (66) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (67) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (68) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (49) expresion -> . expresionmat
    (50) expresion -> . expcmplog
    (56) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (40) estdatos -> . array
    (41) estdatos -> . array_map
    (42) estdatos -> . heap
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (34) array -> . ARRAY LPAREN contenido RPAREN
    (69) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (70) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (71) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    sentencias                     shift and go to state 216
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 213

    (68) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .

    FIN             reduce using rule 68 (repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .)
    ID              reduce using rule 68 (repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .)
    RLLAVE          reduce using rule 68 (repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .)
    RETURN          reduce using rule 68 (repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .)


state 214

    (56) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID . RLLAVE

    RLLAVE          shift and go to state 217


state 215

    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 218


state 216

    (66) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 219


state 217

    (56) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE .

    FIN             reduce using rule 56 (excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE .)
    ID              reduce using rule 56 (excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE .)
    RLLAVE          reduce using rule 56 (excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE .)
    RETURN          reduce using rule 56 (excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE .)


state 218

    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (30) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (31) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (51) funcion -> . sort
    (52) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (53) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (57) impresion -> . ECHO valor PCOMA
    (58) impresion -> . PRINT valor PCOMA
    (59) impresion -> . PRINT expresionmat PCOMA
    (66) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (67) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (68) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (49) expresion -> . expresionmat
    (50) expresion -> . expcmplog
    (56) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (40) estdatos -> . array
    (41) estdatos -> . array_map
    (42) estdatos -> . heap
    (39) sort -> . SORT LPAREN ID RPAREN PCOMA
    (43) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (34) array -> . ARRAY LPAREN contenido RPAREN
    (69) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (70) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (71) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (24) expcmp -> . valor opcomparacion valor
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    expcmp                         shift and go to state 16
    sentencias                     shift and go to state 220
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 219

    (66) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 66 (repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 66 (repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 66 (repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 66 (repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .)


state 220

    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 221


state 221

    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 33 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 33 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 33 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 33 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)

