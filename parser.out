Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    BREAK
    CASE
    CLASS
    COMMENT
    CONCAT_EQUAL
    CONST
    CONTINUE
    DECLARE
    DEFAULT
    DIV_EQUAL
    EXTENDS
    FINAL
    GLOBAL
    HEAP
    INCLUDE
    INSTANCEOF
    IS_NOT_EQUAL
    MOD
    PRIVATE
    PROTECTED
    PUBLIC

Grammar

Rule 0     S' -> programa
Rule 1     programa -> INICIO sentencias FIN
Rule 2     sentencias -> asignacion
Rule 3     sentencias -> comparacion
Rule 4     sentencias -> funcion
Rule 5     sentencias -> impresion
Rule 6     sentencias -> repeticion
Rule 7     sentencias -> expresion
Rule 8     sentencias -> excepcion
Rule 9     sentencias -> estdatos
Rule 10    asignacion -> ID ASIGNACION valor PCOMA
Rule 11    asignacion -> ID REF ID PCOMA
Rule 12    asignacion -> ID ASIGNACION estdatos PCOMA
Rule 13    asignacion -> ID ASIGNACION expresion PCOMA
Rule 14    valor -> ID
Rule 15    valor -> NUMBER
Rule 16    valor -> BOOLEAN
Rule 17    valor -> CADENA
Rule 18    opcomparacion -> IGUAL
Rule 19    opcomparacion -> MAYOR
Rule 20    opcomparacion -> MENOR
Rule 21    opcomparacion -> MAYORIGUAL
Rule 22    opcomparacion -> MENORIGUAL
Rule 23    expcmp -> valor opcomparacion valor
Rule 24    expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
Rule 25    expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
Rule 26    expcmplog -> expcmp oplog expcmp
Rule 27    expcmplog -> expcmp oplog expcmplog
Rule 28    oplog -> BOOLEAN_OR
Rule 29    oplog -> BOOLEAN_AND
Rule 30    oplog -> AND
Rule 31    oplog -> OR
Rule 32    comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
Rule 33    comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
Rule 34    comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
Rule 35    comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
Rule 36    array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
Rule 37    array -> ARRAY LPAREN valor RPAREN
Rule 38    sort -> SORT LPAREN ID RPAREN PCOMA
Rule 39    estdatos -> array
Rule 40    estdatos -> array_map
Rule 41    estdatos -> heap
Rule 42    expresionmat -> NUMBER operadormat NUMBER
Rule 43    operadormat -> PLUS
Rule 44    operadormat -> MINUS
Rule 45    operadormat -> TIMES
Rule 46    operadormat -> DIVIDE
Rule 47    expresion -> expresionmat
Rule 48    expresion -> expcmplog
Rule 49    funcion -> sort
Rule 50    funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
Rule 51    funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
Rule 52    args -> ID
Rule 53    args -> ID args
Rule 54    excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
Rule 55    impresion -> ECHO valor PCOMA
Rule 56    impresion -> PRINT valor PCOMA
Rule 57    impresion -> PRINT expresionmat PCOMA
Rule 58    repeticionrep -> MAYOR
Rule 59    repeticionrep -> MENOR
Rule 60    repeticionrep -> MAYORIGUAL
Rule 61    repeticionrep -> MENORIGUAL
Rule 62    actualizar -> INCREMENTO
Rule 63    actualizar -> DECREMENTO
Rule 64    repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
Rule 65    repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
Rule 66    repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
Rule 67    array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
Rule 68    heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
Rule 69    heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
Rule 70    expression -> ID

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 30
ARRAY                : 36 37 69
ARRAY_MAP            : 67
ASIGNACION           : 10 12 13 64
BOOLEAN              : 16
BOOLEAN_AND          : 29
BOOLEAN_OR           : 28
BREAK                : 
CADENA               : 17 54
CASE                 : 
CATCH                : 54
CLASS                : 
COMA                 : 54 67 68
COMMENT              : 
CONCAT_EQUAL         : 
CONST                : 
CONTINUE             : 
DECLARE              : 
DECREMENTO           : 63
DEFAULT              : 
DIVIDE               : 46
DIV_EQUAL            : 
DO                   : 66
DOUBLE_ARROW         : 36 69
ECHO                 : 54 55
ELSE                 : 34 35
ELSEIF               : 35
EXCEPTION            : 54
EXTENDS              : 
FIN                  : 1
FINAL                : 
FLECHA               : 54
FOR                  : 64
FUNCTION             : 50 51
GETMESSAGE           : 54
GLOBAL               : 
HEAP                 : 
ID                   : 10 11 11 12 13 14 38 50 51 52 53 54 54 64 64 64 65 65 66 66 70
IF                   : 32 33 34 35
IGUAL                : 18
INCLUDE              : 
INCREMENTO           : 62
INICIO               : 1
INSERT               : 68 69
INSTANCEOF           : 
IS_NOT_EQUAL         : 
LCORCH               : 68
LLLAVE               : 32 33 34 34 35 35 35 50 51 54 54 64 65 66
LPAREN               : 24 24 25 25 32 33 34 35 35 36 37 38 50 51 54 64 65 66 67 68 69 69
MAYOR                : 19 58
MAYORIGUAL           : 21 60
MENOR                : 20 59
MENORIGUAL           : 22 61
MINUS                : 44
MOD                  : 
NFUNCION             : 50 51
NUMBER               : 15 42 42 64 64 68 68 69
OR                   : 31
PCOMA                : 10 11 12 13 38 51 55 56 57 64 64 65 66 66 67 68 69
PLUS                 : 43
PRINT                : 56 57
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RCORCH               : 68
REF                  : 11
RETURN               : 51
RLLAVE               : 32 33 34 34 35 35 35 50 51 54 54 64 65 66
RPAREN               : 24 24 25 25 32 33 34 35 35 36 37 38 50 51 54 64 65 66 67 68 69 69
SORT                 : 38
TIMES                : 45
TRY                  : 54
WHILE                : 65 66
error                : 

Nonterminals, with rules where they appear

actualizar           : 64 65 66
args                 : 50 51 53
array                : 39 67
array_map            : 40
asignacion           : 2
comparacion          : 3
estdatos             : 9 12
excepcion            : 8
expcmp               : 25 26 26 27 32 34 35 35
expcmplog            : 27 33 48
expresion            : 7 13
expresionmat         : 47 57
expression           : 
funcion              : 4 67
heap                 : 41
impresion            : 5
opcomparacion        : 23 24 24 25 25 65 66
operadormat          : 42
oplog                : 24 25 25 26 27
programa             : 0
repeticion           : 6
repeticionrep        : 64
sentencias           : 1 32 33 34 34 35 35 35 50 51 54 64 65 66
sort                 : 49
valor                : 10 23 23 24 24 24 24 25 25 25 25 36 36 37 51 55 56 65 66 69

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . INICIO sentencias FIN

    INICIO          shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> INICIO . sentencias FIN
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (49) funcion -> . sort
    (50) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (55) impresion -> . ECHO valor PCOMA
    (56) impresion -> . PRINT valor PCOMA
    (57) impresion -> . PRINT expresionmat PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (47) expresion -> . expresionmat
    (48) expresion -> . expcmplog
    (54) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (39) estdatos -> . array
    (40) estdatos -> . array_map
    (41) estdatos -> . heap
    (38) sort -> . SORT LPAREN ID RPAREN PCOMA
    (42) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (36) array -> . ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
    (37) array -> . ARRAY LPAREN valor RPAREN
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (23) expcmp -> . valor opcomparacion valor
    (24) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    sentencias                     shift and go to state 3
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 3

    (1) programa -> INICIO sentencias . FIN

    FIN             shift and go to state 37


state 4

    (2) sentencias -> asignacion .

    FIN             reduce using rule 2 (sentencias -> asignacion .)
    ID              reduce using rule 2 (sentencias -> asignacion .)
    RLLAVE          reduce using rule 2 (sentencias -> asignacion .)
    RETURN          reduce using rule 2 (sentencias -> asignacion .)


state 5

    (3) sentencias -> comparacion .

    FIN             reduce using rule 3 (sentencias -> comparacion .)
    ID              reduce using rule 3 (sentencias -> comparacion .)
    RLLAVE          reduce using rule 3 (sentencias -> comparacion .)
    RETURN          reduce using rule 3 (sentencias -> comparacion .)


state 6

    (4) sentencias -> funcion .

    FIN             reduce using rule 4 (sentencias -> funcion .)
    ID              reduce using rule 4 (sentencias -> funcion .)
    RLLAVE          reduce using rule 4 (sentencias -> funcion .)
    RETURN          reduce using rule 4 (sentencias -> funcion .)


state 7

    (5) sentencias -> impresion .

    FIN             reduce using rule 5 (sentencias -> impresion .)
    ID              reduce using rule 5 (sentencias -> impresion .)
    RLLAVE          reduce using rule 5 (sentencias -> impresion .)
    RETURN          reduce using rule 5 (sentencias -> impresion .)


state 8

    (6) sentencias -> repeticion .

    FIN             reduce using rule 6 (sentencias -> repeticion .)
    ID              reduce using rule 6 (sentencias -> repeticion .)
    RLLAVE          reduce using rule 6 (sentencias -> repeticion .)
    RETURN          reduce using rule 6 (sentencias -> repeticion .)


state 9

    (7) sentencias -> expresion .

    FIN             reduce using rule 7 (sentencias -> expresion .)
    ID              reduce using rule 7 (sentencias -> expresion .)
    RLLAVE          reduce using rule 7 (sentencias -> expresion .)
    RETURN          reduce using rule 7 (sentencias -> expresion .)


state 10

    (8) sentencias -> excepcion .

    FIN             reduce using rule 8 (sentencias -> excepcion .)
    ID              reduce using rule 8 (sentencias -> excepcion .)
    RLLAVE          reduce using rule 8 (sentencias -> excepcion .)
    RETURN          reduce using rule 8 (sentencias -> excepcion .)


state 11

    (9) sentencias -> estdatos .

    FIN             reduce using rule 9 (sentencias -> estdatos .)
    ID              reduce using rule 9 (sentencias -> estdatos .)
    RLLAVE          reduce using rule 9 (sentencias -> estdatos .)
    RETURN          reduce using rule 9 (sentencias -> estdatos .)


state 12

    (10) asignacion -> ID . ASIGNACION valor PCOMA
    (11) asignacion -> ID . REF ID PCOMA
    (12) asignacion -> ID . ASIGNACION estdatos PCOMA
    (13) asignacion -> ID . ASIGNACION expresion PCOMA
    (14) valor -> ID .

    ASIGNACION      shift and go to state 38
    REF             shift and go to state 39
    IGUAL           reduce using rule 14 (valor -> ID .)
    MAYOR           reduce using rule 14 (valor -> ID .)
    MENOR           reduce using rule 14 (valor -> ID .)
    MAYORIGUAL      reduce using rule 14 (valor -> ID .)
    MENORIGUAL      reduce using rule 14 (valor -> ID .)


state 13

    (23) expcmp -> valor . opcomparacion valor
    (18) opcomparacion -> . IGUAL
    (19) opcomparacion -> . MAYOR
    (20) opcomparacion -> . MENOR
    (21) opcomparacion -> . MAYORIGUAL
    (22) opcomparacion -> . MENORIGUAL

    IGUAL           shift and go to state 41
    MAYOR           shift and go to state 42
    MENOR           shift and go to state 43
    MAYORIGUAL      shift and go to state 44
    MENORIGUAL      shift and go to state 45

    opcomparacion                  shift and go to state 40

state 14

    (32) comparacion -> IF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (33) comparacion -> IF . LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> IF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> IF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LPAREN          shift and go to state 46


state 15

    (24) expcmp -> LPAREN . valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> LPAREN . valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 48
    NUMBER          shift and go to state 49
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 47

state 16

    (26) expcmplog -> expcmp . oplog expcmp
    (27) expcmplog -> expcmp . oplog expcmplog
    (28) oplog -> . BOOLEAN_OR
    (29) oplog -> . BOOLEAN_AND
    (30) oplog -> . AND
    (31) oplog -> . OR

    BOOLEAN_OR      shift and go to state 51
    BOOLEAN_AND     shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54

    oplog                          shift and go to state 50

state 17

    (48) expresion -> expcmplog .

    FIN             reduce using rule 48 (expresion -> expcmplog .)
    PCOMA           reduce using rule 48 (expresion -> expcmplog .)
    ID              reduce using rule 48 (expresion -> expcmplog .)
    RLLAVE          reduce using rule 48 (expresion -> expcmplog .)
    RETURN          reduce using rule 48 (expresion -> expcmplog .)


state 18

    (49) funcion -> sort .

    FIN             reduce using rule 49 (funcion -> sort .)
    ID              reduce using rule 49 (funcion -> sort .)
    RLLAVE          reduce using rule 49 (funcion -> sort .)
    COMA            reduce using rule 49 (funcion -> sort .)
    RETURN          reduce using rule 49 (funcion -> sort .)


state 19

    (50) funcion -> FUNCTION . NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (51) funcion -> FUNCTION . NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE

    NFUNCION        shift and go to state 55


state 20

    (55) impresion -> ECHO . valor PCOMA
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 48
    NUMBER          shift and go to state 49
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 56

state 21

    (56) impresion -> PRINT . valor PCOMA
    (57) impresion -> PRINT . expresionmat PCOMA
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA
    (42) expresionmat -> . NUMBER operadormat NUMBER

    ID              shift and go to state 48
    NUMBER          shift and go to state 59
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 57
    expresionmat                   shift and go to state 58

state 22

    (47) expresion -> expresionmat .

    FIN             reduce using rule 47 (expresion -> expresionmat .)
    PCOMA           reduce using rule 47 (expresion -> expresionmat .)
    ID              reduce using rule 47 (expresion -> expresionmat .)
    RLLAVE          reduce using rule 47 (expresion -> expresionmat .)
    RETURN          reduce using rule 47 (expresion -> expresionmat .)


state 23

    (64) repeticion -> FOR . LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    LPAREN          shift and go to state 60


state 24

    (42) expresionmat -> NUMBER . operadormat NUMBER
    (15) valor -> NUMBER .
    (43) operadormat -> . PLUS
    (44) operadormat -> . MINUS
    (45) operadormat -> . TIMES
    (46) operadormat -> . DIVIDE

    IGUAL           reduce using rule 15 (valor -> NUMBER .)
    MAYOR           reduce using rule 15 (valor -> NUMBER .)
    MENOR           reduce using rule 15 (valor -> NUMBER .)
    MAYORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    MENORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 65

    operadormat                    shift and go to state 61

state 25

    (65) repeticion -> WHILE . LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE

    LPAREN          shift and go to state 66


state 26

    (66) repeticion -> DO . LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    LLLAVE          shift and go to state 67


state 27

    (54) excepcion -> TRY . LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    LLLAVE          shift and go to state 68


state 28

    (17) valor -> CADENA .

    IGUAL           reduce using rule 17 (valor -> CADENA .)
    MAYOR           reduce using rule 17 (valor -> CADENA .)
    MENOR           reduce using rule 17 (valor -> CADENA .)
    MAYORIGUAL      reduce using rule 17 (valor -> CADENA .)
    MENORIGUAL      reduce using rule 17 (valor -> CADENA .)
    PCOMA           reduce using rule 17 (valor -> CADENA .)
    BOOLEAN_OR      reduce using rule 17 (valor -> CADENA .)
    BOOLEAN_AND     reduce using rule 17 (valor -> CADENA .)
    AND             reduce using rule 17 (valor -> CADENA .)
    OR              reduce using rule 17 (valor -> CADENA .)
    RPAREN          reduce using rule 17 (valor -> CADENA .)
    FIN             reduce using rule 17 (valor -> CADENA .)
    ID              reduce using rule 17 (valor -> CADENA .)
    RLLAVE          reduce using rule 17 (valor -> CADENA .)
    RETURN          reduce using rule 17 (valor -> CADENA .)
    DOUBLE_ARROW    reduce using rule 17 (valor -> CADENA .)


state 29

    (39) estdatos -> array .

    FIN             reduce using rule 39 (estdatos -> array .)
    PCOMA           reduce using rule 39 (estdatos -> array .)
    ID              reduce using rule 39 (estdatos -> array .)
    RLLAVE          reduce using rule 39 (estdatos -> array .)
    RETURN          reduce using rule 39 (estdatos -> array .)


state 30

    (40) estdatos -> array_map .

    FIN             reduce using rule 40 (estdatos -> array_map .)
    PCOMA           reduce using rule 40 (estdatos -> array_map .)
    ID              reduce using rule 40 (estdatos -> array_map .)
    RLLAVE          reduce using rule 40 (estdatos -> array_map .)
    RETURN          reduce using rule 40 (estdatos -> array_map .)


state 31

    (41) estdatos -> heap .

    FIN             reduce using rule 41 (estdatos -> heap .)
    PCOMA           reduce using rule 41 (estdatos -> heap .)
    ID              reduce using rule 41 (estdatos -> heap .)
    RLLAVE          reduce using rule 41 (estdatos -> heap .)
    RETURN          reduce using rule 41 (estdatos -> heap .)


state 32

    (38) sort -> SORT . LPAREN ID RPAREN PCOMA

    LPAREN          shift and go to state 69


state 33

    (36) array -> ARRAY . LPAREN valor DOUBLE_ARROW valor RPAREN
    (37) array -> ARRAY . LPAREN valor RPAREN

    LPAREN          shift and go to state 70


state 34

    (67) array_map -> ARRAY_MAP . LPAREN funcion COMA array RPAREN PCOMA

    LPAREN          shift and go to state 71


state 35

    (68) heap -> INSERT . LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> INSERT . LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

    LPAREN          shift and go to state 72


state 36

    (16) valor -> BOOLEAN .

    IGUAL           reduce using rule 16 (valor -> BOOLEAN .)
    MAYOR           reduce using rule 16 (valor -> BOOLEAN .)
    MENOR           reduce using rule 16 (valor -> BOOLEAN .)
    MAYORIGUAL      reduce using rule 16 (valor -> BOOLEAN .)
    MENORIGUAL      reduce using rule 16 (valor -> BOOLEAN .)
    PCOMA           reduce using rule 16 (valor -> BOOLEAN .)
    BOOLEAN_OR      reduce using rule 16 (valor -> BOOLEAN .)
    BOOLEAN_AND     reduce using rule 16 (valor -> BOOLEAN .)
    AND             reduce using rule 16 (valor -> BOOLEAN .)
    OR              reduce using rule 16 (valor -> BOOLEAN .)
    RPAREN          reduce using rule 16 (valor -> BOOLEAN .)
    FIN             reduce using rule 16 (valor -> BOOLEAN .)
    ID              reduce using rule 16 (valor -> BOOLEAN .)
    RLLAVE          reduce using rule 16 (valor -> BOOLEAN .)
    RETURN          reduce using rule 16 (valor -> BOOLEAN .)
    DOUBLE_ARROW    reduce using rule 16 (valor -> BOOLEAN .)


state 37

    (1) programa -> INICIO sentencias FIN .

    $end            reduce using rule 1 (programa -> INICIO sentencias FIN .)


state 38

    (10) asignacion -> ID ASIGNACION . valor PCOMA
    (12) asignacion -> ID ASIGNACION . estdatos PCOMA
    (13) asignacion -> ID ASIGNACION . expresion PCOMA
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA
    (39) estdatos -> . array
    (40) estdatos -> . array_map
    (41) estdatos -> . heap
    (47) expresion -> . expresionmat
    (48) expresion -> . expcmplog
    (36) array -> . ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
    (37) array -> . ARRAY LPAREN valor RPAREN
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (42) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (23) expcmp -> . valor opcomparacion valor
    (24) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp

    ID              shift and go to state 48
    NUMBER          shift and go to state 59
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15

    valor                          shift and go to state 73
    estdatos                       shift and go to state 74
    expresion                      shift and go to state 75
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31
    expresionmat                   shift and go to state 22
    expcmplog                      shift and go to state 17
    expcmp                         shift and go to state 16

state 39

    (11) asignacion -> ID REF . ID PCOMA

    ID              shift and go to state 76


state 40

    (23) expcmp -> valor opcomparacion . valor
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 48
    NUMBER          shift and go to state 49
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 77

state 41

    (18) opcomparacion -> IGUAL .

    ID              reduce using rule 18 (opcomparacion -> IGUAL .)
    NUMBER          reduce using rule 18 (opcomparacion -> IGUAL .)
    BOOLEAN         reduce using rule 18 (opcomparacion -> IGUAL .)
    CADENA          reduce using rule 18 (opcomparacion -> IGUAL .)


state 42

    (19) opcomparacion -> MAYOR .

    ID              reduce using rule 19 (opcomparacion -> MAYOR .)
    NUMBER          reduce using rule 19 (opcomparacion -> MAYOR .)
    BOOLEAN         reduce using rule 19 (opcomparacion -> MAYOR .)
    CADENA          reduce using rule 19 (opcomparacion -> MAYOR .)


state 43

    (20) opcomparacion -> MENOR .

    ID              reduce using rule 20 (opcomparacion -> MENOR .)
    NUMBER          reduce using rule 20 (opcomparacion -> MENOR .)
    BOOLEAN         reduce using rule 20 (opcomparacion -> MENOR .)
    CADENA          reduce using rule 20 (opcomparacion -> MENOR .)


state 44

    (21) opcomparacion -> MAYORIGUAL .

    ID              reduce using rule 21 (opcomparacion -> MAYORIGUAL .)
    NUMBER          reduce using rule 21 (opcomparacion -> MAYORIGUAL .)
    BOOLEAN         reduce using rule 21 (opcomparacion -> MAYORIGUAL .)
    CADENA          reduce using rule 21 (opcomparacion -> MAYORIGUAL .)


state 45

    (22) opcomparacion -> MENORIGUAL .

    ID              reduce using rule 22 (opcomparacion -> MENORIGUAL .)
    NUMBER          reduce using rule 22 (opcomparacion -> MENORIGUAL .)
    BOOLEAN         reduce using rule 22 (opcomparacion -> MENORIGUAL .)
    CADENA          reduce using rule 22 (opcomparacion -> MENORIGUAL .)


state 46

    (32) comparacion -> IF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE
    (33) comparacion -> IF LPAREN . expcmplog RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> IF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> IF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (23) expcmp -> . valor opcomparacion valor
    (24) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    LPAREN          shift and go to state 15
    ID              shift and go to state 48
    NUMBER          shift and go to state 49
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    expcmp                         shift and go to state 78
    expcmplog                      shift and go to state 79
    valor                          shift and go to state 13

state 47

    (24) expcmp -> LPAREN valor . opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> LPAREN valor . opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (18) opcomparacion -> . IGUAL
    (19) opcomparacion -> . MAYOR
    (20) opcomparacion -> . MENOR
    (21) opcomparacion -> . MAYORIGUAL
    (22) opcomparacion -> . MENORIGUAL

    IGUAL           shift and go to state 41
    MAYOR           shift and go to state 42
    MENOR           shift and go to state 43
    MAYORIGUAL      shift and go to state 44
    MENORIGUAL      shift and go to state 45

    opcomparacion                  shift and go to state 80

state 48

    (14) valor -> ID .

    IGUAL           reduce using rule 14 (valor -> ID .)
    MAYOR           reduce using rule 14 (valor -> ID .)
    MENOR           reduce using rule 14 (valor -> ID .)
    MAYORIGUAL      reduce using rule 14 (valor -> ID .)
    MENORIGUAL      reduce using rule 14 (valor -> ID .)
    PCOMA           reduce using rule 14 (valor -> ID .)
    BOOLEAN_OR      reduce using rule 14 (valor -> ID .)
    BOOLEAN_AND     reduce using rule 14 (valor -> ID .)
    AND             reduce using rule 14 (valor -> ID .)
    OR              reduce using rule 14 (valor -> ID .)
    RPAREN          reduce using rule 14 (valor -> ID .)
    FIN             reduce using rule 14 (valor -> ID .)
    ID              reduce using rule 14 (valor -> ID .)
    RLLAVE          reduce using rule 14 (valor -> ID .)
    RETURN          reduce using rule 14 (valor -> ID .)
    DOUBLE_ARROW    reduce using rule 14 (valor -> ID .)


state 49

    (15) valor -> NUMBER .

    IGUAL           reduce using rule 15 (valor -> NUMBER .)
    MAYOR           reduce using rule 15 (valor -> NUMBER .)
    MENOR           reduce using rule 15 (valor -> NUMBER .)
    MAYORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    MENORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    PCOMA           reduce using rule 15 (valor -> NUMBER .)
    BOOLEAN_OR      reduce using rule 15 (valor -> NUMBER .)
    BOOLEAN_AND     reduce using rule 15 (valor -> NUMBER .)
    AND             reduce using rule 15 (valor -> NUMBER .)
    OR              reduce using rule 15 (valor -> NUMBER .)
    RPAREN          reduce using rule 15 (valor -> NUMBER .)
    FIN             reduce using rule 15 (valor -> NUMBER .)
    ID              reduce using rule 15 (valor -> NUMBER .)
    RLLAVE          reduce using rule 15 (valor -> NUMBER .)
    RETURN          reduce using rule 15 (valor -> NUMBER .)
    DOUBLE_ARROW    reduce using rule 15 (valor -> NUMBER .)


state 50

    (26) expcmplog -> expcmp oplog . expcmp
    (27) expcmplog -> expcmp oplog . expcmplog
    (23) expcmp -> . valor opcomparacion valor
    (24) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    LPAREN          shift and go to state 15
    ID              shift and go to state 48
    NUMBER          shift and go to state 49
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    expcmp                         shift and go to state 81
    expcmplog                      shift and go to state 82
    valor                          shift and go to state 13

state 51

    (28) oplog -> BOOLEAN_OR .

    LPAREN          reduce using rule 28 (oplog -> BOOLEAN_OR .)
    ID              reduce using rule 28 (oplog -> BOOLEAN_OR .)
    NUMBER          reduce using rule 28 (oplog -> BOOLEAN_OR .)
    BOOLEAN         reduce using rule 28 (oplog -> BOOLEAN_OR .)
    CADENA          reduce using rule 28 (oplog -> BOOLEAN_OR .)


state 52

    (29) oplog -> BOOLEAN_AND .

    LPAREN          reduce using rule 29 (oplog -> BOOLEAN_AND .)
    ID              reduce using rule 29 (oplog -> BOOLEAN_AND .)
    NUMBER          reduce using rule 29 (oplog -> BOOLEAN_AND .)
    BOOLEAN         reduce using rule 29 (oplog -> BOOLEAN_AND .)
    CADENA          reduce using rule 29 (oplog -> BOOLEAN_AND .)


state 53

    (30) oplog -> AND .

    LPAREN          reduce using rule 30 (oplog -> AND .)
    ID              reduce using rule 30 (oplog -> AND .)
    NUMBER          reduce using rule 30 (oplog -> AND .)
    BOOLEAN         reduce using rule 30 (oplog -> AND .)
    CADENA          reduce using rule 30 (oplog -> AND .)


state 54

    (31) oplog -> OR .

    LPAREN          reduce using rule 31 (oplog -> OR .)
    ID              reduce using rule 31 (oplog -> OR .)
    NUMBER          reduce using rule 31 (oplog -> OR .)
    BOOLEAN         reduce using rule 31 (oplog -> OR .)
    CADENA          reduce using rule 31 (oplog -> OR .)


state 55

    (50) funcion -> FUNCTION NFUNCION . ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (51) funcion -> FUNCTION NFUNCION . ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE

    ID              shift and go to state 83


state 56

    (55) impresion -> ECHO valor . PCOMA

    PCOMA           shift and go to state 84


state 57

    (56) impresion -> PRINT valor . PCOMA

    PCOMA           shift and go to state 85


state 58

    (57) impresion -> PRINT expresionmat . PCOMA

    PCOMA           shift and go to state 86


state 59

    (15) valor -> NUMBER .
    (42) expresionmat -> NUMBER . operadormat NUMBER
    (43) operadormat -> . PLUS
    (44) operadormat -> . MINUS
    (45) operadormat -> . TIMES
    (46) operadormat -> . DIVIDE

    PCOMA           reduce using rule 15 (valor -> NUMBER .)
    IGUAL           reduce using rule 15 (valor -> NUMBER .)
    MAYOR           reduce using rule 15 (valor -> NUMBER .)
    MENOR           reduce using rule 15 (valor -> NUMBER .)
    MAYORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    MENORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 65

    operadormat                    shift and go to state 61

state 60

    (64) repeticion -> FOR LPAREN . ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    ID              shift and go to state 87


state 61

    (42) expresionmat -> NUMBER operadormat . NUMBER

    NUMBER          shift and go to state 88


state 62

    (43) operadormat -> PLUS .

    NUMBER          reduce using rule 43 (operadormat -> PLUS .)


state 63

    (44) operadormat -> MINUS .

    NUMBER          reduce using rule 44 (operadormat -> MINUS .)


state 64

    (45) operadormat -> TIMES .

    NUMBER          reduce using rule 45 (operadormat -> TIMES .)


state 65

    (46) operadormat -> DIVIDE .

    NUMBER          reduce using rule 46 (operadormat -> DIVIDE .)


state 66

    (65) repeticion -> WHILE LPAREN . ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE

    ID              shift and go to state 89


state 67

    (66) repeticion -> DO LLLAVE . sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (49) funcion -> . sort
    (50) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (55) impresion -> . ECHO valor PCOMA
    (56) impresion -> . PRINT valor PCOMA
    (57) impresion -> . PRINT expresionmat PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (47) expresion -> . expresionmat
    (48) expresion -> . expcmplog
    (54) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (39) estdatos -> . array
    (40) estdatos -> . array_map
    (41) estdatos -> . heap
    (38) sort -> . SORT LPAREN ID RPAREN PCOMA
    (42) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (36) array -> . ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
    (37) array -> . ARRAY LPAREN valor RPAREN
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (23) expcmp -> . valor opcomparacion valor
    (24) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    sentencias                     shift and go to state 90
    valor                          shift and go to state 13
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 68

    (54) excepcion -> TRY LLLAVE . sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (49) funcion -> . sort
    (50) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (55) impresion -> . ECHO valor PCOMA
    (56) impresion -> . PRINT valor PCOMA
    (57) impresion -> . PRINT expresionmat PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (47) expresion -> . expresionmat
    (48) expresion -> . expcmplog
    (54) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (39) estdatos -> . array
    (40) estdatos -> . array_map
    (41) estdatos -> . heap
    (38) sort -> . SORT LPAREN ID RPAREN PCOMA
    (42) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (36) array -> . ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
    (37) array -> . ARRAY LPAREN valor RPAREN
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (23) expcmp -> . valor opcomparacion valor
    (24) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    sentencias                     shift and go to state 91
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 69

    (38) sort -> SORT LPAREN . ID RPAREN PCOMA

    ID              shift and go to state 92


state 70

    (36) array -> ARRAY LPAREN . valor DOUBLE_ARROW valor RPAREN
    (37) array -> ARRAY LPAREN . valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 48
    NUMBER          shift and go to state 49
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 93

state 71

    (67) array_map -> ARRAY_MAP LPAREN . funcion COMA array RPAREN PCOMA
    (49) funcion -> . sort
    (50) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (38) sort -> . SORT LPAREN ID RPAREN PCOMA

    FUNCTION        shift and go to state 19
    SORT            shift and go to state 32

    funcion                        shift and go to state 94
    sort                           shift and go to state 18

state 72

    (68) heap -> INSERT LPAREN . LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> INSERT LPAREN . ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

    LCORCH          shift and go to state 95
    ARRAY           shift and go to state 96


state 73

    (10) asignacion -> ID ASIGNACION valor . PCOMA
    (23) expcmp -> valor . opcomparacion valor
    (18) opcomparacion -> . IGUAL
    (19) opcomparacion -> . MAYOR
    (20) opcomparacion -> . MENOR
    (21) opcomparacion -> . MAYORIGUAL
    (22) opcomparacion -> . MENORIGUAL

    PCOMA           shift and go to state 97
    IGUAL           shift and go to state 41
    MAYOR           shift and go to state 42
    MENOR           shift and go to state 43
    MAYORIGUAL      shift and go to state 44
    MENORIGUAL      shift and go to state 45

    opcomparacion                  shift and go to state 40

state 74

    (12) asignacion -> ID ASIGNACION estdatos . PCOMA

    PCOMA           shift and go to state 98


state 75

    (13) asignacion -> ID ASIGNACION expresion . PCOMA

    PCOMA           shift and go to state 99


state 76

    (11) asignacion -> ID REF ID . PCOMA

    PCOMA           shift and go to state 100


state 77

    (23) expcmp -> valor opcomparacion valor .

    BOOLEAN_OR      reduce using rule 23 (expcmp -> valor opcomparacion valor .)
    BOOLEAN_AND     reduce using rule 23 (expcmp -> valor opcomparacion valor .)
    AND             reduce using rule 23 (expcmp -> valor opcomparacion valor .)
    OR              reduce using rule 23 (expcmp -> valor opcomparacion valor .)
    RPAREN          reduce using rule 23 (expcmp -> valor opcomparacion valor .)
    FIN             reduce using rule 23 (expcmp -> valor opcomparacion valor .)
    PCOMA           reduce using rule 23 (expcmp -> valor opcomparacion valor .)
    ID              reduce using rule 23 (expcmp -> valor opcomparacion valor .)
    RLLAVE          reduce using rule 23 (expcmp -> valor opcomparacion valor .)
    RETURN          reduce using rule 23 (expcmp -> valor opcomparacion valor .)


state 78

    (32) comparacion -> IF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> IF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> IF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (26) expcmplog -> expcmp . oplog expcmp
    (27) expcmplog -> expcmp . oplog expcmplog
    (28) oplog -> . BOOLEAN_OR
    (29) oplog -> . BOOLEAN_AND
    (30) oplog -> . AND
    (31) oplog -> . OR

    RPAREN          shift and go to state 101
    BOOLEAN_OR      shift and go to state 51
    BOOLEAN_AND     shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54

    oplog                          shift and go to state 50

state 79

    (33) comparacion -> IF LPAREN expcmplog . RPAREN LLLAVE sentencias RLLAVE

    RPAREN          shift and go to state 102


state 80

    (24) expcmp -> LPAREN valor opcomparacion . valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> LPAREN valor opcomparacion . valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 48
    NUMBER          shift and go to state 49
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 103

state 81

    (26) expcmplog -> expcmp oplog expcmp .
    (26) expcmplog -> expcmp . oplog expcmp
    (27) expcmplog -> expcmp . oplog expcmplog
    (28) oplog -> . BOOLEAN_OR
    (29) oplog -> . BOOLEAN_AND
    (30) oplog -> . AND
    (31) oplog -> . OR

    FIN             reduce using rule 26 (expcmplog -> expcmp oplog expcmp .)
    PCOMA           reduce using rule 26 (expcmplog -> expcmp oplog expcmp .)
    RPAREN          reduce using rule 26 (expcmplog -> expcmp oplog expcmp .)
    ID              reduce using rule 26 (expcmplog -> expcmp oplog expcmp .)
    RLLAVE          reduce using rule 26 (expcmplog -> expcmp oplog expcmp .)
    RETURN          reduce using rule 26 (expcmplog -> expcmp oplog expcmp .)
    BOOLEAN_OR      shift and go to state 51
    BOOLEAN_AND     shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54

    oplog                          shift and go to state 50

state 82

    (27) expcmplog -> expcmp oplog expcmplog .

    FIN             reduce using rule 27 (expcmplog -> expcmp oplog expcmplog .)
    PCOMA           reduce using rule 27 (expcmplog -> expcmp oplog expcmplog .)
    RPAREN          reduce using rule 27 (expcmplog -> expcmp oplog expcmplog .)
    ID              reduce using rule 27 (expcmplog -> expcmp oplog expcmplog .)
    RLLAVE          reduce using rule 27 (expcmplog -> expcmp oplog expcmplog .)
    RETURN          reduce using rule 27 (expcmplog -> expcmp oplog expcmplog .)


state 83

    (50) funcion -> FUNCTION NFUNCION ID . LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (51) funcion -> FUNCTION NFUNCION ID . LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE

    LPAREN          shift and go to state 104


state 84

    (55) impresion -> ECHO valor PCOMA .

    FIN             reduce using rule 55 (impresion -> ECHO valor PCOMA .)
    ID              reduce using rule 55 (impresion -> ECHO valor PCOMA .)
    RLLAVE          reduce using rule 55 (impresion -> ECHO valor PCOMA .)
    RETURN          reduce using rule 55 (impresion -> ECHO valor PCOMA .)


state 85

    (56) impresion -> PRINT valor PCOMA .

    FIN             reduce using rule 56 (impresion -> PRINT valor PCOMA .)
    ID              reduce using rule 56 (impresion -> PRINT valor PCOMA .)
    RLLAVE          reduce using rule 56 (impresion -> PRINT valor PCOMA .)
    RETURN          reduce using rule 56 (impresion -> PRINT valor PCOMA .)


state 86

    (57) impresion -> PRINT expresionmat PCOMA .

    FIN             reduce using rule 57 (impresion -> PRINT expresionmat PCOMA .)
    ID              reduce using rule 57 (impresion -> PRINT expresionmat PCOMA .)
    RLLAVE          reduce using rule 57 (impresion -> PRINT expresionmat PCOMA .)
    RETURN          reduce using rule 57 (impresion -> PRINT expresionmat PCOMA .)


state 87

    (64) repeticion -> FOR LPAREN ID . ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    ASIGNACION      shift and go to state 105


state 88

    (42) expresionmat -> NUMBER operadormat NUMBER .

    FIN             reduce using rule 42 (expresionmat -> NUMBER operadormat NUMBER .)
    PCOMA           reduce using rule 42 (expresionmat -> NUMBER operadormat NUMBER .)
    ID              reduce using rule 42 (expresionmat -> NUMBER operadormat NUMBER .)
    RLLAVE          reduce using rule 42 (expresionmat -> NUMBER operadormat NUMBER .)
    RETURN          reduce using rule 42 (expresionmat -> NUMBER operadormat NUMBER .)


state 89

    (65) repeticion -> WHILE LPAREN ID . opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (18) opcomparacion -> . IGUAL
    (19) opcomparacion -> . MAYOR
    (20) opcomparacion -> . MENOR
    (21) opcomparacion -> . MAYORIGUAL
    (22) opcomparacion -> . MENORIGUAL

    IGUAL           shift and go to state 41
    MAYOR           shift and go to state 42
    MENOR           shift and go to state 43
    MAYORIGUAL      shift and go to state 44
    MENORIGUAL      shift and go to state 45

    opcomparacion                  shift and go to state 106

state 90

    (66) repeticion -> DO LLLAVE sentencias . ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    ID              shift and go to state 107


state 91

    (54) excepcion -> TRY LLLAVE sentencias . RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    RLLAVE          shift and go to state 108


state 92

    (38) sort -> SORT LPAREN ID . RPAREN PCOMA

    RPAREN          shift and go to state 109


state 93

    (36) array -> ARRAY LPAREN valor . DOUBLE_ARROW valor RPAREN
    (37) array -> ARRAY LPAREN valor . RPAREN

    DOUBLE_ARROW    shift and go to state 110
    RPAREN          shift and go to state 111


state 94

    (67) array_map -> ARRAY_MAP LPAREN funcion . COMA array RPAREN PCOMA

    COMA            shift and go to state 112


state 95

    (68) heap -> INSERT LPAREN LCORCH . NUMBER COMA NUMBER RCORCH RPAREN PCOMA

    NUMBER          shift and go to state 113


state 96

    (69) heap -> INSERT LPAREN ARRAY . LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

    LPAREN          shift and go to state 114


state 97

    (10) asignacion -> ID ASIGNACION valor PCOMA .

    FIN             reduce using rule 10 (asignacion -> ID ASIGNACION valor PCOMA .)
    ID              reduce using rule 10 (asignacion -> ID ASIGNACION valor PCOMA .)
    RLLAVE          reduce using rule 10 (asignacion -> ID ASIGNACION valor PCOMA .)
    RETURN          reduce using rule 10 (asignacion -> ID ASIGNACION valor PCOMA .)


state 98

    (12) asignacion -> ID ASIGNACION estdatos PCOMA .

    FIN             reduce using rule 12 (asignacion -> ID ASIGNACION estdatos PCOMA .)
    ID              reduce using rule 12 (asignacion -> ID ASIGNACION estdatos PCOMA .)
    RLLAVE          reduce using rule 12 (asignacion -> ID ASIGNACION estdatos PCOMA .)
    RETURN          reduce using rule 12 (asignacion -> ID ASIGNACION estdatos PCOMA .)


state 99

    (13) asignacion -> ID ASIGNACION expresion PCOMA .

    FIN             reduce using rule 13 (asignacion -> ID ASIGNACION expresion PCOMA .)
    ID              reduce using rule 13 (asignacion -> ID ASIGNACION expresion PCOMA .)
    RLLAVE          reduce using rule 13 (asignacion -> ID ASIGNACION expresion PCOMA .)
    RETURN          reduce using rule 13 (asignacion -> ID ASIGNACION expresion PCOMA .)


state 100

    (11) asignacion -> ID REF ID PCOMA .

    FIN             reduce using rule 11 (asignacion -> ID REF ID PCOMA .)
    ID              reduce using rule 11 (asignacion -> ID REF ID PCOMA .)
    RLLAVE          reduce using rule 11 (asignacion -> ID REF ID PCOMA .)
    RETURN          reduce using rule 11 (asignacion -> ID REF ID PCOMA .)


state 101

    (32) comparacion -> IF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE
    (34) comparacion -> IF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> IF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 115


state 102

    (33) comparacion -> IF LPAREN expcmplog RPAREN . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 116


state 103

    (24) expcmp -> LPAREN valor opcomparacion valor . RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> LPAREN valor opcomparacion valor . RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp

    RPAREN          shift and go to state 117


state 104

    (50) funcion -> FUNCTION NFUNCION ID LPAREN . args RPAREN LLLAVE sentencias RLLAVE
    (51) funcion -> FUNCTION NFUNCION ID LPAREN . args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (52) args -> . ID
    (53) args -> . ID args

    ID              shift and go to state 118

    args                           shift and go to state 119

state 105

    (64) repeticion -> FOR LPAREN ID ASIGNACION . NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    NUMBER          shift and go to state 120


state 106

    (65) repeticion -> WHILE LPAREN ID opcomparacion . valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 48
    NUMBER          shift and go to state 49
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 121

state 107

    (66) repeticion -> DO LLLAVE sentencias ID . actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (62) actualizar -> . INCREMENTO
    (63) actualizar -> . DECREMENTO

    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124

    actualizar                     shift and go to state 122

state 108

    (54) excepcion -> TRY LLLAVE sentencias RLLAVE . CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    CATCH           shift and go to state 125


state 109

    (38) sort -> SORT LPAREN ID RPAREN . PCOMA

    PCOMA           shift and go to state 126


state 110

    (36) array -> ARRAY LPAREN valor DOUBLE_ARROW . valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 48
    NUMBER          shift and go to state 49
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 127

state 111

    (37) array -> ARRAY LPAREN valor RPAREN .

    FIN             reduce using rule 37 (array -> ARRAY LPAREN valor RPAREN .)
    PCOMA           reduce using rule 37 (array -> ARRAY LPAREN valor RPAREN .)
    ID              reduce using rule 37 (array -> ARRAY LPAREN valor RPAREN .)
    RLLAVE          reduce using rule 37 (array -> ARRAY LPAREN valor RPAREN .)
    RPAREN          reduce using rule 37 (array -> ARRAY LPAREN valor RPAREN .)
    RETURN          reduce using rule 37 (array -> ARRAY LPAREN valor RPAREN .)


state 112

    (67) array_map -> ARRAY_MAP LPAREN funcion COMA . array RPAREN PCOMA
    (36) array -> . ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
    (37) array -> . ARRAY LPAREN valor RPAREN

    ARRAY           shift and go to state 33

    array                          shift and go to state 128

state 113

    (68) heap -> INSERT LPAREN LCORCH NUMBER . COMA NUMBER RCORCH RPAREN PCOMA

    COMA            shift and go to state 129


state 114

    (69) heap -> INSERT LPAREN ARRAY LPAREN . valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 48
    NUMBER          shift and go to state 49
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 130

state 115

    (32) comparacion -> IF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE
    (34) comparacion -> IF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (49) funcion -> . sort
    (50) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (55) impresion -> . ECHO valor PCOMA
    (56) impresion -> . PRINT valor PCOMA
    (57) impresion -> . PRINT expresionmat PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (47) expresion -> . expresionmat
    (48) expresion -> . expcmplog
    (54) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (39) estdatos -> . array
    (40) estdatos -> . array_map
    (41) estdatos -> . heap
    (38) sort -> . SORT LPAREN ID RPAREN PCOMA
    (42) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (36) array -> . ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
    (37) array -> . ARRAY LPAREN valor RPAREN
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (23) expcmp -> . valor opcomparacion valor
    (24) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    expcmp                         shift and go to state 16
    sentencias                     shift and go to state 131
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 116

    (33) comparacion -> IF LPAREN expcmplog RPAREN LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (49) funcion -> . sort
    (50) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (55) impresion -> . ECHO valor PCOMA
    (56) impresion -> . PRINT valor PCOMA
    (57) impresion -> . PRINT expresionmat PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (47) expresion -> . expresionmat
    (48) expresion -> . expcmplog
    (54) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (39) estdatos -> . array
    (40) estdatos -> . array_map
    (41) estdatos -> . heap
    (38) sort -> . SORT LPAREN ID RPAREN PCOMA
    (42) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (36) array -> . ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
    (37) array -> . ARRAY LPAREN valor RPAREN
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (23) expcmp -> . valor opcomparacion valor
    (24) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    expcmplog                      shift and go to state 17
    sentencias                     shift and go to state 132
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmp                         shift and go to state 16
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 117

    (24) expcmp -> LPAREN valor opcomparacion valor RPAREN . oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN . oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (28) oplog -> . BOOLEAN_OR
    (29) oplog -> . BOOLEAN_AND
    (30) oplog -> . AND
    (31) oplog -> . OR

    BOOLEAN_OR      shift and go to state 51
    BOOLEAN_AND     shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54

    oplog                          shift and go to state 133

state 118

    (52) args -> ID .
    (53) args -> ID . args
    (52) args -> . ID
    (53) args -> . ID args

    RPAREN          reduce using rule 52 (args -> ID .)
    ID              shift and go to state 118

    args                           shift and go to state 134

state 119

    (50) funcion -> FUNCTION NFUNCION ID LPAREN args . RPAREN LLLAVE sentencias RLLAVE
    (51) funcion -> FUNCTION NFUNCION ID LPAREN args . RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE

    RPAREN          shift and go to state 135


state 120

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER . PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    PCOMA           shift and go to state 136


state 121

    (65) repeticion -> WHILE LPAREN ID opcomparacion valor . RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE

    RPAREN          shift and go to state 137


state 122

    (66) repeticion -> DO LLLAVE sentencias ID actualizar . PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    PCOMA           shift and go to state 138


state 123

    (62) actualizar -> INCREMENTO .

    PCOMA           reduce using rule 62 (actualizar -> INCREMENTO .)
    RPAREN          reduce using rule 62 (actualizar -> INCREMENTO .)


state 124

    (63) actualizar -> DECREMENTO .

    PCOMA           reduce using rule 63 (actualizar -> DECREMENTO .)
    RPAREN          reduce using rule 63 (actualizar -> DECREMENTO .)


state 125

    (54) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH . LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    LPAREN          shift and go to state 139


state 126

    (38) sort -> SORT LPAREN ID RPAREN PCOMA .

    FIN             reduce using rule 38 (sort -> SORT LPAREN ID RPAREN PCOMA .)
    ID              reduce using rule 38 (sort -> SORT LPAREN ID RPAREN PCOMA .)
    RLLAVE          reduce using rule 38 (sort -> SORT LPAREN ID RPAREN PCOMA .)
    COMA            reduce using rule 38 (sort -> SORT LPAREN ID RPAREN PCOMA .)
    RETURN          reduce using rule 38 (sort -> SORT LPAREN ID RPAREN PCOMA .)


state 127

    (36) array -> ARRAY LPAREN valor DOUBLE_ARROW valor . RPAREN

    RPAREN          shift and go to state 140


state 128

    (67) array_map -> ARRAY_MAP LPAREN funcion COMA array . RPAREN PCOMA

    RPAREN          shift and go to state 141


state 129

    (68) heap -> INSERT LPAREN LCORCH NUMBER COMA . NUMBER RCORCH RPAREN PCOMA

    NUMBER          shift and go to state 142


state 130

    (69) heap -> INSERT LPAREN ARRAY LPAREN valor . DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

    DOUBLE_ARROW    shift and go to state 143


state 131

    (32) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE
    (34) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    RLLAVE          shift and go to state 144


state 132

    (33) comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 145


state 133

    (24) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog . LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog . LPAREN valor opcomparacion valor RPAREN oplog expcmp

    LPAREN          shift and go to state 146


state 134

    (53) args -> ID args .

    RPAREN          reduce using rule 53 (args -> ID args .)


state 135

    (50) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN . LLLAVE sentencias RLLAVE
    (51) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN . LLLAVE sentencias RETURN valor PCOMA RLLAVE

    LLLAVE          shift and go to state 147


state 136

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA . ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    ID              shift and go to state 148


state 137

    (65) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN . LLLAVE sentencias ID actualizar PCOMA RLLAVE

    LLLAVE          shift and go to state 149


state 138

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA . RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    RLLAVE          shift and go to state 150


state 139

    (54) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN . EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    EXCEPTION       shift and go to state 151


state 140

    (36) array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN .

    FIN             reduce using rule 36 (array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN .)
    PCOMA           reduce using rule 36 (array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN .)
    ID              reduce using rule 36 (array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN .)
    RLLAVE          reduce using rule 36 (array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN .)
    RPAREN          reduce using rule 36 (array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN .)
    RETURN          reduce using rule 36 (array -> ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN .)


state 141

    (67) array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN . PCOMA

    PCOMA           shift and go to state 152


state 142

    (68) heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER . RCORCH RPAREN PCOMA

    RCORCH          shift and go to state 153


state 143

    (69) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW . NUMBER RPAREN RPAREN PCOMA

    NUMBER          shift and go to state 154


state 144

    (32) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .
    (34) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE . ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE . ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    FIN             reduce using rule 32 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 32 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 32 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 32 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    ELSE            shift and go to state 155
    ELSEIF          shift and go to state 156


state 145

    (33) comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 33 (comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 33 (comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 33 (comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 33 (comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .)


state 146

    (24) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN . valor opcomparacion valor RPAREN
    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN . valor opcomparacion valor RPAREN oplog expcmp
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 48
    NUMBER          shift and go to state 49
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 157

state 147

    (50) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE . sentencias RLLAVE
    (51) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE . sentencias RETURN valor PCOMA RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (49) funcion -> . sort
    (50) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (55) impresion -> . ECHO valor PCOMA
    (56) impresion -> . PRINT valor PCOMA
    (57) impresion -> . PRINT expresionmat PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (47) expresion -> . expresionmat
    (48) expresion -> . expcmplog
    (54) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (39) estdatos -> . array
    (40) estdatos -> . array_map
    (41) estdatos -> . heap
    (38) sort -> . SORT LPAREN ID RPAREN PCOMA
    (42) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (36) array -> . ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
    (37) array -> . ARRAY LPAREN valor RPAREN
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (23) expcmp -> . valor opcomparacion valor
    (24) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    sentencias                     shift and go to state 158
    valor                          shift and go to state 13
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 148

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID . repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (58) repeticionrep -> . MAYOR
    (59) repeticionrep -> . MENOR
    (60) repeticionrep -> . MAYORIGUAL
    (61) repeticionrep -> . MENORIGUAL

    MAYOR           shift and go to state 160
    MENOR           shift and go to state 161
    MAYORIGUAL      shift and go to state 162
    MENORIGUAL      shift and go to state 163

    repeticionrep                  shift and go to state 159

state 149

    (65) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE . sentencias ID actualizar PCOMA RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (49) funcion -> . sort
    (50) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (55) impresion -> . ECHO valor PCOMA
    (56) impresion -> . PRINT valor PCOMA
    (57) impresion -> . PRINT expresionmat PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (47) expresion -> . expresionmat
    (48) expresion -> . expcmplog
    (54) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (39) estdatos -> . array
    (40) estdatos -> . array_map
    (41) estdatos -> . heap
    (38) sort -> . SORT LPAREN ID RPAREN PCOMA
    (42) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (36) array -> . ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
    (37) array -> . ARRAY LPAREN valor RPAREN
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (23) expcmp -> . valor opcomparacion valor
    (24) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 13
    sentencias                     shift and go to state 164
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 150

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE . WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    WHILE           shift and go to state 165


state 151

    (54) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION . ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    ID              shift and go to state 166


state 152

    (67) array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .

    FIN             reduce using rule 67 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)
    PCOMA           reduce using rule 67 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)
    ID              reduce using rule 67 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)
    RLLAVE          reduce using rule 67 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)
    RETURN          reduce using rule 67 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)


state 153

    (68) heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH . RPAREN PCOMA

    RPAREN          shift and go to state 167


state 154

    (69) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER . RPAREN RPAREN PCOMA

    RPAREN          shift and go to state 168


state 155

    (34) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 169


state 156

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LPAREN          shift and go to state 170


state 157

    (24) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor . opcomparacion valor RPAREN
    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor . opcomparacion valor RPAREN oplog expcmp
    (18) opcomparacion -> . IGUAL
    (19) opcomparacion -> . MAYOR
    (20) opcomparacion -> . MENOR
    (21) opcomparacion -> . MAYORIGUAL
    (22) opcomparacion -> . MENORIGUAL

    IGUAL           shift and go to state 41
    MAYOR           shift and go to state 42
    MENOR           shift and go to state 43
    MAYORIGUAL      shift and go to state 44
    MENORIGUAL      shift and go to state 45

    opcomparacion                  shift and go to state 171

state 158

    (50) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias . RLLAVE
    (51) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias . RETURN valor PCOMA RLLAVE

    RLLAVE          shift and go to state 172
    RETURN          shift and go to state 173


state 159

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep . NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    NUMBER          shift and go to state 174


state 160

    (58) repeticionrep -> MAYOR .

    NUMBER          reduce using rule 58 (repeticionrep -> MAYOR .)


state 161

    (59) repeticionrep -> MENOR .

    NUMBER          reduce using rule 59 (repeticionrep -> MENOR .)


state 162

    (60) repeticionrep -> MAYORIGUAL .

    NUMBER          reduce using rule 60 (repeticionrep -> MAYORIGUAL .)


state 163

    (61) repeticionrep -> MENORIGUAL .

    NUMBER          reduce using rule 61 (repeticionrep -> MENORIGUAL .)


state 164

    (65) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias . ID actualizar PCOMA RLLAVE

    ID              shift and go to state 175


state 165

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE . LPAREN ID opcomparacion valor RPAREN PCOMA

    LPAREN          shift and go to state 176


state 166

    (54) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID . RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    RPAREN          shift and go to state 177


state 167

    (68) heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN . PCOMA

    PCOMA           shift and go to state 178


state 168

    (69) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN . RPAREN PCOMA

    RPAREN          shift and go to state 179


state 169

    (34) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (49) funcion -> . sort
    (50) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (55) impresion -> . ECHO valor PCOMA
    (56) impresion -> . PRINT valor PCOMA
    (57) impresion -> . PRINT expresionmat PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (47) expresion -> . expresionmat
    (48) expresion -> . expcmplog
    (54) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (39) estdatos -> . array
    (40) estdatos -> . array_map
    (41) estdatos -> . heap
    (38) sort -> . SORT LPAREN ID RPAREN PCOMA
    (42) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (36) array -> . ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
    (37) array -> . ARRAY LPAREN valor RPAREN
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (23) expcmp -> . valor opcomparacion valor
    (24) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    expcmp                         shift and go to state 16
    sentencias                     shift and go to state 180
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 170

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (23) expcmp -> . valor opcomparacion valor
    (24) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    LPAREN          shift and go to state 15
    ID              shift and go to state 48
    NUMBER          shift and go to state 49
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    expcmp                         shift and go to state 181
    valor                          shift and go to state 13

state 171

    (24) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion . valor RPAREN
    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion . valor RPAREN oplog expcmp
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 48
    NUMBER          shift and go to state 49
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 182

state 172

    (50) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 50 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 50 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 50 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .)
    COMA            reduce using rule 50 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 50 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE .)


state 173

    (51) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN . valor PCOMA RLLAVE
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 48
    NUMBER          shift and go to state 49
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 183

state 174

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER . PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    PCOMA           shift and go to state 184


state 175

    (65) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID . actualizar PCOMA RLLAVE
    (62) actualizar -> . INCREMENTO
    (63) actualizar -> . DECREMENTO

    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124

    actualizar                     shift and go to state 185

state 176

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN . ID opcomparacion valor RPAREN PCOMA

    ID              shift and go to state 186


state 177

    (54) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN . LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    LLLAVE          shift and go to state 187


state 178

    (68) heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .

    FIN             reduce using rule 68 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)
    PCOMA           reduce using rule 68 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)
    ID              reduce using rule 68 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)
    RLLAVE          reduce using rule 68 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)
    RETURN          reduce using rule 68 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)


state 179

    (69) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN . PCOMA

    PCOMA           shift and go to state 188


state 180

    (34) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 189


state 181

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    RPAREN          shift and go to state 190


state 182

    (24) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor . RPAREN
    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor . RPAREN oplog expcmp

    RPAREN          shift and go to state 191


state 183

    (51) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor . PCOMA RLLAVE

    PCOMA           shift and go to state 192


state 184

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA . ID actualizar RPAREN LLLAVE sentencias RLLAVE

    ID              shift and go to state 193


state 185

    (65) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar . PCOMA RLLAVE

    PCOMA           shift and go to state 194


state 186

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID . opcomparacion valor RPAREN PCOMA
    (18) opcomparacion -> . IGUAL
    (19) opcomparacion -> . MAYOR
    (20) opcomparacion -> . MENOR
    (21) opcomparacion -> . MAYORIGUAL
    (22) opcomparacion -> . MENORIGUAL

    IGUAL           shift and go to state 41
    MAYOR           shift and go to state 42
    MENOR           shift and go to state 43
    MAYORIGUAL      shift and go to state 44
    MENORIGUAL      shift and go to state 45

    opcomparacion                  shift and go to state 195

state 187

    (54) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE . ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    ECHO            shift and go to state 196


state 188

    (69) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .

    FIN             reduce using rule 69 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)
    PCOMA           reduce using rule 69 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)
    ID              reduce using rule 69 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)
    RLLAVE          reduce using rule 69 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)
    RETURN          reduce using rule 69 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)


state 189

    (34) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 34 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 34 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 34 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 34 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)


state 190

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 197


state 191

    (24) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .
    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN . oplog expcmp
    (28) oplog -> . BOOLEAN_OR
    (29) oplog -> . BOOLEAN_AND
    (30) oplog -> . AND
    (31) oplog -> . OR

  ! shift/reduce conflict for BOOLEAN_OR resolved as shift
  ! shift/reduce conflict for BOOLEAN_AND resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 24 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    FIN             reduce using rule 24 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    PCOMA           reduce using rule 24 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    ID              reduce using rule 24 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    RLLAVE          reduce using rule 24 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    RETURN          reduce using rule 24 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    BOOLEAN_OR      shift and go to state 51
    BOOLEAN_AND     shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54

  ! BOOLEAN_OR      [ reduce using rule 24 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .) ]
  ! BOOLEAN_AND     [ reduce using rule 24 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .) ]
  ! AND             [ reduce using rule 24 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .) ]
  ! OR              [ reduce using rule 24 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .) ]

    oplog                          shift and go to state 198

state 192

    (51) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA . RLLAVE

    RLLAVE          shift and go to state 199


state 193

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID . actualizar RPAREN LLLAVE sentencias RLLAVE
    (62) actualizar -> . INCREMENTO
    (63) actualizar -> . DECREMENTO

    INCREMENTO      shift and go to state 123
    DECREMENTO      shift and go to state 124

    actualizar                     shift and go to state 200

state 194

    (65) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA . RLLAVE

    RLLAVE          shift and go to state 201


state 195

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion . valor RPAREN PCOMA
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 48
    NUMBER          shift and go to state 49
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 202

state 196

    (54) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO . CADENA COMA ID FLECHA GETMESSAGE RLLAVE

    CADENA          shift and go to state 203


state 197

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (49) funcion -> . sort
    (50) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (55) impresion -> . ECHO valor PCOMA
    (56) impresion -> . PRINT valor PCOMA
    (57) impresion -> . PRINT expresionmat PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (47) expresion -> . expresionmat
    (48) expresion -> . expcmplog
    (54) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (39) estdatos -> . array
    (40) estdatos -> . array_map
    (41) estdatos -> . heap
    (38) sort -> . SORT LPAREN ID RPAREN PCOMA
    (42) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (36) array -> . ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
    (37) array -> . ARRAY LPAREN valor RPAREN
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (23) expcmp -> . valor opcomparacion valor
    (24) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    expcmp                         shift and go to state 16
    sentencias                     shift and go to state 204
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 198

    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog . expcmp
    (23) expcmp -> . valor opcomparacion valor
    (24) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    LPAREN          shift and go to state 15
    ID              shift and go to state 48
    NUMBER          shift and go to state 49
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    valor                          shift and go to state 13
    expcmp                         shift and go to state 205

state 199

    (51) funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .

    FIN             reduce using rule 51 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)
    ID              reduce using rule 51 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)
    RLLAVE          reduce using rule 51 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)
    COMA            reduce using rule 51 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)
    RETURN          reduce using rule 51 (funcion -> FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)


state 200

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar . RPAREN LLLAVE sentencias RLLAVE

    RPAREN          shift and go to state 206


state 201

    (65) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .

    FIN             reduce using rule 65 (repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .)
    ID              reduce using rule 65 (repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .)
    RLLAVE          reduce using rule 65 (repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .)
    RETURN          reduce using rule 65 (repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .)


state 202

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor . RPAREN PCOMA

    RPAREN          shift and go to state 207


state 203

    (54) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA . COMA ID FLECHA GETMESSAGE RLLAVE

    COMA            shift and go to state 208


state 204

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE ELSE LLLAVE sentencias RLLAVE

    RLLAVE          shift and go to state 209


state 205

    (25) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .

    BOOLEAN_OR      reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    BOOLEAN_AND     reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    AND             reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    OR              reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    RPAREN          reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    FIN             reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    PCOMA           reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    ID              reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    RLLAVE          reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)
    RETURN          reduce using rule 25 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp .)


state 206

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 210


state 207

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN . PCOMA

    PCOMA           shift and go to state 211


state 208

    (54) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA . ID FLECHA GETMESSAGE RLLAVE

    ID              shift and go to state 212


state 209

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE . ELSE LLLAVE sentencias RLLAVE

    ELSE            shift and go to state 213


state 210

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (49) funcion -> . sort
    (50) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (55) impresion -> . ECHO valor PCOMA
    (56) impresion -> . PRINT valor PCOMA
    (57) impresion -> . PRINT expresionmat PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (47) expresion -> . expresionmat
    (48) expresion -> . expcmplog
    (54) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (39) estdatos -> . array
    (40) estdatos -> . array_map
    (41) estdatos -> . heap
    (38) sort -> . SORT LPAREN ID RPAREN PCOMA
    (42) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (36) array -> . ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
    (37) array -> . ARRAY LPAREN valor RPAREN
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (23) expcmp -> . valor opcomparacion valor
    (24) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    sentencias                     shift and go to state 214
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 211

    (66) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .

    FIN             reduce using rule 66 (repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .)
    ID              reduce using rule 66 (repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .)
    RLLAVE          reduce using rule 66 (repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .)
    RETURN          reduce using rule 66 (repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .)


state 212

    (54) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID . FLECHA GETMESSAGE RLLAVE

    FLECHA          shift and go to state 215


state 213

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 216


state 214

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 217


state 215

    (54) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA . GETMESSAGE RLLAVE

    GETMESSAGE      shift and go to state 218


state 216

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (32) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (33) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (49) funcion -> . sort
    (50) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (51) funcion -> . FUNCTION NFUNCION ID LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (55) impresion -> . ECHO valor PCOMA
    (56) impresion -> . PRINT valor PCOMA
    (57) impresion -> . PRINT expresionmat PCOMA
    (64) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (66) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (47) expresion -> . expresionmat
    (48) expresion -> . expcmplog
    (54) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE
    (39) estdatos -> . array
    (40) estdatos -> . array_map
    (41) estdatos -> . heap
    (38) sort -> . SORT LPAREN ID RPAREN PCOMA
    (42) expresionmat -> . NUMBER operadormat NUMBER
    (26) expcmplog -> . expcmp oplog expcmp
    (27) expcmplog -> . expcmp oplog expcmplog
    (36) array -> . ARRAY LPAREN valor DOUBLE_ARROW valor RPAREN
    (37) array -> . ARRAY LPAREN valor RPAREN
    (67) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (68) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (69) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (23) expcmp -> . valor opcomparacion valor
    (24) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (25) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN oplog expcmp
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . BOOLEAN
    (17) valor -> . CADENA

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    NUMBER          shift and go to state 24
    ARRAY           shift and go to state 33
    ARRAY_MAP       shift and go to state 34
    INSERT          shift and go to state 35
    LPAREN          shift and go to state 15
    BOOLEAN         shift and go to state 36
    CADENA          shift and go to state 28

    expcmp                         shift and go to state 16
    sentencias                     shift and go to state 219
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31

state 217

    (64) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 64 (repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 64 (repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 64 (repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 64 (repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .)


state 218

    (54) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE . RLLAVE

    RLLAVE          shift and go to state 220


state 219

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 221


state 220

    (54) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE .

    FIN             reduce using rule 54 (excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE .)
    ID              reduce using rule 54 (excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE .)
    RLLAVE          reduce using rule 54 (excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE .)
    RETURN          reduce using rule 54 (excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID FLECHA GETMESSAGE RLLAVE .)


state 221

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 35 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 35 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 35 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 35 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BOOLEAN_OR in state 191 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN_AND in state 191 resolved as shift
WARNING: shift/reduce conflict for AND in state 191 resolved as shift
WARNING: shift/reduce conflict for OR in state 191 resolved as shift
