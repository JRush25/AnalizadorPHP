Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> INICIO sentencias FIN
Rule 2     sentencias -> asignacion
Rule 3     sentencias -> comparacion
Rule 4     sentencias -> funcion
Rule 5     sentencias -> impresion
Rule 6     sentencias -> repeticion
Rule 7     sentencias -> expresion
Rule 8     sentencias -> excepcion
Rule 9     sentencias -> estdatos
Rule 10    asignacion -> ID ASIGNACION valor PCOMA
Rule 11    asignacion -> ID REF ID PCOMA
Rule 12    asignacion -> ID ASIGNACION estdatos PCOMA
Rule 13    asignacion -> ID ASIGNACION expresion PCOMA
Rule 14    valor -> ID
Rule 15    valor -> NUMBER
Rule 16    valor -> FLOAT
Rule 17    valor -> boolean
Rule 18    valor -> CADENA
Rule 19    boolean -> BOOLEANT
Rule 20    boolean -> BOOLEANF
Rule 21    opcomparacion -> IGUAL
Rule 22    opcomparacion -> MAYOR
Rule 23    opcomparacion -> MENOR
Rule 24    opcomparacion -> MAYORIGUAL
Rule 25    opcomparacion -> MENORIGUAL
Rule 26    opcomparacion -> IS_NOT_EQUAL
Rule 27    expcmp -> valor opcomparacion valor
Rule 28    expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
Rule 29    expcmplog -> expcmp oplog expcmp
Rule 30    expcmplog -> expcmp oplog expcmplog
Rule 31    oplog -> AND
Rule 32    oplog -> OR
Rule 33    comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
Rule 34    comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
Rule 35    comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
Rule 36    comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
Rule 37    array -> ARRAY LPAREN contenido RPAREN
Rule 38    contenido -> valor DOUBLE_ARROW valor
Rule 39    contenido -> valor DOUBLE_ARROW valor COMA contenido
Rule 40    contenido -> valor
Rule 41    contenido -> valor COMA contenido
Rule 42    sort -> SORT LPAREN ID RPAREN PCOMA
Rule 43    estdatos -> array
Rule 44    estdatos -> array_map
Rule 45    estdatos -> heap
Rule 46    numero -> NUMBER
Rule 47    numero -> FLOAT
Rule 48    expresionmat -> numero operadormat numero
Rule 49    operadormat -> PLUS
Rule 50    operadormat -> MINUS
Rule 51    operadormat -> TIMES
Rule 52    operadormat -> DIVIDE
Rule 53    operadormat -> MOD
Rule 54    expresion -> expresionmat
Rule 55    expresion -> expcmplog
Rule 56    funcion -> sort
Rule 57    funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE
Rule 58    funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
Rule 59    args -> ID
Rule 60    args -> ID COMA args
Rule 61    excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
Rule 62    impresion -> ECHO valor PCOMA
Rule 63    impresion -> PRINT valor PCOMA
Rule 64    impresion -> PRINT expresionmat PCOMA
Rule 65    repeticionrep -> MAYOR
Rule 66    repeticionrep -> MENOR
Rule 67    repeticionrep -> MAYORIGUAL
Rule 68    repeticionrep -> MENORIGUAL
Rule 69    actualizar -> INCREMENTO
Rule 70    actualizar -> DECREMENTO
Rule 71    repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
Rule 72    repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
Rule 73    repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
Rule 74    array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
Rule 75    heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
Rule 76    heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

Terminals, with rules where they appear

AND                  : 31
ARRAY                : 37 76
ARRAY_MAP            : 74
ASIGNACION           : 10 12 13 71
BOOLEANF             : 20
BOOLEANT             : 19
CADENA               : 18 61
CATCH                : 61
COMA                 : 39 41 60 61 74 75
DECREMENTO           : 70
DIVIDE               : 52
DO                   : 73
DOUBLE_ARROW         : 38 39 76
ECHO                 : 61 62
ELSE                 : 35 36
ELSEIF               : 36
EXCEPTION            : 61
FIN                  : 1
FLOAT                : 16 47
FOR                  : 71
FUNCTION             : 57 58
ID                   : 10 11 11 12 13 14 42 59 60 61 61 71 71 71 72 72 73 73
IF                   : 33 34 35 36
IGUAL                : 21
INCREMENTO           : 69
INICIO               : 1
INSERT               : 75 76
IS_NOT_EQUAL         : 26
LCORCH               : 75
LLLAVE               : 33 34 35 35 36 36 36 57 58 61 61 71 72 73
LPAREN               : 28 28 33 34 35 36 36 37 42 57 58 61 71 72 73 74 75 76 76
MAYOR                : 22 65
MAYORIGUAL           : 24 67
MENOR                : 23 66
MENORIGUAL           : 25 68
MINUS                : 50
MOD                  : 53
NFUNCION             : 57 58
NUMBER               : 15 46 71 71 75 75 76
OR                   : 32
PCOMA                : 10 11 12 13 42 58 62 63 64 71 71 72 73 73 74 75 76
PLUS                 : 49
PRINT                : 63 64
RCORCH               : 75
REF                  : 11
RETURN               : 58
RLLAVE               : 33 34 35 35 36 36 36 57 58 61 61 71 72 73
RPAREN               : 28 28 33 34 35 36 36 37 42 57 58 61 71 72 73 74 75 76 76
SORT                 : 42
TIMES                : 51
TRY                  : 61
WHILE                : 72 73
error                : 

Nonterminals, with rules where they appear

actualizar           : 71 72 73
args                 : 57 58 60
array                : 43 74
array_map            : 44
asignacion           : 2
boolean              : 17
comparacion          : 3
contenido            : 37 39 41
estdatos             : 9 12
excepcion            : 8
expcmp               : 29 29 30 33 35 36 36
expcmplog            : 30 34 55
expresion            : 7 13
expresionmat         : 54 64
funcion              : 4 74
heap                 : 45
impresion            : 5
numero               : 48 48
opcomparacion        : 27 28 28 72 73
operadormat          : 48
oplog                : 28 29 30
programa             : 0
repeticion           : 6
repeticionrep        : 71
sentencias           : 1 33 34 35 35 36 36 36 57 58 61 71 72 73
sort                 : 56
valor                : 10 27 27 28 28 28 28 38 38 39 39 40 41 58 62 63 72 73 76

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . INICIO sentencias FIN

    INICIO          shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> INICIO . sentencias FIN
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (56) funcion -> . sort
    (57) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (58) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (62) impresion -> . ECHO valor PCOMA
    (63) impresion -> . PRINT valor PCOMA
    (64) impresion -> . PRINT expresionmat PCOMA
    (71) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (72) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (73) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (54) expresion -> . expresionmat
    (55) expresion -> . expcmplog
    (61) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (43) estdatos -> . array
    (44) estdatos -> . array_map
    (45) estdatos -> . heap
    (42) sort -> . SORT LPAREN ID RPAREN PCOMA
    (48) expresionmat -> . numero operadormat numero
    (29) expcmplog -> . expcmp oplog expcmp
    (30) expcmplog -> . expcmp oplog expcmplog
    (37) array -> . ARRAY LPAREN contenido RPAREN
    (74) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (75) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (76) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (46) numero -> . NUMBER
    (47) numero -> . FLOAT
    (27) expcmp -> . valor opcomparacion valor
    (28) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    ARRAY           shift and go to state 34
    ARRAY_MAP       shift and go to state 35
    INSERT          shift and go to state 36
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 37
    LPAREN          shift and go to state 15
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    sentencias                     shift and go to state 3
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31
    numero                         shift and go to state 33
    boolean                        shift and go to state 38

state 3

    (1) programa -> INICIO sentencias . FIN

    FIN             shift and go to state 41


state 4

    (2) sentencias -> asignacion .

    FIN             reduce using rule 2 (sentencias -> asignacion .)
    ID              reduce using rule 2 (sentencias -> asignacion .)
    RLLAVE          reduce using rule 2 (sentencias -> asignacion .)
    RETURN          reduce using rule 2 (sentencias -> asignacion .)


state 5

    (3) sentencias -> comparacion .

    FIN             reduce using rule 3 (sentencias -> comparacion .)
    ID              reduce using rule 3 (sentencias -> comparacion .)
    RLLAVE          reduce using rule 3 (sentencias -> comparacion .)
    RETURN          reduce using rule 3 (sentencias -> comparacion .)


state 6

    (4) sentencias -> funcion .

    FIN             reduce using rule 4 (sentencias -> funcion .)
    ID              reduce using rule 4 (sentencias -> funcion .)
    RLLAVE          reduce using rule 4 (sentencias -> funcion .)
    RETURN          reduce using rule 4 (sentencias -> funcion .)


state 7

    (5) sentencias -> impresion .

    FIN             reduce using rule 5 (sentencias -> impresion .)
    ID              reduce using rule 5 (sentencias -> impresion .)
    RLLAVE          reduce using rule 5 (sentencias -> impresion .)
    RETURN          reduce using rule 5 (sentencias -> impresion .)


state 8

    (6) sentencias -> repeticion .

    FIN             reduce using rule 6 (sentencias -> repeticion .)
    ID              reduce using rule 6 (sentencias -> repeticion .)
    RLLAVE          reduce using rule 6 (sentencias -> repeticion .)
    RETURN          reduce using rule 6 (sentencias -> repeticion .)


state 9

    (7) sentencias -> expresion .

    FIN             reduce using rule 7 (sentencias -> expresion .)
    ID              reduce using rule 7 (sentencias -> expresion .)
    RLLAVE          reduce using rule 7 (sentencias -> expresion .)
    RETURN          reduce using rule 7 (sentencias -> expresion .)


state 10

    (8) sentencias -> excepcion .

    FIN             reduce using rule 8 (sentencias -> excepcion .)
    ID              reduce using rule 8 (sentencias -> excepcion .)
    RLLAVE          reduce using rule 8 (sentencias -> excepcion .)
    RETURN          reduce using rule 8 (sentencias -> excepcion .)


state 11

    (9) sentencias -> estdatos .

    FIN             reduce using rule 9 (sentencias -> estdatos .)
    ID              reduce using rule 9 (sentencias -> estdatos .)
    RLLAVE          reduce using rule 9 (sentencias -> estdatos .)
    RETURN          reduce using rule 9 (sentencias -> estdatos .)


state 12

    (10) asignacion -> ID . ASIGNACION valor PCOMA
    (11) asignacion -> ID . REF ID PCOMA
    (12) asignacion -> ID . ASIGNACION estdatos PCOMA
    (13) asignacion -> ID . ASIGNACION expresion PCOMA
    (14) valor -> ID .

    ASIGNACION      shift and go to state 42
    REF             shift and go to state 43
    IGUAL           reduce using rule 14 (valor -> ID .)
    MAYOR           reduce using rule 14 (valor -> ID .)
    MENOR           reduce using rule 14 (valor -> ID .)
    MAYORIGUAL      reduce using rule 14 (valor -> ID .)
    MENORIGUAL      reduce using rule 14 (valor -> ID .)
    IS_NOT_EQUAL    reduce using rule 14 (valor -> ID .)


state 13

    (27) expcmp -> valor . opcomparacion valor
    (21) opcomparacion -> . IGUAL
    (22) opcomparacion -> . MAYOR
    (23) opcomparacion -> . MENOR
    (24) opcomparacion -> . MAYORIGUAL
    (25) opcomparacion -> . MENORIGUAL
    (26) opcomparacion -> . IS_NOT_EQUAL

    IGUAL           shift and go to state 45
    MAYOR           shift and go to state 46
    MENOR           shift and go to state 47
    MAYORIGUAL      shift and go to state 48
    MENORIGUAL      shift and go to state 49
    IS_NOT_EQUAL    shift and go to state 50

    opcomparacion                  shift and go to state 44

state 14

    (33) comparacion -> IF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> IF . LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> IF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> IF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LPAREN          shift and go to state 51


state 15

    (28) expcmp -> LPAREN . valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    valor                          shift and go to state 52
    boolean                        shift and go to state 38

state 16

    (29) expcmplog -> expcmp . oplog expcmp
    (30) expcmplog -> expcmp . oplog expcmplog
    (31) oplog -> . AND
    (32) oplog -> . OR

    AND             shift and go to state 57
    OR              shift and go to state 58

    oplog                          shift and go to state 56

state 17

    (55) expresion -> expcmplog .

    FIN             reduce using rule 55 (expresion -> expcmplog .)
    PCOMA           reduce using rule 55 (expresion -> expcmplog .)
    ID              reduce using rule 55 (expresion -> expcmplog .)
    RLLAVE          reduce using rule 55 (expresion -> expcmplog .)
    RETURN          reduce using rule 55 (expresion -> expcmplog .)


state 18

    (56) funcion -> sort .

    FIN             reduce using rule 56 (funcion -> sort .)
    ID              reduce using rule 56 (funcion -> sort .)
    RLLAVE          reduce using rule 56 (funcion -> sort .)
    COMA            reduce using rule 56 (funcion -> sort .)
    RETURN          reduce using rule 56 (funcion -> sort .)


state 19

    (57) funcion -> FUNCTION . NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (58) funcion -> FUNCTION . NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE

    NFUNCION        shift and go to state 59


state 20

    (62) impresion -> ECHO . valor PCOMA
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    valor                          shift and go to state 60
    boolean                        shift and go to state 38

state 21

    (63) impresion -> PRINT . valor PCOMA
    (64) impresion -> PRINT . expresionmat PCOMA
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (48) expresionmat -> . numero operadormat numero
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF
    (46) numero -> . NUMBER
    (47) numero -> . FLOAT

    ID              shift and go to state 53
    NUMBER          shift and go to state 63
    FLOAT           shift and go to state 64
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    valor                          shift and go to state 61
    expresionmat                   shift and go to state 62
    boolean                        shift and go to state 38
    numero                         shift and go to state 33

state 22

    (54) expresion -> expresionmat .

    FIN             reduce using rule 54 (expresion -> expresionmat .)
    PCOMA           reduce using rule 54 (expresion -> expresionmat .)
    ID              reduce using rule 54 (expresion -> expresionmat .)
    RLLAVE          reduce using rule 54 (expresion -> expresionmat .)
    RETURN          reduce using rule 54 (expresion -> expresionmat .)


state 23

    (71) repeticion -> FOR . LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    LPAREN          shift and go to state 65


state 24

    (46) numero -> NUMBER .
    (15) valor -> NUMBER .

    PLUS            reduce using rule 46 (numero -> NUMBER .)
    MINUS           reduce using rule 46 (numero -> NUMBER .)
    TIMES           reduce using rule 46 (numero -> NUMBER .)
    DIVIDE          reduce using rule 46 (numero -> NUMBER .)
    MOD             reduce using rule 46 (numero -> NUMBER .)
    IGUAL           reduce using rule 15 (valor -> NUMBER .)
    MAYOR           reduce using rule 15 (valor -> NUMBER .)
    MENOR           reduce using rule 15 (valor -> NUMBER .)
    MAYORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    MENORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    IS_NOT_EQUAL    reduce using rule 15 (valor -> NUMBER .)


state 25

    (72) repeticion -> WHILE . LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE

    LPAREN          shift and go to state 66


state 26

    (73) repeticion -> DO . LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    LLLAVE          shift and go to state 67


state 27

    (61) excepcion -> TRY . LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE

    LLLAVE          shift and go to state 68


state 28

    (18) valor -> CADENA .

    IGUAL           reduce using rule 18 (valor -> CADENA .)
    MAYOR           reduce using rule 18 (valor -> CADENA .)
    MENOR           reduce using rule 18 (valor -> CADENA .)
    MAYORIGUAL      reduce using rule 18 (valor -> CADENA .)
    MENORIGUAL      reduce using rule 18 (valor -> CADENA .)
    IS_NOT_EQUAL    reduce using rule 18 (valor -> CADENA .)
    PCOMA           reduce using rule 18 (valor -> CADENA .)
    AND             reduce using rule 18 (valor -> CADENA .)
    OR              reduce using rule 18 (valor -> CADENA .)
    RPAREN          reduce using rule 18 (valor -> CADENA .)
    FIN             reduce using rule 18 (valor -> CADENA .)
    ID              reduce using rule 18 (valor -> CADENA .)
    RLLAVE          reduce using rule 18 (valor -> CADENA .)
    RETURN          reduce using rule 18 (valor -> CADENA .)
    DOUBLE_ARROW    reduce using rule 18 (valor -> CADENA .)
    COMA            reduce using rule 18 (valor -> CADENA .)


state 29

    (43) estdatos -> array .

    FIN             reduce using rule 43 (estdatos -> array .)
    PCOMA           reduce using rule 43 (estdatos -> array .)
    ID              reduce using rule 43 (estdatos -> array .)
    RLLAVE          reduce using rule 43 (estdatos -> array .)
    RETURN          reduce using rule 43 (estdatos -> array .)


state 30

    (44) estdatos -> array_map .

    FIN             reduce using rule 44 (estdatos -> array_map .)
    PCOMA           reduce using rule 44 (estdatos -> array_map .)
    ID              reduce using rule 44 (estdatos -> array_map .)
    RLLAVE          reduce using rule 44 (estdatos -> array_map .)
    RETURN          reduce using rule 44 (estdatos -> array_map .)


state 31

    (45) estdatos -> heap .

    FIN             reduce using rule 45 (estdatos -> heap .)
    PCOMA           reduce using rule 45 (estdatos -> heap .)
    ID              reduce using rule 45 (estdatos -> heap .)
    RLLAVE          reduce using rule 45 (estdatos -> heap .)
    RETURN          reduce using rule 45 (estdatos -> heap .)


state 32

    (42) sort -> SORT . LPAREN ID RPAREN PCOMA

    LPAREN          shift and go to state 69


state 33

    (48) expresionmat -> numero . operadormat numero
    (49) operadormat -> . PLUS
    (50) operadormat -> . MINUS
    (51) operadormat -> . TIMES
    (52) operadormat -> . DIVIDE
    (53) operadormat -> . MOD

    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74
    MOD             shift and go to state 75

    operadormat                    shift and go to state 70

state 34

    (37) array -> ARRAY . LPAREN contenido RPAREN

    LPAREN          shift and go to state 76


state 35

    (74) array_map -> ARRAY_MAP . LPAREN funcion COMA array RPAREN PCOMA

    LPAREN          shift and go to state 77


state 36

    (75) heap -> INSERT . LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (76) heap -> INSERT . LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

    LPAREN          shift and go to state 78


state 37

    (47) numero -> FLOAT .
    (16) valor -> FLOAT .

    PLUS            reduce using rule 47 (numero -> FLOAT .)
    MINUS           reduce using rule 47 (numero -> FLOAT .)
    TIMES           reduce using rule 47 (numero -> FLOAT .)
    DIVIDE          reduce using rule 47 (numero -> FLOAT .)
    MOD             reduce using rule 47 (numero -> FLOAT .)
    IGUAL           reduce using rule 16 (valor -> FLOAT .)
    MAYOR           reduce using rule 16 (valor -> FLOAT .)
    MENOR           reduce using rule 16 (valor -> FLOAT .)
    MAYORIGUAL      reduce using rule 16 (valor -> FLOAT .)
    MENORIGUAL      reduce using rule 16 (valor -> FLOAT .)
    IS_NOT_EQUAL    reduce using rule 16 (valor -> FLOAT .)


state 38

    (17) valor -> boolean .

    IGUAL           reduce using rule 17 (valor -> boolean .)
    MAYOR           reduce using rule 17 (valor -> boolean .)
    MENOR           reduce using rule 17 (valor -> boolean .)
    MAYORIGUAL      reduce using rule 17 (valor -> boolean .)
    MENORIGUAL      reduce using rule 17 (valor -> boolean .)
    IS_NOT_EQUAL    reduce using rule 17 (valor -> boolean .)
    PCOMA           reduce using rule 17 (valor -> boolean .)
    AND             reduce using rule 17 (valor -> boolean .)
    OR              reduce using rule 17 (valor -> boolean .)
    RPAREN          reduce using rule 17 (valor -> boolean .)
    FIN             reduce using rule 17 (valor -> boolean .)
    ID              reduce using rule 17 (valor -> boolean .)
    RLLAVE          reduce using rule 17 (valor -> boolean .)
    RETURN          reduce using rule 17 (valor -> boolean .)
    DOUBLE_ARROW    reduce using rule 17 (valor -> boolean .)
    COMA            reduce using rule 17 (valor -> boolean .)


state 39

    (19) boolean -> BOOLEANT .

    IGUAL           reduce using rule 19 (boolean -> BOOLEANT .)
    MAYOR           reduce using rule 19 (boolean -> BOOLEANT .)
    MENOR           reduce using rule 19 (boolean -> BOOLEANT .)
    MAYORIGUAL      reduce using rule 19 (boolean -> BOOLEANT .)
    MENORIGUAL      reduce using rule 19 (boolean -> BOOLEANT .)
    IS_NOT_EQUAL    reduce using rule 19 (boolean -> BOOLEANT .)
    PCOMA           reduce using rule 19 (boolean -> BOOLEANT .)
    AND             reduce using rule 19 (boolean -> BOOLEANT .)
    OR              reduce using rule 19 (boolean -> BOOLEANT .)
    RPAREN          reduce using rule 19 (boolean -> BOOLEANT .)
    FIN             reduce using rule 19 (boolean -> BOOLEANT .)
    ID              reduce using rule 19 (boolean -> BOOLEANT .)
    RLLAVE          reduce using rule 19 (boolean -> BOOLEANT .)
    RETURN          reduce using rule 19 (boolean -> BOOLEANT .)
    DOUBLE_ARROW    reduce using rule 19 (boolean -> BOOLEANT .)
    COMA            reduce using rule 19 (boolean -> BOOLEANT .)


state 40

    (20) boolean -> BOOLEANF .

    IGUAL           reduce using rule 20 (boolean -> BOOLEANF .)
    MAYOR           reduce using rule 20 (boolean -> BOOLEANF .)
    MENOR           reduce using rule 20 (boolean -> BOOLEANF .)
    MAYORIGUAL      reduce using rule 20 (boolean -> BOOLEANF .)
    MENORIGUAL      reduce using rule 20 (boolean -> BOOLEANF .)
    IS_NOT_EQUAL    reduce using rule 20 (boolean -> BOOLEANF .)
    PCOMA           reduce using rule 20 (boolean -> BOOLEANF .)
    AND             reduce using rule 20 (boolean -> BOOLEANF .)
    OR              reduce using rule 20 (boolean -> BOOLEANF .)
    RPAREN          reduce using rule 20 (boolean -> BOOLEANF .)
    FIN             reduce using rule 20 (boolean -> BOOLEANF .)
    ID              reduce using rule 20 (boolean -> BOOLEANF .)
    RLLAVE          reduce using rule 20 (boolean -> BOOLEANF .)
    RETURN          reduce using rule 20 (boolean -> BOOLEANF .)
    DOUBLE_ARROW    reduce using rule 20 (boolean -> BOOLEANF .)
    COMA            reduce using rule 20 (boolean -> BOOLEANF .)


state 41

    (1) programa -> INICIO sentencias FIN .

    $end            reduce using rule 1 (programa -> INICIO sentencias FIN .)


state 42

    (10) asignacion -> ID ASIGNACION . valor PCOMA
    (12) asignacion -> ID ASIGNACION . estdatos PCOMA
    (13) asignacion -> ID ASIGNACION . expresion PCOMA
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (43) estdatos -> . array
    (44) estdatos -> . array_map
    (45) estdatos -> . heap
    (54) expresion -> . expresionmat
    (55) expresion -> . expcmplog
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF
    (37) array -> . ARRAY LPAREN contenido RPAREN
    (74) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (75) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (76) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (48) expresionmat -> . numero operadormat numero
    (29) expcmplog -> . expcmp oplog expcmp
    (30) expcmplog -> . expcmp oplog expcmplog
    (46) numero -> . NUMBER
    (47) numero -> . FLOAT
    (27) expcmp -> . valor opcomparacion valor
    (28) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN

    ID              shift and go to state 53
    NUMBER          shift and go to state 63
    FLOAT           shift and go to state 64
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40
    ARRAY           shift and go to state 34
    ARRAY_MAP       shift and go to state 35
    INSERT          shift and go to state 36
    LPAREN          shift and go to state 15

    valor                          shift and go to state 79
    estdatos                       shift and go to state 80
    expresion                      shift and go to state 81
    boolean                        shift and go to state 38
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31
    expresionmat                   shift and go to state 22
    expcmplog                      shift and go to state 17
    numero                         shift and go to state 33
    expcmp                         shift and go to state 16

state 43

    (11) asignacion -> ID REF . ID PCOMA

    ID              shift and go to state 82


state 44

    (27) expcmp -> valor opcomparacion . valor
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    valor                          shift and go to state 83
    boolean                        shift and go to state 38

state 45

    (21) opcomparacion -> IGUAL .

    ID              reduce using rule 21 (opcomparacion -> IGUAL .)
    NUMBER          reduce using rule 21 (opcomparacion -> IGUAL .)
    FLOAT           reduce using rule 21 (opcomparacion -> IGUAL .)
    CADENA          reduce using rule 21 (opcomparacion -> IGUAL .)
    BOOLEANT        reduce using rule 21 (opcomparacion -> IGUAL .)
    BOOLEANF        reduce using rule 21 (opcomparacion -> IGUAL .)


state 46

    (22) opcomparacion -> MAYOR .

    ID              reduce using rule 22 (opcomparacion -> MAYOR .)
    NUMBER          reduce using rule 22 (opcomparacion -> MAYOR .)
    FLOAT           reduce using rule 22 (opcomparacion -> MAYOR .)
    CADENA          reduce using rule 22 (opcomparacion -> MAYOR .)
    BOOLEANT        reduce using rule 22 (opcomparacion -> MAYOR .)
    BOOLEANF        reduce using rule 22 (opcomparacion -> MAYOR .)


state 47

    (23) opcomparacion -> MENOR .

    ID              reduce using rule 23 (opcomparacion -> MENOR .)
    NUMBER          reduce using rule 23 (opcomparacion -> MENOR .)
    FLOAT           reduce using rule 23 (opcomparacion -> MENOR .)
    CADENA          reduce using rule 23 (opcomparacion -> MENOR .)
    BOOLEANT        reduce using rule 23 (opcomparacion -> MENOR .)
    BOOLEANF        reduce using rule 23 (opcomparacion -> MENOR .)


state 48

    (24) opcomparacion -> MAYORIGUAL .

    ID              reduce using rule 24 (opcomparacion -> MAYORIGUAL .)
    NUMBER          reduce using rule 24 (opcomparacion -> MAYORIGUAL .)
    FLOAT           reduce using rule 24 (opcomparacion -> MAYORIGUAL .)
    CADENA          reduce using rule 24 (opcomparacion -> MAYORIGUAL .)
    BOOLEANT        reduce using rule 24 (opcomparacion -> MAYORIGUAL .)
    BOOLEANF        reduce using rule 24 (opcomparacion -> MAYORIGUAL .)


state 49

    (25) opcomparacion -> MENORIGUAL .

    ID              reduce using rule 25 (opcomparacion -> MENORIGUAL .)
    NUMBER          reduce using rule 25 (opcomparacion -> MENORIGUAL .)
    FLOAT           reduce using rule 25 (opcomparacion -> MENORIGUAL .)
    CADENA          reduce using rule 25 (opcomparacion -> MENORIGUAL .)
    BOOLEANT        reduce using rule 25 (opcomparacion -> MENORIGUAL .)
    BOOLEANF        reduce using rule 25 (opcomparacion -> MENORIGUAL .)


state 50

    (26) opcomparacion -> IS_NOT_EQUAL .

    ID              reduce using rule 26 (opcomparacion -> IS_NOT_EQUAL .)
    NUMBER          reduce using rule 26 (opcomparacion -> IS_NOT_EQUAL .)
    FLOAT           reduce using rule 26 (opcomparacion -> IS_NOT_EQUAL .)
    CADENA          reduce using rule 26 (opcomparacion -> IS_NOT_EQUAL .)
    BOOLEANT        reduce using rule 26 (opcomparacion -> IS_NOT_EQUAL .)
    BOOLEANF        reduce using rule 26 (opcomparacion -> IS_NOT_EQUAL .)


state 51

    (33) comparacion -> IF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> IF LPAREN . expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> IF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> IF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (27) expcmp -> . valor opcomparacion valor
    (28) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (29) expcmplog -> . expcmp oplog expcmp
    (30) expcmplog -> . expcmp oplog expcmplog
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    LPAREN          shift and go to state 15
    ID              shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    expcmp                         shift and go to state 84
    expcmplog                      shift and go to state 85
    valor                          shift and go to state 13
    boolean                        shift and go to state 38

state 52

    (28) expcmp -> LPAREN valor . opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (21) opcomparacion -> . IGUAL
    (22) opcomparacion -> . MAYOR
    (23) opcomparacion -> . MENOR
    (24) opcomparacion -> . MAYORIGUAL
    (25) opcomparacion -> . MENORIGUAL
    (26) opcomparacion -> . IS_NOT_EQUAL

    IGUAL           shift and go to state 45
    MAYOR           shift and go to state 46
    MENOR           shift and go to state 47
    MAYORIGUAL      shift and go to state 48
    MENORIGUAL      shift and go to state 49
    IS_NOT_EQUAL    shift and go to state 50

    opcomparacion                  shift and go to state 86

state 53

    (14) valor -> ID .

    IGUAL           reduce using rule 14 (valor -> ID .)
    MAYOR           reduce using rule 14 (valor -> ID .)
    MENOR           reduce using rule 14 (valor -> ID .)
    MAYORIGUAL      reduce using rule 14 (valor -> ID .)
    MENORIGUAL      reduce using rule 14 (valor -> ID .)
    IS_NOT_EQUAL    reduce using rule 14 (valor -> ID .)
    PCOMA           reduce using rule 14 (valor -> ID .)
    AND             reduce using rule 14 (valor -> ID .)
    OR              reduce using rule 14 (valor -> ID .)
    RPAREN          reduce using rule 14 (valor -> ID .)
    FIN             reduce using rule 14 (valor -> ID .)
    ID              reduce using rule 14 (valor -> ID .)
    RLLAVE          reduce using rule 14 (valor -> ID .)
    RETURN          reduce using rule 14 (valor -> ID .)
    DOUBLE_ARROW    reduce using rule 14 (valor -> ID .)
    COMA            reduce using rule 14 (valor -> ID .)


state 54

    (15) valor -> NUMBER .

    IGUAL           reduce using rule 15 (valor -> NUMBER .)
    MAYOR           reduce using rule 15 (valor -> NUMBER .)
    MENOR           reduce using rule 15 (valor -> NUMBER .)
    MAYORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    MENORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    IS_NOT_EQUAL    reduce using rule 15 (valor -> NUMBER .)
    PCOMA           reduce using rule 15 (valor -> NUMBER .)
    AND             reduce using rule 15 (valor -> NUMBER .)
    OR              reduce using rule 15 (valor -> NUMBER .)
    RPAREN          reduce using rule 15 (valor -> NUMBER .)
    FIN             reduce using rule 15 (valor -> NUMBER .)
    ID              reduce using rule 15 (valor -> NUMBER .)
    RLLAVE          reduce using rule 15 (valor -> NUMBER .)
    RETURN          reduce using rule 15 (valor -> NUMBER .)
    DOUBLE_ARROW    reduce using rule 15 (valor -> NUMBER .)
    COMA            reduce using rule 15 (valor -> NUMBER .)


state 55

    (16) valor -> FLOAT .

    IGUAL           reduce using rule 16 (valor -> FLOAT .)
    MAYOR           reduce using rule 16 (valor -> FLOAT .)
    MENOR           reduce using rule 16 (valor -> FLOAT .)
    MAYORIGUAL      reduce using rule 16 (valor -> FLOAT .)
    MENORIGUAL      reduce using rule 16 (valor -> FLOAT .)
    IS_NOT_EQUAL    reduce using rule 16 (valor -> FLOAT .)
    PCOMA           reduce using rule 16 (valor -> FLOAT .)
    AND             reduce using rule 16 (valor -> FLOAT .)
    OR              reduce using rule 16 (valor -> FLOAT .)
    RPAREN          reduce using rule 16 (valor -> FLOAT .)
    FIN             reduce using rule 16 (valor -> FLOAT .)
    ID              reduce using rule 16 (valor -> FLOAT .)
    RLLAVE          reduce using rule 16 (valor -> FLOAT .)
    RETURN          reduce using rule 16 (valor -> FLOAT .)
    DOUBLE_ARROW    reduce using rule 16 (valor -> FLOAT .)
    COMA            reduce using rule 16 (valor -> FLOAT .)


state 56

    (29) expcmplog -> expcmp oplog . expcmp
    (30) expcmplog -> expcmp oplog . expcmplog
    (27) expcmp -> . valor opcomparacion valor
    (28) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (29) expcmplog -> . expcmp oplog expcmp
    (30) expcmplog -> . expcmp oplog expcmplog
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    LPAREN          shift and go to state 15
    ID              shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    expcmp                         shift and go to state 87
    expcmplog                      shift and go to state 88
    valor                          shift and go to state 13
    boolean                        shift and go to state 38

state 57

    (31) oplog -> AND .

    LPAREN          reduce using rule 31 (oplog -> AND .)
    ID              reduce using rule 31 (oplog -> AND .)
    NUMBER          reduce using rule 31 (oplog -> AND .)
    FLOAT           reduce using rule 31 (oplog -> AND .)
    CADENA          reduce using rule 31 (oplog -> AND .)
    BOOLEANT        reduce using rule 31 (oplog -> AND .)
    BOOLEANF        reduce using rule 31 (oplog -> AND .)


state 58

    (32) oplog -> OR .

    LPAREN          reduce using rule 32 (oplog -> OR .)
    ID              reduce using rule 32 (oplog -> OR .)
    NUMBER          reduce using rule 32 (oplog -> OR .)
    FLOAT           reduce using rule 32 (oplog -> OR .)
    CADENA          reduce using rule 32 (oplog -> OR .)
    BOOLEANT        reduce using rule 32 (oplog -> OR .)
    BOOLEANF        reduce using rule 32 (oplog -> OR .)


state 59

    (57) funcion -> FUNCTION NFUNCION . LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (58) funcion -> FUNCTION NFUNCION . LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE

    LPAREN          shift and go to state 89


state 60

    (62) impresion -> ECHO valor . PCOMA

    PCOMA           shift and go to state 90


state 61

    (63) impresion -> PRINT valor . PCOMA

    PCOMA           shift and go to state 91


state 62

    (64) impresion -> PRINT expresionmat . PCOMA

    PCOMA           shift and go to state 92


state 63

    (15) valor -> NUMBER .
    (46) numero -> NUMBER .

    PCOMA           reduce using rule 15 (valor -> NUMBER .)
    IGUAL           reduce using rule 15 (valor -> NUMBER .)
    MAYOR           reduce using rule 15 (valor -> NUMBER .)
    MENOR           reduce using rule 15 (valor -> NUMBER .)
    MAYORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    MENORIGUAL      reduce using rule 15 (valor -> NUMBER .)
    IS_NOT_EQUAL    reduce using rule 15 (valor -> NUMBER .)
    PLUS            reduce using rule 46 (numero -> NUMBER .)
    MINUS           reduce using rule 46 (numero -> NUMBER .)
    TIMES           reduce using rule 46 (numero -> NUMBER .)
    DIVIDE          reduce using rule 46 (numero -> NUMBER .)
    MOD             reduce using rule 46 (numero -> NUMBER .)


state 64

    (16) valor -> FLOAT .
    (47) numero -> FLOAT .

    PCOMA           reduce using rule 16 (valor -> FLOAT .)
    IGUAL           reduce using rule 16 (valor -> FLOAT .)
    MAYOR           reduce using rule 16 (valor -> FLOAT .)
    MENOR           reduce using rule 16 (valor -> FLOAT .)
    MAYORIGUAL      reduce using rule 16 (valor -> FLOAT .)
    MENORIGUAL      reduce using rule 16 (valor -> FLOAT .)
    IS_NOT_EQUAL    reduce using rule 16 (valor -> FLOAT .)
    PLUS            reduce using rule 47 (numero -> FLOAT .)
    MINUS           reduce using rule 47 (numero -> FLOAT .)
    TIMES           reduce using rule 47 (numero -> FLOAT .)
    DIVIDE          reduce using rule 47 (numero -> FLOAT .)
    MOD             reduce using rule 47 (numero -> FLOAT .)


state 65

    (71) repeticion -> FOR LPAREN . ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    ID              shift and go to state 93


state 66

    (72) repeticion -> WHILE LPAREN . ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE

    ID              shift and go to state 94


state 67

    (73) repeticion -> DO LLLAVE . sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (56) funcion -> . sort
    (57) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (58) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (62) impresion -> . ECHO valor PCOMA
    (63) impresion -> . PRINT valor PCOMA
    (64) impresion -> . PRINT expresionmat PCOMA
    (71) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (72) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (73) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (54) expresion -> . expresionmat
    (55) expresion -> . expcmplog
    (61) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (43) estdatos -> . array
    (44) estdatos -> . array_map
    (45) estdatos -> . heap
    (42) sort -> . SORT LPAREN ID RPAREN PCOMA
    (48) expresionmat -> . numero operadormat numero
    (29) expcmplog -> . expcmp oplog expcmp
    (30) expcmplog -> . expcmp oplog expcmplog
    (37) array -> . ARRAY LPAREN contenido RPAREN
    (74) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (75) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (76) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (46) numero -> . NUMBER
    (47) numero -> . FLOAT
    (27) expcmp -> . valor opcomparacion valor
    (28) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    ARRAY           shift and go to state 34
    ARRAY_MAP       shift and go to state 35
    INSERT          shift and go to state 36
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 37
    LPAREN          shift and go to state 15
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    sentencias                     shift and go to state 95
    valor                          shift and go to state 13
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31
    numero                         shift and go to state 33
    boolean                        shift and go to state 38

state 68

    (61) excepcion -> TRY LLLAVE . sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (56) funcion -> . sort
    (57) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (58) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (62) impresion -> . ECHO valor PCOMA
    (63) impresion -> . PRINT valor PCOMA
    (64) impresion -> . PRINT expresionmat PCOMA
    (71) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (72) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (73) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (54) expresion -> . expresionmat
    (55) expresion -> . expcmplog
    (61) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (43) estdatos -> . array
    (44) estdatos -> . array_map
    (45) estdatos -> . heap
    (42) sort -> . SORT LPAREN ID RPAREN PCOMA
    (48) expresionmat -> . numero operadormat numero
    (29) expcmplog -> . expcmp oplog expcmp
    (30) expcmplog -> . expcmp oplog expcmplog
    (37) array -> . ARRAY LPAREN contenido RPAREN
    (74) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (75) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (76) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (46) numero -> . NUMBER
    (47) numero -> . FLOAT
    (27) expcmp -> . valor opcomparacion valor
    (28) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    ARRAY           shift and go to state 34
    ARRAY_MAP       shift and go to state 35
    INSERT          shift and go to state 36
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 37
    LPAREN          shift and go to state 15
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    sentencias                     shift and go to state 96
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31
    numero                         shift and go to state 33
    boolean                        shift and go to state 38

state 69

    (42) sort -> SORT LPAREN . ID RPAREN PCOMA

    ID              shift and go to state 97


state 70

    (48) expresionmat -> numero operadormat . numero
    (46) numero -> . NUMBER
    (47) numero -> . FLOAT

    NUMBER          shift and go to state 99
    FLOAT           shift and go to state 100

    numero                         shift and go to state 98

state 71

    (49) operadormat -> PLUS .

    NUMBER          reduce using rule 49 (operadormat -> PLUS .)
    FLOAT           reduce using rule 49 (operadormat -> PLUS .)


state 72

    (50) operadormat -> MINUS .

    NUMBER          reduce using rule 50 (operadormat -> MINUS .)
    FLOAT           reduce using rule 50 (operadormat -> MINUS .)


state 73

    (51) operadormat -> TIMES .

    NUMBER          reduce using rule 51 (operadormat -> TIMES .)
    FLOAT           reduce using rule 51 (operadormat -> TIMES .)


state 74

    (52) operadormat -> DIVIDE .

    NUMBER          reduce using rule 52 (operadormat -> DIVIDE .)
    FLOAT           reduce using rule 52 (operadormat -> DIVIDE .)


state 75

    (53) operadormat -> MOD .

    NUMBER          reduce using rule 53 (operadormat -> MOD .)
    FLOAT           reduce using rule 53 (operadormat -> MOD .)


state 76

    (37) array -> ARRAY LPAREN . contenido RPAREN
    (38) contenido -> . valor DOUBLE_ARROW valor
    (39) contenido -> . valor DOUBLE_ARROW valor COMA contenido
    (40) contenido -> . valor
    (41) contenido -> . valor COMA contenido
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    contenido                      shift and go to state 101
    valor                          shift and go to state 102
    boolean                        shift and go to state 38

state 77

    (74) array_map -> ARRAY_MAP LPAREN . funcion COMA array RPAREN PCOMA
    (56) funcion -> . sort
    (57) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (58) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (42) sort -> . SORT LPAREN ID RPAREN PCOMA

    FUNCTION        shift and go to state 19
    SORT            shift and go to state 32

    funcion                        shift and go to state 103
    sort                           shift and go to state 18

state 78

    (75) heap -> INSERT LPAREN . LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (76) heap -> INSERT LPAREN . ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

    LCORCH          shift and go to state 104
    ARRAY           shift and go to state 105


state 79

    (10) asignacion -> ID ASIGNACION valor . PCOMA
    (27) expcmp -> valor . opcomparacion valor
    (21) opcomparacion -> . IGUAL
    (22) opcomparacion -> . MAYOR
    (23) opcomparacion -> . MENOR
    (24) opcomparacion -> . MAYORIGUAL
    (25) opcomparacion -> . MENORIGUAL
    (26) opcomparacion -> . IS_NOT_EQUAL

    PCOMA           shift and go to state 106
    IGUAL           shift and go to state 45
    MAYOR           shift and go to state 46
    MENOR           shift and go to state 47
    MAYORIGUAL      shift and go to state 48
    MENORIGUAL      shift and go to state 49
    IS_NOT_EQUAL    shift and go to state 50

    opcomparacion                  shift and go to state 44

state 80

    (12) asignacion -> ID ASIGNACION estdatos . PCOMA

    PCOMA           shift and go to state 107


state 81

    (13) asignacion -> ID ASIGNACION expresion . PCOMA

    PCOMA           shift and go to state 108


state 82

    (11) asignacion -> ID REF ID . PCOMA

    PCOMA           shift and go to state 109


state 83

    (27) expcmp -> valor opcomparacion valor .

    AND             reduce using rule 27 (expcmp -> valor opcomparacion valor .)
    OR              reduce using rule 27 (expcmp -> valor opcomparacion valor .)
    RPAREN          reduce using rule 27 (expcmp -> valor opcomparacion valor .)
    FIN             reduce using rule 27 (expcmp -> valor opcomparacion valor .)
    PCOMA           reduce using rule 27 (expcmp -> valor opcomparacion valor .)
    ID              reduce using rule 27 (expcmp -> valor opcomparacion valor .)
    RLLAVE          reduce using rule 27 (expcmp -> valor opcomparacion valor .)
    RETURN          reduce using rule 27 (expcmp -> valor opcomparacion valor .)


state 84

    (33) comparacion -> IF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> IF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> IF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (29) expcmplog -> expcmp . oplog expcmp
    (30) expcmplog -> expcmp . oplog expcmplog
    (31) oplog -> . AND
    (32) oplog -> . OR

    RPAREN          shift and go to state 110
    AND             shift and go to state 57
    OR              shift and go to state 58

    oplog                          shift and go to state 56

state 85

    (34) comparacion -> IF LPAREN expcmplog . RPAREN LLLAVE sentencias RLLAVE

    RPAREN          shift and go to state 111


state 86

    (28) expcmp -> LPAREN valor opcomparacion . valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    valor                          shift and go to state 112
    boolean                        shift and go to state 38

state 87

    (29) expcmplog -> expcmp oplog expcmp .
    (29) expcmplog -> expcmp . oplog expcmp
    (30) expcmplog -> expcmp . oplog expcmplog
    (31) oplog -> . AND
    (32) oplog -> . OR

    FIN             reduce using rule 29 (expcmplog -> expcmp oplog expcmp .)
    PCOMA           reduce using rule 29 (expcmplog -> expcmp oplog expcmp .)
    RPAREN          reduce using rule 29 (expcmplog -> expcmp oplog expcmp .)
    ID              reduce using rule 29 (expcmplog -> expcmp oplog expcmp .)
    RLLAVE          reduce using rule 29 (expcmplog -> expcmp oplog expcmp .)
    RETURN          reduce using rule 29 (expcmplog -> expcmp oplog expcmp .)
    AND             shift and go to state 57
    OR              shift and go to state 58

    oplog                          shift and go to state 56

state 88

    (30) expcmplog -> expcmp oplog expcmplog .

    FIN             reduce using rule 30 (expcmplog -> expcmp oplog expcmplog .)
    PCOMA           reduce using rule 30 (expcmplog -> expcmp oplog expcmplog .)
    RPAREN          reduce using rule 30 (expcmplog -> expcmp oplog expcmplog .)
    ID              reduce using rule 30 (expcmplog -> expcmp oplog expcmplog .)
    RLLAVE          reduce using rule 30 (expcmplog -> expcmp oplog expcmplog .)
    RETURN          reduce using rule 30 (expcmplog -> expcmp oplog expcmplog .)


state 89

    (57) funcion -> FUNCTION NFUNCION LPAREN . args RPAREN LLLAVE sentencias RLLAVE
    (58) funcion -> FUNCTION NFUNCION LPAREN . args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (59) args -> . ID
    (60) args -> . ID COMA args

    ID              shift and go to state 114

    args                           shift and go to state 113

state 90

    (62) impresion -> ECHO valor PCOMA .

    FIN             reduce using rule 62 (impresion -> ECHO valor PCOMA .)
    ID              reduce using rule 62 (impresion -> ECHO valor PCOMA .)
    RLLAVE          reduce using rule 62 (impresion -> ECHO valor PCOMA .)
    RETURN          reduce using rule 62 (impresion -> ECHO valor PCOMA .)


state 91

    (63) impresion -> PRINT valor PCOMA .

    FIN             reduce using rule 63 (impresion -> PRINT valor PCOMA .)
    ID              reduce using rule 63 (impresion -> PRINT valor PCOMA .)
    RLLAVE          reduce using rule 63 (impresion -> PRINT valor PCOMA .)
    RETURN          reduce using rule 63 (impresion -> PRINT valor PCOMA .)


state 92

    (64) impresion -> PRINT expresionmat PCOMA .

    FIN             reduce using rule 64 (impresion -> PRINT expresionmat PCOMA .)
    ID              reduce using rule 64 (impresion -> PRINT expresionmat PCOMA .)
    RLLAVE          reduce using rule 64 (impresion -> PRINT expresionmat PCOMA .)
    RETURN          reduce using rule 64 (impresion -> PRINT expresionmat PCOMA .)


state 93

    (71) repeticion -> FOR LPAREN ID . ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    ASIGNACION      shift and go to state 115


state 94

    (72) repeticion -> WHILE LPAREN ID . opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (21) opcomparacion -> . IGUAL
    (22) opcomparacion -> . MAYOR
    (23) opcomparacion -> . MENOR
    (24) opcomparacion -> . MAYORIGUAL
    (25) opcomparacion -> . MENORIGUAL
    (26) opcomparacion -> . IS_NOT_EQUAL

    IGUAL           shift and go to state 45
    MAYOR           shift and go to state 46
    MENOR           shift and go to state 47
    MAYORIGUAL      shift and go to state 48
    MENORIGUAL      shift and go to state 49
    IS_NOT_EQUAL    shift and go to state 50

    opcomparacion                  shift and go to state 116

state 95

    (73) repeticion -> DO LLLAVE sentencias . ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    ID              shift and go to state 117


state 96

    (61) excepcion -> TRY LLLAVE sentencias . RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE

    RLLAVE          shift and go to state 118


state 97

    (42) sort -> SORT LPAREN ID . RPAREN PCOMA

    RPAREN          shift and go to state 119


state 98

    (48) expresionmat -> numero operadormat numero .

    FIN             reduce using rule 48 (expresionmat -> numero operadormat numero .)
    PCOMA           reduce using rule 48 (expresionmat -> numero operadormat numero .)
    ID              reduce using rule 48 (expresionmat -> numero operadormat numero .)
    RLLAVE          reduce using rule 48 (expresionmat -> numero operadormat numero .)
    RETURN          reduce using rule 48 (expresionmat -> numero operadormat numero .)


state 99

    (46) numero -> NUMBER .

    FIN             reduce using rule 46 (numero -> NUMBER .)
    PCOMA           reduce using rule 46 (numero -> NUMBER .)
    ID              reduce using rule 46 (numero -> NUMBER .)
    RLLAVE          reduce using rule 46 (numero -> NUMBER .)
    RETURN          reduce using rule 46 (numero -> NUMBER .)


state 100

    (47) numero -> FLOAT .

    FIN             reduce using rule 47 (numero -> FLOAT .)
    PCOMA           reduce using rule 47 (numero -> FLOAT .)
    ID              reduce using rule 47 (numero -> FLOAT .)
    RLLAVE          reduce using rule 47 (numero -> FLOAT .)
    RETURN          reduce using rule 47 (numero -> FLOAT .)


state 101

    (37) array -> ARRAY LPAREN contenido . RPAREN

    RPAREN          shift and go to state 120


state 102

    (38) contenido -> valor . DOUBLE_ARROW valor
    (39) contenido -> valor . DOUBLE_ARROW valor COMA contenido
    (40) contenido -> valor .
    (41) contenido -> valor . COMA contenido

    DOUBLE_ARROW    shift and go to state 121
    RPAREN          reduce using rule 40 (contenido -> valor .)
    COMA            shift and go to state 122


state 103

    (74) array_map -> ARRAY_MAP LPAREN funcion . COMA array RPAREN PCOMA

    COMA            shift and go to state 123


state 104

    (75) heap -> INSERT LPAREN LCORCH . NUMBER COMA NUMBER RCORCH RPAREN PCOMA

    NUMBER          shift and go to state 124


state 105

    (76) heap -> INSERT LPAREN ARRAY . LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

    LPAREN          shift and go to state 125


state 106

    (10) asignacion -> ID ASIGNACION valor PCOMA .

    FIN             reduce using rule 10 (asignacion -> ID ASIGNACION valor PCOMA .)
    ID              reduce using rule 10 (asignacion -> ID ASIGNACION valor PCOMA .)
    RLLAVE          reduce using rule 10 (asignacion -> ID ASIGNACION valor PCOMA .)
    RETURN          reduce using rule 10 (asignacion -> ID ASIGNACION valor PCOMA .)


state 107

    (12) asignacion -> ID ASIGNACION estdatos PCOMA .

    FIN             reduce using rule 12 (asignacion -> ID ASIGNACION estdatos PCOMA .)
    ID              reduce using rule 12 (asignacion -> ID ASIGNACION estdatos PCOMA .)
    RLLAVE          reduce using rule 12 (asignacion -> ID ASIGNACION estdatos PCOMA .)
    RETURN          reduce using rule 12 (asignacion -> ID ASIGNACION estdatos PCOMA .)


state 108

    (13) asignacion -> ID ASIGNACION expresion PCOMA .

    FIN             reduce using rule 13 (asignacion -> ID ASIGNACION expresion PCOMA .)
    ID              reduce using rule 13 (asignacion -> ID ASIGNACION expresion PCOMA .)
    RLLAVE          reduce using rule 13 (asignacion -> ID ASIGNACION expresion PCOMA .)
    RETURN          reduce using rule 13 (asignacion -> ID ASIGNACION expresion PCOMA .)


state 109

    (11) asignacion -> ID REF ID PCOMA .

    FIN             reduce using rule 11 (asignacion -> ID REF ID PCOMA .)
    ID              reduce using rule 11 (asignacion -> ID REF ID PCOMA .)
    RLLAVE          reduce using rule 11 (asignacion -> ID REF ID PCOMA .)
    RETURN          reduce using rule 11 (asignacion -> ID REF ID PCOMA .)


state 110

    (33) comparacion -> IF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE
    (35) comparacion -> IF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> IF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 126


state 111

    (34) comparacion -> IF LPAREN expcmplog RPAREN . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 127


state 112

    (28) expcmp -> LPAREN valor opcomparacion valor . RPAREN oplog LPAREN valor opcomparacion valor RPAREN

    RPAREN          shift and go to state 128


state 113

    (57) funcion -> FUNCTION NFUNCION LPAREN args . RPAREN LLLAVE sentencias RLLAVE
    (58) funcion -> FUNCTION NFUNCION LPAREN args . RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE

    RPAREN          shift and go to state 129


state 114

    (59) args -> ID .
    (60) args -> ID . COMA args

    RPAREN          reduce using rule 59 (args -> ID .)
    COMA            shift and go to state 130


state 115

    (71) repeticion -> FOR LPAREN ID ASIGNACION . NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    NUMBER          shift and go to state 131


state 116

    (72) repeticion -> WHILE LPAREN ID opcomparacion . valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    valor                          shift and go to state 132
    boolean                        shift and go to state 38

state 117

    (73) repeticion -> DO LLLAVE sentencias ID . actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (69) actualizar -> . INCREMENTO
    (70) actualizar -> . DECREMENTO

    INCREMENTO      shift and go to state 134
    DECREMENTO      shift and go to state 135

    actualizar                     shift and go to state 133

state 118

    (61) excepcion -> TRY LLLAVE sentencias RLLAVE . CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE

    CATCH           shift and go to state 136


state 119

    (42) sort -> SORT LPAREN ID RPAREN . PCOMA

    PCOMA           shift and go to state 137


state 120

    (37) array -> ARRAY LPAREN contenido RPAREN .

    FIN             reduce using rule 37 (array -> ARRAY LPAREN contenido RPAREN .)
    PCOMA           reduce using rule 37 (array -> ARRAY LPAREN contenido RPAREN .)
    ID              reduce using rule 37 (array -> ARRAY LPAREN contenido RPAREN .)
    RLLAVE          reduce using rule 37 (array -> ARRAY LPAREN contenido RPAREN .)
    RPAREN          reduce using rule 37 (array -> ARRAY LPAREN contenido RPAREN .)
    RETURN          reduce using rule 37 (array -> ARRAY LPAREN contenido RPAREN .)


state 121

    (38) contenido -> valor DOUBLE_ARROW . valor
    (39) contenido -> valor DOUBLE_ARROW . valor COMA contenido
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    valor                          shift and go to state 138
    boolean                        shift and go to state 38

state 122

    (41) contenido -> valor COMA . contenido
    (38) contenido -> . valor DOUBLE_ARROW valor
    (39) contenido -> . valor DOUBLE_ARROW valor COMA contenido
    (40) contenido -> . valor
    (41) contenido -> . valor COMA contenido
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    valor                          shift and go to state 102
    contenido                      shift and go to state 139
    boolean                        shift and go to state 38

state 123

    (74) array_map -> ARRAY_MAP LPAREN funcion COMA . array RPAREN PCOMA
    (37) array -> . ARRAY LPAREN contenido RPAREN

    ARRAY           shift and go to state 34

    array                          shift and go to state 140

state 124

    (75) heap -> INSERT LPAREN LCORCH NUMBER . COMA NUMBER RCORCH RPAREN PCOMA

    COMA            shift and go to state 141


state 125

    (76) heap -> INSERT LPAREN ARRAY LPAREN . valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    valor                          shift and go to state 142
    boolean                        shift and go to state 38

state 126

    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE
    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (56) funcion -> . sort
    (57) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (58) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (62) impresion -> . ECHO valor PCOMA
    (63) impresion -> . PRINT valor PCOMA
    (64) impresion -> . PRINT expresionmat PCOMA
    (71) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (72) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (73) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (54) expresion -> . expresionmat
    (55) expresion -> . expcmplog
    (61) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (43) estdatos -> . array
    (44) estdatos -> . array_map
    (45) estdatos -> . heap
    (42) sort -> . SORT LPAREN ID RPAREN PCOMA
    (48) expresionmat -> . numero operadormat numero
    (29) expcmplog -> . expcmp oplog expcmp
    (30) expcmplog -> . expcmp oplog expcmplog
    (37) array -> . ARRAY LPAREN contenido RPAREN
    (74) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (75) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (76) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (46) numero -> . NUMBER
    (47) numero -> . FLOAT
    (27) expcmp -> . valor opcomparacion valor
    (28) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    ARRAY           shift and go to state 34
    ARRAY_MAP       shift and go to state 35
    INSERT          shift and go to state 36
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 37
    LPAREN          shift and go to state 15
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    expcmp                         shift and go to state 16
    sentencias                     shift and go to state 143
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31
    numero                         shift and go to state 33
    boolean                        shift and go to state 38

state 127

    (34) comparacion -> IF LPAREN expcmplog RPAREN LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (56) funcion -> . sort
    (57) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (58) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (62) impresion -> . ECHO valor PCOMA
    (63) impresion -> . PRINT valor PCOMA
    (64) impresion -> . PRINT expresionmat PCOMA
    (71) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (72) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (73) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (54) expresion -> . expresionmat
    (55) expresion -> . expcmplog
    (61) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (43) estdatos -> . array
    (44) estdatos -> . array_map
    (45) estdatos -> . heap
    (42) sort -> . SORT LPAREN ID RPAREN PCOMA
    (48) expresionmat -> . numero operadormat numero
    (29) expcmplog -> . expcmp oplog expcmp
    (30) expcmplog -> . expcmp oplog expcmplog
    (37) array -> . ARRAY LPAREN contenido RPAREN
    (74) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (75) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (76) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (46) numero -> . NUMBER
    (47) numero -> . FLOAT
    (27) expcmp -> . valor opcomparacion valor
    (28) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    ARRAY           shift and go to state 34
    ARRAY_MAP       shift and go to state 35
    INSERT          shift and go to state 36
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 37
    LPAREN          shift and go to state 15
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    expcmplog                      shift and go to state 17
    sentencias                     shift and go to state 144
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmp                         shift and go to state 16
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31
    numero                         shift and go to state 33
    boolean                        shift and go to state 38

state 128

    (28) expcmp -> LPAREN valor opcomparacion valor RPAREN . oplog LPAREN valor opcomparacion valor RPAREN
    (31) oplog -> . AND
    (32) oplog -> . OR

    AND             shift and go to state 57
    OR              shift and go to state 58

    oplog                          shift and go to state 145

state 129

    (57) funcion -> FUNCTION NFUNCION LPAREN args RPAREN . LLLAVE sentencias RLLAVE
    (58) funcion -> FUNCTION NFUNCION LPAREN args RPAREN . LLLAVE sentencias RETURN valor PCOMA RLLAVE

    LLLAVE          shift and go to state 146


state 130

    (60) args -> ID COMA . args
    (59) args -> . ID
    (60) args -> . ID COMA args

    ID              shift and go to state 114

    args                           shift and go to state 147

state 131

    (71) repeticion -> FOR LPAREN ID ASIGNACION NUMBER . PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    PCOMA           shift and go to state 148


state 132

    (72) repeticion -> WHILE LPAREN ID opcomparacion valor . RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE

    RPAREN          shift and go to state 149


state 133

    (73) repeticion -> DO LLLAVE sentencias ID actualizar . PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    PCOMA           shift and go to state 150


state 134

    (69) actualizar -> INCREMENTO .

    PCOMA           reduce using rule 69 (actualizar -> INCREMENTO .)
    RPAREN          reduce using rule 69 (actualizar -> INCREMENTO .)


state 135

    (70) actualizar -> DECREMENTO .

    PCOMA           reduce using rule 70 (actualizar -> DECREMENTO .)
    RPAREN          reduce using rule 70 (actualizar -> DECREMENTO .)


state 136

    (61) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH . LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE

    LPAREN          shift and go to state 151


state 137

    (42) sort -> SORT LPAREN ID RPAREN PCOMA .

    FIN             reduce using rule 42 (sort -> SORT LPAREN ID RPAREN PCOMA .)
    ID              reduce using rule 42 (sort -> SORT LPAREN ID RPAREN PCOMA .)
    RLLAVE          reduce using rule 42 (sort -> SORT LPAREN ID RPAREN PCOMA .)
    COMA            reduce using rule 42 (sort -> SORT LPAREN ID RPAREN PCOMA .)
    RETURN          reduce using rule 42 (sort -> SORT LPAREN ID RPAREN PCOMA .)


state 138

    (38) contenido -> valor DOUBLE_ARROW valor .
    (39) contenido -> valor DOUBLE_ARROW valor . COMA contenido

    RPAREN          reduce using rule 38 (contenido -> valor DOUBLE_ARROW valor .)
    COMA            shift and go to state 152


state 139

    (41) contenido -> valor COMA contenido .

    RPAREN          reduce using rule 41 (contenido -> valor COMA contenido .)


state 140

    (74) array_map -> ARRAY_MAP LPAREN funcion COMA array . RPAREN PCOMA

    RPAREN          shift and go to state 153


state 141

    (75) heap -> INSERT LPAREN LCORCH NUMBER COMA . NUMBER RCORCH RPAREN PCOMA

    NUMBER          shift and go to state 154


state 142

    (76) heap -> INSERT LPAREN ARRAY LPAREN valor . DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA

    DOUBLE_ARROW    shift and go to state 155


state 143

    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE
    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    RLLAVE          shift and go to state 156


state 144

    (34) comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 157


state 145

    (28) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog . LPAREN valor opcomparacion valor RPAREN

    LPAREN          shift and go to state 158


state 146

    (57) funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE . sentencias RLLAVE
    (58) funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE . sentencias RETURN valor PCOMA RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (56) funcion -> . sort
    (57) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (58) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (62) impresion -> . ECHO valor PCOMA
    (63) impresion -> . PRINT valor PCOMA
    (64) impresion -> . PRINT expresionmat PCOMA
    (71) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (72) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (73) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (54) expresion -> . expresionmat
    (55) expresion -> . expcmplog
    (61) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (43) estdatos -> . array
    (44) estdatos -> . array_map
    (45) estdatos -> . heap
    (42) sort -> . SORT LPAREN ID RPAREN PCOMA
    (48) expresionmat -> . numero operadormat numero
    (29) expcmplog -> . expcmp oplog expcmp
    (30) expcmplog -> . expcmp oplog expcmplog
    (37) array -> . ARRAY LPAREN contenido RPAREN
    (74) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (75) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (76) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (46) numero -> . NUMBER
    (47) numero -> . FLOAT
    (27) expcmp -> . valor opcomparacion valor
    (28) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    ARRAY           shift and go to state 34
    ARRAY_MAP       shift and go to state 35
    INSERT          shift and go to state 36
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 37
    LPAREN          shift and go to state 15
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    sentencias                     shift and go to state 159
    valor                          shift and go to state 13
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31
    numero                         shift and go to state 33
    boolean                        shift and go to state 38

state 147

    (60) args -> ID COMA args .

    RPAREN          reduce using rule 60 (args -> ID COMA args .)


state 148

    (71) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA . ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    ID              shift and go to state 160


state 149

    (72) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN . LLLAVE sentencias ID actualizar PCOMA RLLAVE

    LLLAVE          shift and go to state 161


state 150

    (73) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA . RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    RLLAVE          shift and go to state 162


state 151

    (61) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN . EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE

    EXCEPTION       shift and go to state 163


state 152

    (39) contenido -> valor DOUBLE_ARROW valor COMA . contenido
    (38) contenido -> . valor DOUBLE_ARROW valor
    (39) contenido -> . valor DOUBLE_ARROW valor COMA contenido
    (40) contenido -> . valor
    (41) contenido -> . valor COMA contenido
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    valor                          shift and go to state 102
    contenido                      shift and go to state 164
    boolean                        shift and go to state 38

state 153

    (74) array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN . PCOMA

    PCOMA           shift and go to state 165


state 154

    (75) heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER . RCORCH RPAREN PCOMA

    RCORCH          shift and go to state 166


state 155

    (76) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW . NUMBER RPAREN RPAREN PCOMA

    NUMBER          shift and go to state 167


state 156

    (33) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .
    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE . ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE . ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    FIN             reduce using rule 33 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 33 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 33 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 33 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE .)
    ELSE            shift and go to state 168
    ELSEIF          shift and go to state 169


state 157

    (34) comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 34 (comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 34 (comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 34 (comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 34 (comparacion -> IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE .)


state 158

    (28) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN . valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    valor                          shift and go to state 170
    boolean                        shift and go to state 38

state 159

    (57) funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias . RLLAVE
    (58) funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias . RETURN valor PCOMA RLLAVE

    RLLAVE          shift and go to state 171
    RETURN          shift and go to state 172


state 160

    (71) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID . repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (65) repeticionrep -> . MAYOR
    (66) repeticionrep -> . MENOR
    (67) repeticionrep -> . MAYORIGUAL
    (68) repeticionrep -> . MENORIGUAL

    MAYOR           shift and go to state 174
    MENOR           shift and go to state 175
    MAYORIGUAL      shift and go to state 176
    MENORIGUAL      shift and go to state 177

    repeticionrep                  shift and go to state 173

state 161

    (72) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE . sentencias ID actualizar PCOMA RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (56) funcion -> . sort
    (57) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (58) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (62) impresion -> . ECHO valor PCOMA
    (63) impresion -> . PRINT valor PCOMA
    (64) impresion -> . PRINT expresionmat PCOMA
    (71) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (72) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (73) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (54) expresion -> . expresionmat
    (55) expresion -> . expcmplog
    (61) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (43) estdatos -> . array
    (44) estdatos -> . array_map
    (45) estdatos -> . heap
    (42) sort -> . SORT LPAREN ID RPAREN PCOMA
    (48) expresionmat -> . numero operadormat numero
    (29) expcmplog -> . expcmp oplog expcmp
    (30) expcmplog -> . expcmp oplog expcmplog
    (37) array -> . ARRAY LPAREN contenido RPAREN
    (74) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (75) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (76) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (46) numero -> . NUMBER
    (47) numero -> . FLOAT
    (27) expcmp -> . valor opcomparacion valor
    (28) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    ARRAY           shift and go to state 34
    ARRAY_MAP       shift and go to state 35
    INSERT          shift and go to state 36
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 37
    LPAREN          shift and go to state 15
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    valor                          shift and go to state 13
    sentencias                     shift and go to state 178
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31
    numero                         shift and go to state 33
    boolean                        shift and go to state 38

state 162

    (73) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE . WHILE LPAREN ID opcomparacion valor RPAREN PCOMA

    WHILE           shift and go to state 179


state 163

    (61) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION . ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE

    ID              shift and go to state 180


state 164

    (39) contenido -> valor DOUBLE_ARROW valor COMA contenido .

    RPAREN          reduce using rule 39 (contenido -> valor DOUBLE_ARROW valor COMA contenido .)


state 165

    (74) array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .

    FIN             reduce using rule 74 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)
    PCOMA           reduce using rule 74 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)
    ID              reduce using rule 74 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)
    RLLAVE          reduce using rule 74 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)
    RETURN          reduce using rule 74 (array_map -> ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA .)


state 166

    (75) heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH . RPAREN PCOMA

    RPAREN          shift and go to state 181


state 167

    (76) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER . RPAREN RPAREN PCOMA

    RPAREN          shift and go to state 182


state 168

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 183


state 169

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF . LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LPAREN          shift and go to state 184


state 170

    (28) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor . opcomparacion valor RPAREN
    (21) opcomparacion -> . IGUAL
    (22) opcomparacion -> . MAYOR
    (23) opcomparacion -> . MENOR
    (24) opcomparacion -> . MAYORIGUAL
    (25) opcomparacion -> . MENORIGUAL
    (26) opcomparacion -> . IS_NOT_EQUAL

    IGUAL           shift and go to state 45
    MAYOR           shift and go to state 46
    MENOR           shift and go to state 47
    MAYORIGUAL      shift and go to state 48
    MENORIGUAL      shift and go to state 49
    IS_NOT_EQUAL    shift and go to state 50

    opcomparacion                  shift and go to state 185

state 171

    (57) funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 57 (funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 57 (funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 57 (funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE .)
    COMA            reduce using rule 57 (funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 57 (funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE .)


state 172

    (58) funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN . valor PCOMA RLLAVE
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    valor                          shift and go to state 186
    boolean                        shift and go to state 38

state 173

    (71) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep . NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    NUMBER          shift and go to state 187


state 174

    (65) repeticionrep -> MAYOR .

    NUMBER          reduce using rule 65 (repeticionrep -> MAYOR .)


state 175

    (66) repeticionrep -> MENOR .

    NUMBER          reduce using rule 66 (repeticionrep -> MENOR .)


state 176

    (67) repeticionrep -> MAYORIGUAL .

    NUMBER          reduce using rule 67 (repeticionrep -> MAYORIGUAL .)


state 177

    (68) repeticionrep -> MENORIGUAL .

    NUMBER          reduce using rule 68 (repeticionrep -> MENORIGUAL .)


state 178

    (72) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias . ID actualizar PCOMA RLLAVE

    ID              shift and go to state 188


state 179

    (73) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE . LPAREN ID opcomparacion valor RPAREN PCOMA

    LPAREN          shift and go to state 189


state 180

    (61) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID . RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE

    RPAREN          shift and go to state 190


state 181

    (75) heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN . PCOMA

    PCOMA           shift and go to state 191


state 182

    (76) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN . RPAREN PCOMA

    RPAREN          shift and go to state 192


state 183

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (56) funcion -> . sort
    (57) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (58) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (62) impresion -> . ECHO valor PCOMA
    (63) impresion -> . PRINT valor PCOMA
    (64) impresion -> . PRINT expresionmat PCOMA
    (71) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (72) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (73) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (54) expresion -> . expresionmat
    (55) expresion -> . expcmplog
    (61) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (43) estdatos -> . array
    (44) estdatos -> . array_map
    (45) estdatos -> . heap
    (42) sort -> . SORT LPAREN ID RPAREN PCOMA
    (48) expresionmat -> . numero operadormat numero
    (29) expcmplog -> . expcmp oplog expcmp
    (30) expcmplog -> . expcmp oplog expcmplog
    (37) array -> . ARRAY LPAREN contenido RPAREN
    (74) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (75) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (76) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (46) numero -> . NUMBER
    (47) numero -> . FLOAT
    (27) expcmp -> . valor opcomparacion valor
    (28) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    ARRAY           shift and go to state 34
    ARRAY_MAP       shift and go to state 35
    INSERT          shift and go to state 36
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 37
    LPAREN          shift and go to state 15
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    expcmp                         shift and go to state 16
    sentencias                     shift and go to state 193
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31
    numero                         shift and go to state 33
    boolean                        shift and go to state 38

state 184

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN . expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (27) expcmp -> . valor opcomparacion valor
    (28) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    LPAREN          shift and go to state 15
    ID              shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    expcmp                         shift and go to state 194
    valor                          shift and go to state 13
    boolean                        shift and go to state 38

state 185

    (28) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion . valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    valor                          shift and go to state 195
    boolean                        shift and go to state 38

state 186

    (58) funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor . PCOMA RLLAVE

    PCOMA           shift and go to state 196


state 187

    (71) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER . PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE

    PCOMA           shift and go to state 197


state 188

    (72) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID . actualizar PCOMA RLLAVE
    (69) actualizar -> . INCREMENTO
    (70) actualizar -> . DECREMENTO

    INCREMENTO      shift and go to state 134
    DECREMENTO      shift and go to state 135

    actualizar                     shift and go to state 198

state 189

    (73) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN . ID opcomparacion valor RPAREN PCOMA

    ID              shift and go to state 199


state 190

    (61) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN . LLLAVE ECHO CADENA COMA ID RLLAVE

    LLLAVE          shift and go to state 200


state 191

    (75) heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .

    FIN             reduce using rule 75 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)
    PCOMA           reduce using rule 75 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)
    ID              reduce using rule 75 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)
    RLLAVE          reduce using rule 75 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)
    RETURN          reduce using rule 75 (heap -> INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA .)


state 192

    (76) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN . PCOMA

    PCOMA           shift and go to state 201


state 193

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 202


state 194

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp . RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    RPAREN          shift and go to state 203


state 195

    (28) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor . RPAREN

    RPAREN          shift and go to state 204


state 196

    (58) funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA . RLLAVE

    RLLAVE          shift and go to state 205


state 197

    (71) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA . ID actualizar RPAREN LLLAVE sentencias RLLAVE

    ID              shift and go to state 206


state 198

    (72) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar . PCOMA RLLAVE

    PCOMA           shift and go to state 207


state 199

    (73) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID . opcomparacion valor RPAREN PCOMA
    (21) opcomparacion -> . IGUAL
    (22) opcomparacion -> . MAYOR
    (23) opcomparacion -> . MENOR
    (24) opcomparacion -> . MAYORIGUAL
    (25) opcomparacion -> . MENORIGUAL
    (26) opcomparacion -> . IS_NOT_EQUAL

    IGUAL           shift and go to state 45
    MAYOR           shift and go to state 46
    MENOR           shift and go to state 47
    MAYORIGUAL      shift and go to state 48
    MENORIGUAL      shift and go to state 49
    IS_NOT_EQUAL    shift and go to state 50

    opcomparacion                  shift and go to state 208

state 200

    (61) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE . ECHO CADENA COMA ID RLLAVE

    ECHO            shift and go to state 209


state 201

    (76) heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .

    FIN             reduce using rule 76 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)
    PCOMA           reduce using rule 76 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)
    ID              reduce using rule 76 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)
    RLLAVE          reduce using rule 76 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)
    RETURN          reduce using rule 76 (heap -> INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA .)


state 202

    (35) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 35 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 35 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 35 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 35 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)


state 203

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN . LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 210


state 204

    (28) expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .

    AND             reduce using rule 28 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    OR              reduce using rule 28 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    RPAREN          reduce using rule 28 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    FIN             reduce using rule 28 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    PCOMA           reduce using rule 28 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    ID              reduce using rule 28 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    RLLAVE          reduce using rule 28 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)
    RETURN          reduce using rule 28 (expcmp -> LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN .)


state 205

    (58) funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .

    FIN             reduce using rule 58 (funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)
    ID              reduce using rule 58 (funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)
    RLLAVE          reduce using rule 58 (funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)
    COMA            reduce using rule 58 (funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)
    RETURN          reduce using rule 58 (funcion -> FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE .)


state 206

    (71) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID . actualizar RPAREN LLLAVE sentencias RLLAVE
    (69) actualizar -> . INCREMENTO
    (70) actualizar -> . DECREMENTO

    INCREMENTO      shift and go to state 134
    DECREMENTO      shift and go to state 135

    actualizar                     shift and go to state 211

state 207

    (72) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA . RLLAVE

    RLLAVE          shift and go to state 212


state 208

    (73) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion . valor RPAREN PCOMA
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 53
    NUMBER          shift and go to state 54
    FLOAT           shift and go to state 55
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    valor                          shift and go to state 213
    boolean                        shift and go to state 38

state 209

    (61) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO . CADENA COMA ID RLLAVE

    CADENA          shift and go to state 214


state 210

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE . sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (56) funcion -> . sort
    (57) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (58) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (62) impresion -> . ECHO valor PCOMA
    (63) impresion -> . PRINT valor PCOMA
    (64) impresion -> . PRINT expresionmat PCOMA
    (71) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (72) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (73) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (54) expresion -> . expresionmat
    (55) expresion -> . expcmplog
    (61) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (43) estdatos -> . array
    (44) estdatos -> . array_map
    (45) estdatos -> . heap
    (42) sort -> . SORT LPAREN ID RPAREN PCOMA
    (48) expresionmat -> . numero operadormat numero
    (29) expcmplog -> . expcmp oplog expcmp
    (30) expcmplog -> . expcmp oplog expcmplog
    (37) array -> . ARRAY LPAREN contenido RPAREN
    (74) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (75) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (76) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (46) numero -> . NUMBER
    (47) numero -> . FLOAT
    (27) expcmp -> . valor opcomparacion valor
    (28) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    ARRAY           shift and go to state 34
    ARRAY_MAP       shift and go to state 35
    INSERT          shift and go to state 36
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 37
    LPAREN          shift and go to state 15
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    expcmp                         shift and go to state 16
    sentencias                     shift and go to state 215
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31
    numero                         shift and go to state 33
    boolean                        shift and go to state 38

state 211

    (71) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar . RPAREN LLLAVE sentencias RLLAVE

    RPAREN          shift and go to state 216


state 212

    (72) repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .

    FIN             reduce using rule 72 (repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .)
    ID              reduce using rule 72 (repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .)
    RLLAVE          reduce using rule 72 (repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .)
    RETURN          reduce using rule 72 (repeticion -> WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE .)


state 213

    (73) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor . RPAREN PCOMA

    RPAREN          shift and go to state 217


state 214

    (61) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA . COMA ID RLLAVE

    COMA            shift and go to state 218


state 215

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias . RLLAVE ELSE LLLAVE sentencias RLLAVE

    RLLAVE          shift and go to state 219


state 216

    (71) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 220


state 217

    (73) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN . PCOMA

    PCOMA           shift and go to state 221


state 218

    (61) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA . ID RLLAVE

    ID              shift and go to state 222


state 219

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE . ELSE LLLAVE sentencias RLLAVE

    ELSE            shift and go to state 223


state 220

    (71) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (56) funcion -> . sort
    (57) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (58) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (62) impresion -> . ECHO valor PCOMA
    (63) impresion -> . PRINT valor PCOMA
    (64) impresion -> . PRINT expresionmat PCOMA
    (71) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (72) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (73) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (54) expresion -> . expresionmat
    (55) expresion -> . expcmplog
    (61) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (43) estdatos -> . array
    (44) estdatos -> . array_map
    (45) estdatos -> . heap
    (42) sort -> . SORT LPAREN ID RPAREN PCOMA
    (48) expresionmat -> . numero operadormat numero
    (29) expcmplog -> . expcmp oplog expcmp
    (30) expcmplog -> . expcmp oplog expcmplog
    (37) array -> . ARRAY LPAREN contenido RPAREN
    (74) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (75) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (76) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (46) numero -> . NUMBER
    (47) numero -> . FLOAT
    (27) expcmp -> . valor opcomparacion valor
    (28) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    ARRAY           shift and go to state 34
    ARRAY_MAP       shift and go to state 35
    INSERT          shift and go to state 36
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 37
    LPAREN          shift and go to state 15
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    sentencias                     shift and go to state 224
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmp                         shift and go to state 16
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31
    numero                         shift and go to state 33
    boolean                        shift and go to state 38

state 221

    (73) repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .

    FIN             reduce using rule 73 (repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .)
    ID              reduce using rule 73 (repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .)
    RLLAVE          reduce using rule 73 (repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .)
    RETURN          reduce using rule 73 (repeticion -> DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA .)


state 222

    (61) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID . RLLAVE

    RLLAVE          shift and go to state 225


state 223

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE . LLLAVE sentencias RLLAVE

    LLLAVE          shift and go to state 226


state 224

    (71) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 227


state 225

    (61) excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE .

    FIN             reduce using rule 61 (excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE .)
    ID              reduce using rule 61 (excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE .)
    RLLAVE          reduce using rule 61 (excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE .)
    RETURN          reduce using rule 61 (excepcion -> TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE .)


state 226

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE . sentencias RLLAVE
    (2) sentencias -> . asignacion
    (3) sentencias -> . comparacion
    (4) sentencias -> . funcion
    (5) sentencias -> . impresion
    (6) sentencias -> . repeticion
    (7) sentencias -> . expresion
    (8) sentencias -> . excepcion
    (9) sentencias -> . estdatos
    (10) asignacion -> . ID ASIGNACION valor PCOMA
    (11) asignacion -> . ID REF ID PCOMA
    (12) asignacion -> . ID ASIGNACION estdatos PCOMA
    (13) asignacion -> . ID ASIGNACION expresion PCOMA
    (33) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE
    (34) comparacion -> . IF LPAREN expcmplog RPAREN LLLAVE sentencias RLLAVE
    (35) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (36) comparacion -> . IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE
    (56) funcion -> . sort
    (57) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RLLAVE
    (58) funcion -> . FUNCTION NFUNCION LPAREN args RPAREN LLLAVE sentencias RETURN valor PCOMA RLLAVE
    (62) impresion -> . ECHO valor PCOMA
    (63) impresion -> . PRINT valor PCOMA
    (64) impresion -> . PRINT expresionmat PCOMA
    (71) repeticion -> . FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE
    (72) repeticion -> . WHILE LPAREN ID opcomparacion valor RPAREN LLLAVE sentencias ID actualizar PCOMA RLLAVE
    (73) repeticion -> . DO LLLAVE sentencias ID actualizar PCOMA RLLAVE WHILE LPAREN ID opcomparacion valor RPAREN PCOMA
    (54) expresion -> . expresionmat
    (55) expresion -> . expcmplog
    (61) excepcion -> . TRY LLLAVE sentencias RLLAVE CATCH LPAREN EXCEPTION ID RPAREN LLLAVE ECHO CADENA COMA ID RLLAVE
    (43) estdatos -> . array
    (44) estdatos -> . array_map
    (45) estdatos -> . heap
    (42) sort -> . SORT LPAREN ID RPAREN PCOMA
    (48) expresionmat -> . numero operadormat numero
    (29) expcmplog -> . expcmp oplog expcmp
    (30) expcmplog -> . expcmp oplog expcmplog
    (37) array -> . ARRAY LPAREN contenido RPAREN
    (74) array_map -> . ARRAY_MAP LPAREN funcion COMA array RPAREN PCOMA
    (75) heap -> . INSERT LPAREN LCORCH NUMBER COMA NUMBER RCORCH RPAREN PCOMA
    (76) heap -> . INSERT LPAREN ARRAY LPAREN valor DOUBLE_ARROW NUMBER RPAREN RPAREN PCOMA
    (46) numero -> . NUMBER
    (47) numero -> . FLOAT
    (27) expcmp -> . valor opcomparacion valor
    (28) expcmp -> . LPAREN valor opcomparacion valor RPAREN oplog LPAREN valor opcomparacion valor RPAREN
    (14) valor -> . ID
    (15) valor -> . NUMBER
    (16) valor -> . FLOAT
    (17) valor -> . boolean
    (18) valor -> . CADENA
    (19) boolean -> . BOOLEANT
    (20) boolean -> . BOOLEANF

    ID              shift and go to state 12
    IF              shift and go to state 14
    FUNCTION        shift and go to state 19
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    FOR             shift and go to state 23
    WHILE           shift and go to state 25
    DO              shift and go to state 26
    TRY             shift and go to state 27
    SORT            shift and go to state 32
    ARRAY           shift and go to state 34
    ARRAY_MAP       shift and go to state 35
    INSERT          shift and go to state 36
    NUMBER          shift and go to state 24
    FLOAT           shift and go to state 37
    LPAREN          shift and go to state 15
    CADENA          shift and go to state 28
    BOOLEANT        shift and go to state 39
    BOOLEANF        shift and go to state 40

    expcmp                         shift and go to state 16
    sentencias                     shift and go to state 228
    asignacion                     shift and go to state 4
    comparacion                    shift and go to state 5
    funcion                        shift and go to state 6
    impresion                      shift and go to state 7
    repeticion                     shift and go to state 8
    expresion                      shift and go to state 9
    excepcion                      shift and go to state 10
    estdatos                       shift and go to state 11
    valor                          shift and go to state 13
    expcmplog                      shift and go to state 17
    sort                           shift and go to state 18
    expresionmat                   shift and go to state 22
    array                          shift and go to state 29
    array_map                      shift and go to state 30
    heap                           shift and go to state 31
    numero                         shift and go to state 33
    boolean                        shift and go to state 38

state 227

    (71) repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 71 (repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 71 (repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 71 (repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 71 (repeticion -> FOR LPAREN ID ASIGNACION NUMBER PCOMA ID repeticionrep NUMBER PCOMA ID actualizar RPAREN LLLAVE sentencias RLLAVE .)


state 228

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias . RLLAVE

    RLLAVE          shift and go to state 229


state 229

    (36) comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .

    FIN             reduce using rule 36 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    ID              reduce using rule 36 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RLLAVE          reduce using rule 36 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)
    RETURN          reduce using rule 36 (comparacion -> IF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSEIF LPAREN expcmp RPAREN LLLAVE sentencias RLLAVE ELSE LLLAVE sentencias RLLAVE .)

